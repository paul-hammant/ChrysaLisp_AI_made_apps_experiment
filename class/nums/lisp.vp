(include "lib/asm/func.inc")
(include "././num/class.inc")
(include "././fixeds/class.inc")
(include "././lisp/class.inc")

(def-method 'nums :lisp_vecop1)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;:r2 = nums method (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = 0 if error, else value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (dst iter_begin nums1 nums2 this args func argc len1 len2)
		'(:r0 :r1 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14))

	(entry 'nums :lisp_vecop1 `(,this ,args ,func))

	(assign `((,args array_length)) `(,argc))
(errorcase
	(gotoif (list argc '> 3) 'error)
	(call 'lisp :env_args_match `(,args (@ ,(f-path 'nums :vtable)) 2) '(tmp))
	(gotoif `(,tmp = 0) 'error))
	(assign `((,args array_begin)) `(,iter_begin))
	(array-get-args iter_begin `(,nums1 ,nums2))
	(assign `((,nums1 array_length)) `(,len1))
(errorcase
	(gotoif (list len1 '= 0) 'error)
	(assign `((,nums2 array_length)) `(,len2))
	(gotoif (list len1 '> len2) 'error))
	(vpif (list argc '= 2))
		(v-call 'nums :vcreate `(,dst) `(,dst) nums1 iter_begin)
		(call 'nums :set_cap `(,dst ,len1) `(,dst))
		(call 'nums :set_length `(,dst ,len1) `(,dst _))
	(else)
		(vp-cpy-ir iter_begin (* +ptr_size 2) dst)
	(errorcase
		(assign `((,dst array_length)) `(,len2))
		(gotoif (list len1 '> len2) 'error))
		(call 'obj :ref `(,dst) `(,dst))
	(endif)
	(r-call 'nums :add `(,dst ,nums1 ,nums2 ,func) `(,dst ,iter_begin))
	(errorif (list iter_begin '= 0) 'error1)

	(exit 'nums :lisp_vecop1 `(,this ,dst))
	(vp-ret)

(errorcase
(vp-label 'error1)
	(call 'obj :deref `(,dst))
(vp-label 'error)
	(exit 'nums :lisp_vecop1 `(,this 0))
	(vp-ret))

(def-func-end)

(def-method 'nums :lisp_vecop2)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;:r2 = nums method (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = 0 if error, else value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (dst iter_begin nums1 this args func argc len1 len2)
		'(:r0 :r1 :r8 :r9 :r10 :r11 :r12 :r13 :r14))

	(entry 'nums :lisp_vecop2 `(,this ,args ,func))

	(assign `((,args array_length)) `(,argc))
(errorcase
	(gotoif (list argc '> 2) 'error)
	(call 'lisp :env_args_match `(,args (@ ,(f-path 'nums :vtable)) 1) '(tmp))
	(gotoif `(,tmp = 0) 'error))
	(assign `((,args array_begin)) `(,iter_begin))
	(array-get-args iter_begin `(,nums1))
	(assign `((,nums1 array_length)) `(,len1))
	(errorif (list len1 '= 0) 'error)
	(vpif (list argc '= 1))
		(v-call 'nums :vcreate `(,dst) `(,dst) nums1 iter_begin)
		(call 'nums :set_cap `(,dst ,len1) `(,dst))
		(call 'nums :set_length `(,dst ,len1) `(,dst _))
	(else)
		(vp-cpy-ir iter_begin (* +ptr_size 1) dst)
	(errorcase
		(assign `((,dst array_length)) `(,len2))
		(gotoif (list len1 '> len2) 'error))
		(call 'obj :ref `(,dst) `(,dst))
	(endif)
	(r-call 'nums :abs `(,dst ,nums1 ,func) `(,dst))

	(exit 'nums :lisp_vecop2 `(,this ,dst))
	(vp-ret)
(vp-label 'error)
	(exit 'nums :lisp_vecop2 `(,this 0))
	(vp-ret)

(def-func-end)

(def-method 'nums :lisp_add)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'nums :lisp_add '(:r0 :r1))

	(vp-push :r1)
	(array-bind-args :r1 '(:r2))
	(v-bind 'nums :add :r2 :r2)
	(call 'nums :lisp_vecop1 '(:r0 :r1 :r2) '(:r0 :r1))
	(vp-pop :r3)
	(errorif '(:r1 = 0) 'error)

	(exit 'nums :lisp_add '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(nums-add nums nums [nums])" +error_msg_wrong_types :r3)))

(def-func-end)

(def-method 'nums :lisp_sub)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'nums :lisp_sub '(:r0 :r1))

	(vp-push :r1)
	(array-bind-args :r1 '(:r2))
	(v-bind 'nums :sub :r2 :r2)
	(call 'nums :lisp_vecop1 '(:r0 :r1 :r2) '(:r0 :r1))
	(vp-pop :r3)
	(errorif '(:r1 = 0) 'error)

	(exit 'nums :lisp_sub '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(nums-sub nums nums [nums])" +error_msg_wrong_types :r3)))

(def-func-end)

(def-method 'nums :lisp_min)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'nums :lisp_min '(:r0 :r1))

	(vp-push :r1)
	(array-bind-args :r1 '(:r2))
	(v-bind 'nums :min :r2 :r2)
	(call 'nums :lisp_vecop1 '(:r0 :r1 :r2) '(:r0 :r1))
	(vp-pop :r3)
	(errorif '(:r1 = 0) 'error)

	(exit 'nums :lisp_min '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(nums-min nums nums [nums])" +error_msg_wrong_types :r3)))

(def-func-end)

(def-method 'nums :lisp_max)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'nums :lisp_max '(:r0 :r1))

	(vp-push :r1)
	(array-bind-args :r1 '(:r2))
	(v-bind 'nums :max :r2 :r2)
	(call 'nums :lisp_vecop1 '(:r0 :r1 :r2) '(:r0 :r1))
	(vp-pop :r3)
	(errorif '(:r1 = 0) 'error)

	(exit 'nums :lisp_max '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(nums-max nums nums [nums])" +error_msg_wrong_types :r3)))

(def-func-end)

(def-method 'nums :lisp_mul)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'nums :lisp_mul '(:r0 :r1))

	(vp-push :r1)
	(array-bind-args :r1 '(:r2))
	(v-bind 'nums :mul :r2 :r2)
	(call 'nums :lisp_vecop1 '(:r0 :r1 :r2) '(:r0 :r1))
	(vp-pop :r3)
	(errorif '(:r1 = 0) 'error)

	(exit 'nums :lisp_mul '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(nums-mul nums nums [nums])" +error_msg_wrong_types :r3)))

(def-func-end)

(def-method 'nums :lisp_div)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'nums :lisp_div '(:r0 :r1))

	(vp-push :r1)
	(array-bind-args :r1 '(:r2))
	(v-bind 'nums :div :r2 :r2)
	(call 'nums :lisp_vecop1 '(:r0 :r1 :r2) '(:r0 :r1))
	(vp-pop :r3)
	(errorif '(:r1 = 0) 'error)

	(exit 'nums :lisp_div '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(nums-div nums nums [nums])" +error_msg_wrong_types :r3)))

(def-func-end)

(def-method 'nums :lisp_mod)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'nums :lisp_mod '(:r0 :r1))

	(vp-push :r1)
	(array-bind-args :r1 '(:r2))
	(v-bind 'nums :mod :r2 :r2)
	(call 'nums :lisp_vecop1 '(:r0 :r1 :r2) '(:r0 :r1))
	(vp-pop :r3)
	(errorif '(:r1 = 0) 'error)

	(exit 'nums :lisp_mod '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(nums-mod nums nums [nums])" +error_msg_wrong_types :r3)))

(def-func-end)

(def-method 'nums :lisp_sum)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'nums :lisp_sum '(:r0 :r1))

	(errorif-lisp-args-sig :r1 1 'error)

	(vp-push :r0)
	(array-bind-args :r1 '(:r0))
	(vp-push :r0)
	(call 'nums :sum '(:r0) '(_ :r0))
	(vp-pop :r1)
	(v-call 'nums :velement '(:r0) '(:r1) :r1 :r1)
	(vp-pop :r0)

	(exit 'nums :lisp_sum '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(nums-sum nums)" +error_msg_wrong_types :r1))
	(signature '(nums)))

(def-func-end)

(def-method 'nums :lisp_scale)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (dst iter_begin nums1 scale this args argc len1 len2)
		'(:r0 :r1 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14))

	(entry 'nums :lisp_scale `(,this ,args))

	(errorif-lisp-args-sig-range :r1 2 3 'error)

	(assign `((,args array_length)) `(,argc))
	(assign `((,args array_begin)) `(,iter_begin))
	(array-get-args iter_begin `(,nums1 ,scale))
	(assign `((,nums1 array_length)) `(,len1))
	(errorif (list len1 '= 0) 'error)
	(vpif (list argc '= 2))
		(v-call 'nums :vcreate `(,dst) `(,dst) nums1 iter_begin)
		(call 'nums :set_cap `(,dst ,len1) `(,dst))
		(call 'nums :set_length `(,dst ,len1) `(,dst _))
	(else)
		(vp-cpy-ir iter_begin (* +ptr_size 2) dst)
	(errorcase
		(assign `((,dst array_length)) `(,len2))
		(gotoif (list len1 '> len2) 'error))
		(call 'obj :ref `(,dst) `(,dst))
	(endif)
	(call 'nums :scale `(,dst ,nums1 (,scale num_value)) `(,dst))

	(exit 'nums :lisp_scale `(,this ,dst))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r9 "(nums-scale nums scale [nums])" +error_msg_wrong_types :r10))
	(signature '(nums num nums)))

(def-func-end)

(def-method 'nums :lisp_abs)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'nums :lisp_abs '(:r0 :r1))

	(vp-push :r1)
	(array-bind-args :r1 '(:r2))
	(v-bind 'nums :abs :r2 :r2)
	(call 'nums :lisp_vecop2 '(:r0 :r1 :r2) '(:r0 :r1))
	(vp-pop :r3)
	(errorif '(:r1 = 0) 'error)

	(exit 'nums :lisp_abs '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(nums-abs nums [nums])" +error_msg_wrong_types :r3)))

(def-func-end)

(def-method 'nums :lisp_dot)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'nums :lisp_dot '(:r0 :r1))

	(errorif-lisp-args-len :r1 /= 2 'error)
	(errorif-lisp-args-match :r1 nums 2 'error)

	(vp-push :r0 :r1)
	(array-bind-args :r1 '(:r0 :r1))

(errorcase
	(assign '((:r0 array_length)) '(:r2))
	(assign '((:r1 array_length)) '(:r3))
	(gotoif '(:r2 = 0) 'error1)
	(gotoif '(:r2 > :r3) 'error1))

	(vp-push :r0)
	(call 'nums :dot '(:r0 :r1) '(_ :r0))
	(vp-pop :r1)
	(v-call 'nums :velement '(:r0) '(:r1) :r1 :r1)
	(vp-pop :r0 :r2)

	(exit 'nums :lisp_dot '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error1)
	(vp-pop :r0 :r1)
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(nums-dot nums nums)" +error_msg_wrong_types :r1)))

(def-func-end)
