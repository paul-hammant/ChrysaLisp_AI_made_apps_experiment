(include "lib/asm/func.inc")
(include "./class.inc")
(include "sys/kernel/class.inc")

(gen-vtable 'netid)

(def-method 'netid :create)
	;outputs
	;:r0 = 0 if error, else netid object (ptr)
	;trashes
	;:r1-:r6

	;save size of data
	(entry 'netid :create '())

	;create new str object
	(call 'sys_mem :alloc `(,(+ netid_size +byte_size)) '(:r0 _))
	(vpif '(:r0 /= 0))
		;init the object
		(call 'netid :init `(:r0 (@ ,(f-path 'netid :vtable))) '(:r0 :r1))
		(vpif '(:r1 = 0))
			;error with init
			(call 'sys_mem :free '(:r0))
			(vp-xor-rr :r0 :r0)
		(endif)
	(endif)

	(exit 'netid :create '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'netid :init)
	;inputs
	;:r0 = netid object (ptr)
	;:r1 = vtable (pptr)
	;outputs
	;:r0 = netid object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r6

	(entry 'netid :init '(:r0 :r1))

	;init parent
	(s-call 'netid :init '(:r0 :r1 0 net_id_size) '(:r0 :r1))
	(vpif '(:r1 /= 0))
		;init myself
		(vp-cpy-rr :r0 :r6)
		(call 'sys_mail :alloc_mbox :nil `((:r6 ,(+ netid_id net_id_mbox_id)) _))
		(call 'sys_kernel :id :nil
			`((:r6 ,(+ netid_id net_id_node_id node_id_node1))
			(:r6 ,(+ netid_id net_id_node_id node_id_node2))))
		(vp-cpy-rr :r6 :r0)
	(endif)

	(exit 'str :init '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'netid :deinit)
	;inputs
	;:r0 = netid object (ptr)
	;outputs
	;:r0 = netid object (ptr)
	;trashes
	;:r1-:r14

	(entry 'netid :deinit '(:r0))

	(vp-push :r0)
	(call 'sys_mail :free_mbox `((:r0 ,(+ str_data net_id_mbox_id))))
	(vp-pop :r0)

	(s-jump 'netid :deinit '(:r0))

(def-func-end)
