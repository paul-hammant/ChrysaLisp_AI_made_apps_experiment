(include "lib/asm/func.inc")
(include "././hmap/class.inc")
(include "./class.inc")

(def-method 'lisp :lisp_eval)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'lisp :lisp_eval '(:r0 :r1))

	(assign '((:r1 array_length)) '(:r2))
	(vpif '(:r2 = 1))
		(array-bind-args :r1 '(:r1))
		(jump 'lisp :repl_eval '(:r0 :r1))
	(endif)

	(errorif-lisp-args-sig 'error :r1 2)

	(array-bind-args :r1 '(:r1 :r2))
	(assign '((:r0 lisp_environment) :r2) '(:r3 (:r0 lisp_environment)))
	(vp-push :r3)
	(call 'lisp :repl_eval '(:r0 :r1) '(:r0 :r1))
	(vp-pop :r2)
	(assign '(:r2) '((:r0 lisp_environment)))

	(exit 'lisp :lisp_eval '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(eval form [env])" +error_msg_wrong_types :r1))
	(signature '(obj hmap)))

(def-func-end)

(def-method 'lisp :lisp_eval_list)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'lisp :lisp_eval_list '(:r0 :r1))

	(assign '((:r1 array_length)) '(:r13))
(errorcase
	(gotoif '(:r13 < 1) 'error)
	(gotoif '(:r13 > 2) 'error)
	(errorif-lisp-args-sig 'error :r1 :r13))

	(assign '((:r0 lisp_environment)) '(:r2))
	(vpif '(:r13 = 1))
		(array-bind-args :r1 '(:r1))
	(else)
		(array-bind-args :r1 '(:r1 :r3))
		(assign '(:r3) '((:r0 lisp_environment)))
	(endif)
	(vp-push :r2 :r1)
	(call 'lisp :repl_eval_list '(:r0 :r1) '(:r0 :r1))
	(vp-pop :r2 :r3)
	(assign '(:r2) '((:r0 lisp_environment)))
(errorcase
	(assign '((:r0 lisp_error) (:r1 obj_vtable)) '(:r4 :r5))
	(gotoif '(:r4 = :r5) 'exit))
	(class/obj/ref :r3 :r2)
	(class/obj/ref :r1 :r2 -1)
	(vp-cpy-rr :r3 :r1)

(vp-label 'exit)
	(exit 'lisp :lisp_eval_list '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(eval-list list [env])" +error_msg_wrong_types :r1))
	(signature '(list hmap)))

(def-func-end)
