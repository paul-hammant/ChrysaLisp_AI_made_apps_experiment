(include "lib/asm/func.inc")
(include "sys/load/class.inc")
(include "sys/str/class.inc")
(include "././sym/class.inc")
(include "././sstream/class.inc")
(include "././fixed/class.inc")
(include "./class.inc")
(include "lib/consts/chars.inc")

(def-method 'lisp :read_num)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = stream object (ptr)
	;:r2 = next char (uint)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = num object (ptr)
	;:r2 = next char (uint)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this stream)
		(pubyte bufp)
		(int char sign)
		(struct buffer 72))

	(vp-def (bufp base char num dot bufe))

	(vp-alloc local_size)
	(entry 'lisp :read_num `((:rsp local_this) (:rsp local_stream) ,char))
	(assign `(,char ,char) '((:rsp local_char) (:rsp local_sign)))

	(vpif `(,char = +char_minus))
		(call 'stream :read_char `((:rsp local_stream)) `(,base ,char))
		(breakif `(,char >= +char_0))
		(assign `((,base stream_bufp)) `(,bufp))
		(vp-sub-cr 1 bufp)
		(assign `(,bufp) `((,base stream_bufp)))
		(assign '((:rsp local_this)) `(,bufp))
		(vp-free local_size)
		(jump 'lisp :read_sym `(,bufp ,base +char_minus))
	(endif)

	(assign '((& :rsp local_buffer)) `(,bufp))
	(loop-start 'num_loop)
		(vpif `(,char >= +char_0))
			(gotoif `(,char <= +char_9) 'valid_digit)
		(endif)
		(vpif `(,char >= +char_a))
			(gotoif `(,char <= +char_z) 'valid_digit)
		(endif)
		(gotoif `(,char = +char_dot) 'valid_digit)
		(breakif `(,char < +char_A))
		(breakif `(,char > +char_Z))
	(vp-label 'valid_digit)
		(assign `(,char) `((,bufp 0 ub)))
		(vp-add-cr 1 bufp)
		(assign `(,bufp) '((:rsp local_bufp)))
		(call 'stream :read_char `((:rsp local_stream)) `(_ ,char))
		(assign `((:rsp local_bufp) (& :rsp ,(+ local_buffer 72))) `(,bufp ,bufe))
	(loop-until `(,bufp = ,bufe))
	(assign `(,char) `((:rsp local_char)))
	(vp-xor-rr char char)
	(assign `(,char) `((,bufp 0 ub)))

	;pick base
	(assign `((& :rsp ,(+ local_buffer 2))) `(,bufp))
	(assign `((,bufp -1 ub)) `(,base))
	(vp-or-cr (- (ascii-code "a") (ascii-code "A")) base)
	(vpif `(,base = +char_x))
		(vp-cpy-cr 16 base)
	(elseif `(,base = +char_o))
		(vp-cpy-cr 8 base)
	(elseif `(,base = +char_b))
		(vp-cpy-cr 2 base)
	(else)
		(vp-sub-cr 2 bufp)
		(vp-cpy-cr 10 base)
	(endif)

	;create the number
	(call 'sys_str :to_long `(,bufp ,base) `(:r0 ,dot))
	(assign '((:rsp local_sign)) `(,char))
	(vpif `(,char = +char_minus))
		(vp-mul-cr -1 :r0)
	(endif)
	(vpif `(,dot /= 0))
		;there was a fixed point
		(call 'fixed :create '(:r0) '(:r0))
	(else)
		;just parsed an int
		(call 'num :create '(:r0) '(:r0))
	(endif)
	(call 'num :intern '(:r0) '(:r0))

(vp-label 'exit)
	(exit 'lisp :read_num `((:rsp local_this) :r0 (:rsp local_char)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)
