(include "lib/asm/func.inc")
(include "./class.inc")
(include "././stream/class.inc")
(include "././sym/class.inc")
(include "lib/consts/chars.inc")

(def-method 'lisp :read_char)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = stream object (ptr)
	;:r2 = last char (uint)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = next char (uint)
	;trashes
	;:r1-:r14

	(entry 'lisp :read_char '(:r0 :r1 :r2))

	(vp-push :r0)
	(vpif '(:r2 = +char_lf))
		(assign '((:r0 lisp_stream_line)) '(:r2))
		(vp-add-cr 1 :r2)
		(assign '(:r2) '((:r0 lisp_stream_line)))
	(endif)
	(call 'stream :read_char '(:r1) '(_ :r1))
	(vp-pop :r0)

	(exit 'lisp :read_char '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'lisp :read)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = stream object (ptr)
	;:r2 = next char (uint)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = form object (ptr)
	;:r2 = next char (uint)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this stream list item)
		(int c) (uint start))

	(vp-def (this stream c item) '(:r0 :r1 :r2 :r1))

	(push-scope)
	(entry 'lisp :read {this, stream, c})

	(call 'list :create {} {list})
	(call 'array :get_length {this->lisp_stack} {_, start})

	(loop-start)
		;skip white space and comments
		(assign {this, stream, c} `(,this ,stream ,c))
		(loop-start)
			(loop-while `(,c <= +char_space) `(,c /= -1))
				(call 'lisp :read_char `(,this ,stream ,c) `(,this ,c))
				(assign {stream} `(,stream))
			(loop-end)
			(breakif `(,c /= +char_semi))
			(call 'skip_not `(,stream +char_lf) '(s))
			(call 'stream :read_char `(,s) `(,stream ,c))
			(assign {this} `(,this))
		(loop-end)
		(assign `(,c) {c})

		;what are we reading ?
		(switch)
		(vpcase `(,c = +char_lrb))
			(call 'lisp :read_char `(,this ,stream ,c) {_, c})
			(call 'array :push_back {this->lisp_stack, list})
			(call 'list :create {} {item})
			(call 'list :push_back {list, item})
			(assign {item} {list})
			(break)
		(vpcase `(,c = +char_rrb))
			(call 'lisp :read_char `(,this ,stream ,c) {_, c})
			(errorif {this->lisp_stack->array_length = start} 'error)
			(call 'array :pop_back {this->lisp_stack} {_, list})
			(break)
		(vpcase `(,c >= +char_0) `(,c <= +char_9))
			(call 'lisp :read_num `(,this ,stream ,c) `(_ ,item ,c))
			(goto 'push_item)
		(vpcase `(,c = +char_double_quote))
			(call 'lisp :read_str `(,this ,stream ,c) `(_ ,item ,c))
			(goto 'push_item)
		(vpcase `(,c = +char_lcb))
			(call 'lisp :read_str `(,this ,stream +char_rcb) `(_ ,item ,c))
			(goto 'push_item)
		(vpcase `(,c = +char_quote))
			(call 'lisp :read_quasi `(,this ,stream ,c (,this lisp_sym_quote)) `(_ ,item ,c))
			(goto 'push_item)
		(vpcase `(,c = +char_comma))
			(call 'lisp :read_quasi `(,this ,stream ,c (,this lisp_sym_unquote)) `(_ ,item ,c))
			(goto 'push_item)
		(vpcase `(,c = +char_tick))
			(call 'lisp :read_quasi `(,this ,stream ,c (,this lisp_sym_qquote)) `(_ ,item ,c))
			(goto 'push_item)
		(vpcase `(,c = +char_tilde))
			(call 'lisp :read_quasi `(,this ,stream ,c (,this lisp_sym_splicing)) `(_ ,item ,c))
			(goto 'push_item)
		(vpcase `(,c = +char_minus))
			(call 'lisp :read_num `(,this ,stream ,c) `(_ ,item ,c))
			(goto 'push_item)
		(vpcase `(,c = -1))
			(assign {start} {this->lisp_stack->array_length})
			(call 'sym :ref {this->lisp_sym_nil} {item})
			(goto 'push_item1)
		(default)
			(call 'lisp :read_sym `(,this ,stream ,c) `(_ ,item ,c))
		(vp-label 'push_item)
			(assign `(,item ,c) {item, c})
		(vp-label 'push_item1)
			(call 'list :push_back {list, item})
		(endswitch)

		;reached start point ?
	(loop-until {start = this->lisp_stack->array_length})

	(call 'list :pop_back {list} {_, item})
	(call 'list :deref {list})

	(exit 'lisp :read {this, item, c})
	(return)

(errorcase
(vp-label 'error)
	(call 'list :deref {list})
	(call 'lisp :repl_error {this, "unexpected )", 0, this->lisp_sym_nil} {_, item})
	(exit 'lisp :read {this, item, c})
	(return))

	(pop-scope-syms)

(vp-label 'skip_not)
	(assign '((:r0 stream_bufp) (:r0 stream_bufe)) '(:r2 :r3))
	(loop-start)
		(loop-while '(:r2 = :r3))
			(vp-push :r1)
			(assign '(:r2) '((:r0 stream_bufp)))
			(call 'stream :read_next '(:r0) '(:r0 :r4))
			(vp-pop :r1)
			(gotoif '(:r4 = -1) 'funcexit)
			(assign '((:r0 stream_bufp) (:r0 stream_bufe)) '(:r2 :r3))
		(loop-end)
		(vp-cpy-ir-ub :r2 0 :r4)
		(breakif '(:r4 = :r1))
		(vp-add-cr +byte_size :r2)
	(loop-end)
	(assign '(:r2) '((:r0 stream_bufp)))
(vp-label 'funcexit)
	(vp-ret)

(def-func-end)
