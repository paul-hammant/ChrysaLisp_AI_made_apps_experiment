(include "lib/asm/func.inc")
(include "././sym/class.inc")
(include "././func/class.inc")
(include "././hmap/class.inc")
(include "./class.inc")
(include "lib/consts/chars.inc")

(def-method 'lisp :repl_eval)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = form object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this form value func args))

	(vp-alloc local_size)
	(entry 'lisp :repl_eval '(:r0 :r1))

	;evaluate based on type
	(assign `((:r1 obj_vtable) (@ ,(f-path 'sym :vtable)) (@ ,(f-path 'list :vtable)))
		'(:r2 :r3 :r4))
	(switch)
	(vpcase '(:r2 = :r3))
		;eval to symbol binding ?
		(assign '((:r1 str_data ub)) '(:r2))
		(gotoif '(:r2 = +char_colon) 'toself)
		(assign '(:r0 :r1) '((:rsp local_this) (:rsp local_form)))
		(call 'hmap :get '((:r0 lisp_environment) :r1) '(_ :r1))
		(errorif '(:r1 = 0) 'error2)
		(assign '((:rsp local_this)) '(:r0))
		(break)
	(vpcase '(:r2 = :r4))
		;apply function, don't eval args if special form
	(errorcase
		(assign '((:r1 array_length)) '(:r2))
		(gotoif '(:r2 = 0) 'error1))
		(assign '(:r0 :r1) '((:rsp local_this) (:rsp local_form)))
		(array-bind-args :r1 '(:r1))
		(call 'lisp :repl_eval '(:r0 :r1) '(:r0 :r1))
		(assign '((:r1 obj_vtable)) '(:r2))
	(errorcase
		(assign '((:r0 lisp_error)) '(:r3))
		(breakif '(:r2 = :r3)))
		(assign '(:r1) '((:rsp local_func)))
		(f-bind 'func :vtable :r3)
		(vpif '(:r2 = :r3))
			;check if special form
			(assign '((:r1 num_value)) '(:r2))
			(vp-and-cr 7 :r2)
			(nextcaseif '(:r2 = 0))
			(call 'lisp :repl_apply '(:r0 (:rsp local_form) :r1) '(_ (:rsp local_value)))
		(else)
			(assign '((:rsp local_form)) '(:r0))
			(d-call 'list :slice '(:r0 1 (:r0 array_length)) '(_ (:rsp local_args)))
			(call 'lisp :repl_eval_list '((:rsp local_this) (:rsp local_args)) '(:r0 :r1))
		(errorcase
			(assign '((:r1 obj_vtable) (:r0 lisp_error)) '(:r2 :r3))
			(assign '(:r1) '((:rsp local_value)))
			(gotoif '(:r2 = :r3) 'error))
			(call 'obj :deref '(:r1))
			(call 'lisp :repl_apply '((:rsp local_this) (:rsp local_args) (:rsp local_func)) '(_ (:rsp local_value)))
		(vp-label 'error)
			(call 'obj :deref '((:rsp local_args)))
		(endif)
		(call 'obj :deref '((:rsp local_func)))
		(assign '((:rsp local_this) (:rsp local_value)) '(:r0 :r1))
	(else)
	(vp-label 'toself)
		;eval to self
		(class/obj/ref :r1 :r2)
	(endswitch)

	(exit 'lisp :repl_eval '(:r0 :r1))
	(vp-free local_size)
	(vp-ret)

(errorcase
(vp-label 'error1)
	(vp-free local_size)
	(jump 'lisp :repl_error '(:r0 "(eval form [env])" +error_msg_not_a_function :r1))
(vp-label 'error2)
	(assign '((:rsp local_this) (:rsp local_form)) '(:r0 :r3))
	(vp-free local_size)
	(jump 'lisp :repl_error '(:r0 "(eval form [env])" +error_msg_symbol_not_bound :r3)))

(def-func-end)

(def-method 'lisp :repl_eval_list)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this)
		(pptr iter_begin iter_end))

	(vp-alloc local_size)
	(entry 'lisp :repl_eval_list '(:r0 :r1))

	(assign '((:r1 array_begin) (:r1 array_length) (:r0 lisp_sym_nil)) '(:r3 :r2 :r1))
	(switch 'exit)
	(vpcase '(:r2 /= 0))
		(vp-shl-cr (log2 +long_size) :r2)
		(vp-add-rr :r3 :r2)
		(assign '(:r0 :r2) '((:rsp local_this) (:rsp local_iter_end)))
		(loop-start)
			(assign '(:r3) '((:rsp local_iter_begin)))
			(call 'lisp :repl_eval '(:r0 (:r3 0)) '(:r0 :r1))
		(errorcase
			(assign '((:r1 obj_vtable) (:r0 lisp_error)) '(:r3 :r2))
			(breakif '(:r2 = :r3) 'exit))
			(assign '((:rsp local_iter_begin)) '(:r3))
			(assign '((:r3 0) :r1) '(:r0 (:r3 0)))
			(call 'obj :deref '(:r0))
			(assign '((:rsp local_iter_begin) (:rsp local_iter_end) (:rsp local_this))
				'(:r3 :r2 :r0))
			(vp-add-cr +ptr_size :r3)
		(loop-until '(:r3 = :r2))
		(vp-cpy-ir :r3 (neg +ptr_size) :r1)
	(default)
		(class/obj/ref :r1 :r2)
	(endswitch)

	(exit 'lisp :repl_eval_list '(:r0 :r1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)
