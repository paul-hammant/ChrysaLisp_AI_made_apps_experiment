(include "lib/asm/func.inc")
(include "././str/class.inc")
(include "././nums/class.inc")
(include "././func/class.inc")
(include "./class.inc")

(def-method 'lisp :lisp_eql)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (this args obj1 obj2 vtable1 vtable2) '(:r8 :r9 :r10 :r11 :r13))

	(entry 'lisp :lisp_eql `(,this ,args))

(errorcase
	(assign `((,args array_length)) '(:r2))
	(gotoif '(:r2 /= 2) 'error))

	(switch)
	(array-bind-args args `(,obj1 ,obj2))
	(gotoif `(,obj1 = ,obj2) 'same)
	(assign `((,obj1 obj_vtable) (,obj2 obj_vtable)) `(,vtable1 ,vtable2))
	(breakif `(,vtable1 /= ,vtable2))
	(f-bind 'str :vtable vtable1)
	(vpcase `(,vtable1 = ,vtable2))
		(call 'str :same `(,obj1 ,obj2) '(_ tmp))
		(gotoif `(,tmp = 0) 'same)
		(break)
	(default)
		(call 'obj :inst_of `(,obj1 (@ ,(f-path 'num :vtable))) '(_ tmp))
		(nextcaseif `(,tmp = 0))
		(list-cast-args `(,obj1 ,obj2) '(:num :num))
		(gotoif `(,obj1 = ,obj2) 'same)
		(break)
	(default)
		(call 'obj :inst_of `(,obj1 (@ ,(f-path 'nums :vtable))) '(_ tmp))
		(nextcaseif `(,tmp = 0))
		(assign `((,obj1 array_length) (,obj2 array_length)) `(,vtable1 ,vtable2))
		(breakif `(,vtable1 /= ,vtable2))
		(call 'nums :eql `(,obj1 ,obj2) '(_ tmp))
		(gotoif `(,tmp = 0) 'same)
	(endswitch)

(vp-label 'notsame)
	(assign `((,this lisp_sym_nil)) '(:r1))
	(class/obj/ref :r1 :r2)
	(exit 'lisp :lisp_eql `(,this :r1))
	(vp-ret)

(vp-label 'same)
	(assign `((,this lisp_sym_t)) '(:r1))
	(class/obj/ref :r1 :r2)
	(exit 'lisp :lisp_eql `(,this :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error (list this "(eql form form)" +error_msg_wrong_num_of_args args)))

(def-func-end)
