(include "lib/asm/func.inc")
(include "././hmap/class.inc")
(include "././str/class.inc")
(include "./class.inc")

(def-method 'lisp :lisp_throw)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'lisp :lisp_throw '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 2)

	(defq in (method-input 'lisp :repl_error))
	(vp-xor-rr (third in) (third in))
	(list-bind-args :r1 in '(_ :str _ :obj))
	(jump 'lisp :repl_error in)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(throw str form)" +error_msg_wrong_types :r1))
	(signature '(str obj)))

(def-func-end)

(def-method 'lisp :lisp_catch)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this args value str_args str_value)
		(pptr iter_begin))
(errorcase
	(def-vars
		(uint length)))

	(push-scope)
	(entry 'lisp :lisp_catch {this, args})

(errorcase
	(d-call 'list :get_length {args} {_, length})
	(gotoif {length /= 3} 'error1))

	(call 'list :get_begin {args} {_, iter_begin})
	(call 'lisp :repl_eval {this, iter_begin[+ptr_size * 1]} {_, value})
	(vpif {value->obj_vtable = this->lisp_error})
		(call 'lisp :env_push {this})
		(call 'list :create :nil {str_args})
		(call 'obj :ref {value})
		(call 'list :push_back {str_args, value})
		(call 'str :lisp_str {this, str_args} {_, str_value})
		(call 'hmap :insert {this->lisp_environment, this->lisp_sym_underscore, str_value})
		(call 'obj :deref {str_args})
		(call 'obj :deref {str_value})
		(call 'lisp :repl_eval {this, iter_begin[+ptr_size * 2]} {_, args})
		(call 'lisp :env_pop {this})
		(vpif {args->obj_vtable = this->lisp_error || args /= this->lisp_sym_nil})
			(call 'obj :deref {value})
			(assign {args} {value})
		(else)
			(call 'obj :deref {args})
		(endif)
	(endif)

	(exit 'lisp :lisp_catch {this, value})
	(return)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error {this, "(catch form eform)", +error_msg_wrong_num_of_args, args}))

	(pop-scope-syms)

(def-func-end)
