(include "lib/asm/func.inc")
(include "././stream/class.inc")
(include "././str/class.inc")
(include "./class.inc")
(include "lib/consts/chars.inc")

(def-method 'lisp :lisp_prin)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this value)
		(union
			(ptr args)
			(pptr iter_begin iter_end)))

	(push-scope)
	(entry 'lisp :lisp_prin {this, args})

	(assign {this->lisp_sym_nil} {value})
	(call 'list :get_both {args} '(_ :r1 :r2))
	(assign '(:r2) {iter_end})
	(loop-while '(:r1 /= :r2))
		(vp-cpy-ir :r1 0 :r0)
		(assign '(:r1 :r0) {iter_begin, value})
		(assign '((:r0 obj_vtable)) '(:r1))
		(f-bind 'str :vtable :r2)
		(vpif '(:r1 = :r2))
			(call 'stream :write {this->lisp_stdout, &value->str_data, value->str_length})
		(else)
			(call 'lisp :repl_print {this, this->lisp_stdout, value})
		(endif)
		(assign {iter_begin, iter_end} '(:r1 :r2))
		(vp-add-cr +ptr_size :r1)
	(loop-end)
	(call 'obj :ref {value})

	(exit 'lisp :lisp_prin {this, value})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'lisp :lisp_print)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this args value))

	(push-scope)
	(entry 'lisp :lisp_print {this, args})

	(call 'lisp :lisp_prin {this, args} {_, value})
	(call 'stream :write_char {this->lisp_stdout, +char_lf})
	(vpifnot {args->array_length})
		(call 'stream :flush {this->lisp_stdout})
	(endif)

	(exit 'lisp :lisp_print {this, value})
	(pop-scope)
	(return)

(def-func-end)
