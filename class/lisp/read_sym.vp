(include "lib/asm/func.inc")
(include "sys/load/class.inc")
(include "././sym/class.inc")
(include "././sstream/class.inc")
(include "./class.inc")
(include "lib/consts/chars.inc")

(def-method 'lisp :read_sym)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = stream object (ptr)
	;:r2 = next char (uint)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;:r2 = next char (uint)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this stream str_stream value)
		(int char))

	(push-scope)
	(entry 'lisp :read_sym {this, stream, char})

	(switch)
		(vp-def (buf bufp bufe stm c))
		(assign {stream, char} `(,stm ,c))
		(assign `((,stm stream_bufp) (,stm stream_bufe)) `(,bufp ,bufe))
		(assign `(,bufp) `(,buf))
		(loop-while (list c '> +char_space) (list c '/= +char_lrb) (list c '/= +char_rrb))
			(gotoif `(,bufp = ,bufe) 'slow_but_sure)
			(assign `((,bufp 0 ub)) `(,c))
			(vp-add-cr +byte_size bufp)
		(loop-end)
		(assign `(,c) {char})
		(assign `(,bufp) `((,stm stream_bufp)))
		(vp-sub-rr buf bufp)
		(vp-sub-cr +byte_size buf)
		(call 'str :create_from_buffer `(,buf ,bufp) {value})
	(else)
	(vp-label 'slow_but_sure)
		(call 'sym :create_from_buffer {0, str_gap} {value})
		(call 'sstream :create {value} {str_stream})
		(loop-whilenot {char <= +char_space || char = +char_lrb || char = +char_rrb})
			(call 'stream :write_char {str_stream, char})
			(call 'stream :read_char {stream} {_, char})
		(loop-end)
		(call 'sstream :ref_string {str_stream} '(str_stream value))
		(assign `(,value) {value})
		(call 'sstream :destroy `(,str_stream))
	(endswitch)
	(call 'sym :intern {value} {value})

	(exit 'lisp :read_sym {this, value, char})
	(pop-scope)
	(return)

(def-func-end)
