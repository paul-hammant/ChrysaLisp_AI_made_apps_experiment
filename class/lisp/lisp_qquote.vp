(include "lib/asm/func.inc")
(include "./class.inc")
(include "././func/class.inc")

(def-method 'lisp :lisp_qquote)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'lisp :lisp_qquote '(:r0 :r1))

	(errorif-lisp-args-len :r1 /= 2 'error)

	(vp-push :r0 :r1)
	(class/obj/ref :r1 :r2)
	(call 'expand '(:r0 (& :rsp 0) 0 0))
	(call 'list :pop_back '((:rsp 0)) '(:r0 (:rsp 0)))
	(call 'obj :deref '(:r0))
	(vp-pop :r0 :r1)

	(exit 'lisp :lisp_qquote '(:r0 :r1))
	(vp-ret)

(vp-label 'expand)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = iter pointer (pptr)
	;:r2 = qcnt (uint)
	;:r3 = ucnt (uint)

	(def-struct local 0
		(ptr this list)
		(pptr iter iter_begin iter_end)
		(uint qcnt ucnt))

	(entry '(:r0 :r1 :r2 :r3))

	(vp-alloc local_size)
	(assign '((:r1 0) :r0 :r1 :r2 :r3) '(:r4 (:rsp local_this) (:rsp local_iter) (:rsp local_qcnt) (:rsp local_ucnt)))
	(class/array/get_both :r4 :r1 :r2)
	(assign '(:r1 :r2) '((:rsp local_iter_begin) (:rsp local_iter_end)))
	(call 'list :create :nil '(:r0))
	(call 'list :set_cap '(:r0 (:r4 array_length)) '((:rsp local_list)))
	(loop-start 'next_elem)
		(assign '((:rsp local_iter_begin) (:rsp local_iter_end)) '(:r2 :r3))
		(breakif '(:r2 = :r3))
		(vp-cpy-ir :r2 0 :r1)
		(vp-add-cr +ptr_size :r2)
		(assign '(:r2) '((:rsp local_iter_begin)))

		;do we eval this element ?
		(f-bind 'list :vtable :r2)
		(assign '((:r1 obj_vtable)) '(:r3))
		(gotoif '(:r2 /= :r3) 'push_elem_ref)
		(assign '((:r1 array_length) (:rsp local_qcnt) (:rsp local_ucnt)) '(:r2 :r6 :r7))
		(gotoif '(:r2 /= 2) 'push_list_copy)
		(assign '((:rsp local_this)) '(:r0))
		(array-bind-args :r1 '(:r2 :r3))
		(switch)
			(assign '((:r0 lisp_sym_unquote)) '(:r4))
			(nextcaseif '(:r2 /= :r4))
			(vpif '(:r7 = :r6))
				(call 'lisp :repl_eval '(:r0 :r3) '(_ :r1))
				(goto 'push_elem)
			(endif)
			(vp-add-cr 1 :r7)
		(else)
			(assign '((:r0 lisp_sym_splicing)) '(:r4))
			(nextcaseif '(:r2 /= :r4))
			(vpif '(:r7 = :r6))
				(call 'lisp :repl_eval '(:r0 :r3) '(_ :r1))
				(f-bind 'list :vtable :r2)
				(assign '((:r1 obj_vtable)) '(:r3))
				(gotoif '(:r2 /= :r3) 'push_elem)
				(vp-cpy-rr :r1 :r10)
				(call 'list :append '((:rsp local_list) :r1 0 (:r1 array_length)))
				(call 'obj :deref '(:r10))
				(continue 'next_elem)
			(endif)
			(vp-add-cr 1 :r7)
		(else)
			(f-bind 'func :vtable :r4)
			(assign '((:r2 obj_vtable)) '(:r3))
			(nextcaseif '(:r3 /= :r4))
			(assign '((:r2 num_value) ($ fn_entry)) '(:r3 :r4))
			(vp-and-cr (neg +ptr_size) :r3)
			(nextcaseif '(:r3 /= :r4))
			(vp-add-cr 1 :r6)
		(else)
			(assign '((:r0 lisp_sym_qquote)) '(:r4))
			(nextcaseif '(:r2 /= :r4))
			(vp-add-cr 1 :r6)
		(endswitch)
	(vp-label 'push_list_copy)
		(class/obj/ref :r1 :r2)
		(call 'list :push_back '((:rsp local_list) :r1) '(_ _ _ :r3))
		(call 'expand '((:rsp local_this) (& :r3 (neg +ptr_size)) :r6 :r7))
		(continue 'next_elem)
	(vp-label 'push_elem_ref)
		(class/obj/ref :r1 :r2)
	(vp-label 'push_elem)
		(call 'list :push_back '((:rsp local_list) :r1))
	(loop-end)

	;swap new list with old
	(assign '((:rsp local_iter) (:rsp local_list)) '(:r1 :r2))
	(assign '((:r1 0) :r2) '(:r0 (:r1 0)))
	(call 'obj :deref '(:r0))
	(vp-free local_size)
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(quasi-quote form)" +error_msg_wrong_num_of_args :r1)))

(def-func-end)
