(include "lib/asm/func.inc")
(include "././hmap/class.inc")
(include "././sym/class.inc")
(include "./class.inc")

(def-method 'lisp :env_push)
	;inputs
	;:r0 = lisp object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = hmap object (ptr)
	;trashes
	;:r1-:r14

	(entry 'lisp :env_push '(:r0))

	(vp-push :r0)
	(assign '((:r0 lisp_environment)) '(:r0))
	(call 'hmap :create '((:r0 hset_key_callback) 1) '(:r0))
	(assign '((:rsp 0)) '(:r1))
	(call 'hmap :set_parent '(:r0 (:r1 lisp_environment)) '(:r1))
	(vp-pop :r0)
	(assign '(:r1) '((:r0 lisp_environment)))

	(exit 'lisp :env_push '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'lisp :env_pop)
	;inputs
	;:r0 = lisp object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = hmap object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this new_env))

	(vp-alloc local_size)
	(entry 'lisp :env_pop '(:r0))

	(assign '(:r0 (:r0 lisp_environment)) '((:rsp local_this) :r0))
	(assign '((:r0 hmap_parent)) '(:r1))
	(assign '(:r1) '((:rsp local_new_env)))
	(class/obj/ref :r1 :r2)
	(call 'obj :deref '(:r0))
	(assign '((:rsp local_this) (:rsp local_new_env)) '(:r0 :r1))
	(assign '(:r1) '((:r0 lisp_environment)))

	(exit 'lisp :env_pop '(:r0 :r1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'lisp :env_bind)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = vars list object (ptr)
	;:r2 = vals seq object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this vars vals symbol value args)
		(uint index_vars index_vals len_vars len_vals state))

	(enums +state 0
		(enum normal optional rest ignore most))

	(push-scope)
	(entry 'lisp :env_bind {this, vars, vals})

(errorcase
	(gotoif (cat {vars->obj_vtable /= @} (f-path 'list :vtable)) 'error1)
	(call 'obj :inst_of (cat {vals, @} (f-path 'seq :vtable)) '(_ tmp))
	(gotoif `(,tmp = 0) 'error2))

	(assign {+state_normal => index_vars => index_vals} {state})
	(call 'obj :ref {this->lisp_sym_nil} {value})
	(d-call 'list :get_length {vars} {_, len_vars})
	(call 'seq :get_length {vals} {_, len_vals})
	(loop-start)
		(vp-def (this vars state symbol index_vars len_vars optn rst ign mst))
		(assign {index_vars, len_vars} (list index_vars len_vars))
		(breakif `(,index_vars = ,len_vars))

		;next symbol and state
		(assign {this, vars, state} `(,this ,vars ,state))
		(assign `(,index_vars (,this lisp_sym_optional) (,this lisp_sym_rest)
					(,this lisp_sym_ignore) (,this lisp_sym_most))
			`(,symbol ,optn ,rst ,ign ,mst))
		(class/array/get_elem vars symbol symbol this)
		(switch)
		(vpcase `(,symbol = ,optn))
			(assign `(,+state_optional) `(,state))
			(goto 'moveon)
		(vpcase `(,symbol = ,rst))
			(assign `(,+state_rest) `(,state))
			(goto 'moveon)
		(vpcase `(,symbol = ,ign))
			(goto 'funcexit)
		(vpcase `(,symbol = ,mst))
			(assign `(,+state_most) `(,state))
		(vp-label 'moveon)
			(vp-add-cr 1 index_vars)
		(endswitch)
		(breakif `(,index_vars = ,len_vars))
		(assign `(,index_vars ,state) {index_vars, state})

		(call 'obj :deref {value})
		(call 'list :get_elem {vars, index_vars} {_, symbol})
		(vpif (cat {symbol->obj_vtable = @} (f-path 'sym :vtable)))
			;standard symbol
			(vp-def (vals index_vals len_vals value index_vars len_vars state))
			(assign {vals, index_vals, len_vals, state} (list vals index_vals len_vals state))
			(vpif `(,state = ,+state_optional))
				;optional
				(gotoif `(,index_vals /= ,len_vals) 'normal)
				(call 'obj :ref {this->lisp_sym_nil} (list value))
				(assign {index_vals} (list index_vals))
			(elseif `(,state = ,+state_rest))
				;rest
				(call 'seq :slice (list vals index_vals len_vals) (list '_ value))
				(assign {len_vals} (list index_vals))
			(elseif `(,state = ,+state_most))
				;most
				(vp-sub-cr 1 len_vals)
				(vpif `(,index_vals < ,len_vals))
					(call 'seq :slice (list vals index_vals len_vals) (list '_ value))
					(assign {len_vals - 1} (list index_vals))
				(else)
					(call 'seq :slice (list vals 0 0) (list '_ value))
					(assign {index_vals} (list index_vals))
				(endif)
				(assign {+state_normal} {state})
			(else)
				;normal
				(errorif `(,index_vals = ,len_vals) 'error)
			(vp-label 'normal)
				(call 'seq :ref_elem (list vals index_vals) (list '_ value))
				(assign {index_vals + 1} (list index_vals))
			(endif)
			(assign {index_vars} (list index_vars))
			(vp-add-cr 1 index_vars)
			(assign (list index_vars index_vals value) {index_vars, index_vals, value})
			(call 'hmap :insert {this->lisp_environment, symbol, value})
		(else)
			;destructureing ?
			(errorif (cat {symbol->obj_vtable /= @} (f-path 'list :vtable)) 'error1)
			(errorif {index_vals = len_vals} 'error)
			(call 'seq :ref_elem {vals, index_vals} {_, args})
			(assign {index_vars + 1, index_vals + 1} {index_vars, index_vals})
			(call 'lisp :env_bind {this, symbol, args} {_, value})
			(call 'obj :deref {args})
			(errorif (cat {value->obj_vtable = @} (f-path 'error :vtable)) 'funcexit)
		(endif)
	(loop-end)
	(errorif {index_vals /= len_vals} 'error4)

(vp-label 'funcexit)
	(exit 'lisp :env_bind {this, value})
	(return)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error {this, "(bind (param ...) seq)", +error_msg_not_a_list, vars})
(vp-label 'error2)
	(jump 'lisp :repl_error {this, "(bind (param ...) seq)", +error_msg_not_a_sequence, vals})
(vp-label 'error3)
	(jump 'lisp :repl_error {this, "(bind (param ...) seq)", +error_msg_not_a_symbol, symbol})
(vp-label 'error4)
	(call 'obj :deref {value})
(vp-label 'error)
	(call 'list :create :nil {value})
	(call 'obj :ref {vars})
	(call 'obj :ref {vals})
	(call 'list :push_back2 {value, vars, vals})
	(jump 'lisp :repl_error {this, "(bind (param ...) seq)", +error_msg_wrong_num_of_args, value}))

	(pop-scope-syms)

(def-func-end)
