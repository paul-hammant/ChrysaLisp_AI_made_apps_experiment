(include "lib/asm/func.inc")
(include "././stream/class.inc")
(include "././hmap/class.inc")
(include "././num/class.inc")
(include "./class.inc")
(include "././sym/class.inc")
(include "lib/consts/chars.inc")

(def-method 'lisp :lisp_repl)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this args stream ast value old_name)
		(int char)
		(uint length old_line))

	(push-scope)
	(entry 'lisp :lisp_repl {this, args})

	(d-call 'list :get_length {args} {_, length})
	(errorif {length /= 2} 'error1)
	(call 'list :get_first {args} {_, stream})

(errorcase
	(call 'obj :inst_of (cat {stream, @} (f-path 'stream :vtable)) '(_ tmp))
	(gotoif `(,tmp = 0) 'error2))

	(call 'list :get_second {args} {_, value})
(errorcase
	(call 'obj :inst_of (cat {value, @} (f-path 'str :vtable)) '(_ tmp))
	(gotoif `(,tmp = 0) 'error3))

	;push old repl info
	;we have refs to the name (from the args), so we DON'T need to manage our use here !
	(assign {this->lisp_stream_name, this->lisp_stream_line} {old_name, old_line})
	(assign {value, 1} {this->lisp_stream_name, this->lisp_stream_line})

	(call 'obj :ref {this->lisp_sym_nil} {value})
	(call 'stream :read_char {stream} {_, char})
	(loop-while {char /= -1})
		(call 'stream :flush {this->lisp_stdout})
		(call 'stream :flush {this->lisp_stderr})
		(call 'lisp :read {this, stream, char} {_, ast, char})
		(call 'lisp :repl_expand {this, &ast})
		(call 'lisp :repl_bind {this, ast})
		(call 'obj :deref {value})
		(call 'lisp :repl_eval {this, ast} {_, value})
		(call 'obj :deref {ast})
		(vpif {stream = this->lisp_stdin})
			(call 'lisp :repl_print {this, this->lisp_stdout, value})
			(call 'stream :write_char {this->lisp_stdout, +char_lf})
		(endif)
	(errorcase
		(breakif {value->obj_vtable = this->lisp_error}))
	(loop-end)

	;pop old repl info
	(assign {old_name, old_line} {this->lisp_stream_name, this->lisp_stream_line})

	(exit 'lisp :lisp_repl {this, value})
	(return)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error {this, "(repl stream path)", +error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp :repl_error {this, "(repl stream path)", +error_msg_not_a_stream, args})
(vp-label 'error3)
	(jump 'lisp :repl_error {this, "(repl stream path)", +error_msg_not_a_string, args}))

	(pop-scope-syms)

(def-func-end)

(def-method 'lisp :lisp_repl_info)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'lisp :lisp_repl_info '(:r0 :r1))

	(vp-cpy-rr :r0 :r13)
	(call 'obj :ref '((:r0 lisp_stream_name)) '(:r11))
	(call 'num :create '((:r13 lisp_stream_line)) '(:r12))
	(call 'list :create :nil '(:r0))
	(call 'list :push_back2 '(:r0 :r11 :r12) '(:r1 _ _ _ _))

	(exit 'lisp :lisp_repl_info '(:r13 :r1))
	(vp-ret)

(def-func-end)
