(include "lib/asm/func.inc")
(include "sys/load/class.inc")
(include "././func/class.inc")
(include "././sym/class.inc")
(include "././hmap/class.inc")
(include "./class.inc")

(def-method 'lisp :lisp_ffi)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this value args)
		(pptr iter_begin fptr))

	(push-scope)
	(entry 'lisp :lisp_ffi {this, args})

	(errorif-lisp-args-sig 'error :r1 2 4)

	(call 'list :get_begin {args} {_, iter_begin})
	(call 'sys_load :bind {&iter_begin[+ptr_size * 1]->str_data} {fptr})
	(errorifnot {fptr} 'error)
	(assign {0} {value})
	(vpif {args->array_length = 4})
		(assign {iter_begin[+ptr_size * 3]->num_value} {value})
	(endif)
	(call 'func :create {value | fptr} {fptr})
	(vpif {args->array_length >= 3})
		(call 'hmap :insert {this->lisp_environment, iter_begin[+ptr_size * 2], fptr})
	(endif)

	(exit 'lisp :lisp_ffi {this, fptr})
	(return)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error {this, "(ffi path [sym flags])", +error_msg_wrong_types, args})
	(signature '(obj str sym num)))

	(pop-scope-syms)

(def-func-end)
