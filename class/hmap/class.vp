(include "lib/asm/func.inc")
(include "././list/class.inc")
(include "./class.inc")
(include "././sym/class.inc")
(include "lib/consts/chars.inc")

(gen-create 'hmap)
(gen-vtable 'hmap)
(gen-type 'hmap)

(def-method 'hmap :init)
	;inputs
	;:r0 = hmap object (ptr)
	;:r1 = vtable (pptr)
	;:r2 = 0, else key compare callback (ptr)
	;:r3 = num buckets (uint)
	;outputs
	;:r0 = hmap object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r7

	(entry 'hmap :init '(:r0 :r1 :r2 :r3))

	(vp-xor-rr :r4 :r4)
	(assign '(:r4) '((:r0 hmap_parent)))
	(s-jump 'hmap :init '(:r0 :r1 :r2 :r3))

(def-func-end)

(def-method 'hmap :deinit)
	;inputs
	;:r0 = hmap object (ptr)
	;outputs
	;:r0 = hmap object (ptr)
	;trashes
	;:r1-:r14

	(entry 'hmap :deinit '(:r0))

	(vp-push :r0)
	(call 'hmap :deref_if '((:r0 hmap_parent)))
	(vp-pop :r0)
	(s-jump 'hmap :deinit '(:r0))

(def-func-end)

(def-method 'hmap :set_parent)
	;inputs
	;:r0 = hmap object (ptr)
	;:r1 = 0, else hmap parent object (ptr)
	;outputs
	;:r0 = hmap object (ptr)
	;trashes
	;:r1-:r14

	(entry 'hmap :set_parent '(:r0 :r1))

	(vp-push :r0)
	(assign '((:r0 hmap_parent)) '(:r2))
	(assign '(:r1) '((:r0 hmap_parent)))
	(call 'hmap :deref_if '(:r2))
	(vp-pop :r0)

	(exit 'hmap :set_parent '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'hmap :copy)
	;inputs
	;:r0 = hmap object (ptr)
	;:r1 = num buckets (uint)
	;outputs
	;:r0 = hmap object (ptr)
	;:r1 = hmap copy object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		;obj must be first
		(ptr obj this))

	;save inputs
	(vp-alloc local_size)
	(entry 'hmap :copy '(:r0 :r1))
	(assign '(:r0) '((:rsp local_this)))

	(call 'hmap :create '((:r0 hset_key_callback) :r1) '((:rsp local_obj)))
	(assign '((:rsp local_this)) '(:r0))
	(assign '((:r0 hmap_parent)) '(:r0))
	(call 'hmap :ref_if '(:r0) '(:r0))
	(call 'hmap :set_parent '((:rsp local_obj) :r0) '(:r0))
	(call 'hmap :each '((:rsp local_this) ($ callback) :r0) '(:r0))

	(exit 'hmap :copy '(:r0 (:rsp local_obj)))
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;:r0 = predicate data (ptr)
	;:r1 = element iterator (ptr)
	;:r2 = bucket list pointer (ptr)

	(entry 'hmap :each_callback '(:r0 :r1 :r2))

	(assign '((:r1 0) (:r1 +ptr_size)) '(:r1 :r2))
	(class/obj/ref :r1 :r3)
	(class/obj/ref :r2 :r3)
	(vp-push :r1 :r2)
	(call 'hmap :bucket '(:r0 :r1) '(_ :r0))
	(vp-pop :r1 :r2)
	(jump 'list :push_back2 '(:r0 :r1 :r2))

(def-func-end)

(def-method 'hmap :list)
	;inputs
	;:r0 = hmap object (ptr)
	;outputs
	;:r0 = hmap object (ptr)
	;:r1 = list object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr obj this))

	;save inputs
	(vp-alloc local_size)
	(entry 'hmap :list '((:rsp local_this)))

	(call 'list :create :nil '(:r0))
	(assign '(:r0) '((:rsp local_obj)))
	(call 'hmap :each '((:rsp local_this) ($ callback) :r0) '(:r0))

	(exit 'hmap :list '(:r0 (:rsp local_obj)))
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;:r0 = predicate data (ptr)
	;:r1 = element iterator (ptr)
	;:r2 = bucket list pointer (ptr)

	(entry 'hset :each_callback '(:r0 :r1 :r2))

	(assign '(:r0 (:r1 0) (:r1 +ptr_size)) '(:r6 :r7 :r8))
	(call 'list :create :nil '(:r0))
	(class/obj/ref :r7 :r1)
	(class/obj/ref :r8 :r1)
	(call 'list :push_back2 '(:r0 :r7 :r8) '(:r1 _ _ _ _))
	(jump 'list :push_back '(:r6 :r1))

(def-func-end)

(def-method 'hmap :find)
	;inputs
	;:r0 = hmap object (ptr)
	;:r1 = key str object (ptr)
	;outputs
	;:r0 = hmap object (ptr)
	;:r1 = 0, else found iterator (pptr)
	;:r2 = bucket list (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this key bucket)
		(pptr iter_begin iter_end))

	;save inputs
	(vp-alloc local_size)
	(entry 'hmap :find '(:r0 :r1))

	(assign '((:r0 hset_key_callback) :r1) '(:r2 (:rsp local_key)))
	(vpif '(:r2 = 0))
		;search hash bucket
		(call 'hmap :bucket '(:r0 :r1) '(:r0 :r2))
		(class/array/get_both :r2 :r5 :r3)
		(breakif '(:r5 = :r3))
		;test last known slot
		(assign '((:rsp local_key) :r5) '(:r4 :r1))
		(assign '((:r4 str_hashslot)) '(:r6))
		(vp-sub-rr :r6 :r1)
		(vpif '(:r1 < :r3))
			(assign '((:r1 0)) '(:r6))
			(gotoif '(:r4 = :r6) 'exit2)
		(endif)
		;a miss, so scan the bucket
		(vp-cpy-rr :r5 :r1)
		(loop-start)
			(assign '((:r1 0)) '(:r6))
			(vp-add-cr (* +ptr_size 2) :r1)
			(gotoif '(:r4 = :r6) 'exit1)
		(loop-until '(:r1 = :r3))
	(else)
		;search hash bucket
		(call 'hmap :bucket '(:r0 :r1) '(:r0 :r1))
		(assign '(:r0 :r1) '((:rsp local_this) (:rsp local_bucket)))
		(class/array/get_both :r1 :r1 :r2)
		(assign '(:r2) '((:rsp local_iter_end)))
		(loop-while '(:r1 /= :r2))
			(assign '(:r1) '((:rsp local_iter_begin)))
			(assign '((:rsp local_this) (:rsp local_key)) '(:r2 :r0))
			(assign '((:r1 0)) '(:r1))
			(vp-call-i :r2 hset_key_callback)
			(vpif '(:r1 = 0))
				(assign '((:rsp local_this) (:rsp local_iter_begin) (:rsp local_bucket)) '(:r0 :r1 :r2))
				(goto 'exit2)
			(endif)
			(assign '((:rsp local_iter_begin) (:rsp local_iter_end)) '(:r1 :r2))
			(vp-add-cr (* +ptr_size 2) :r1)
		(loop-end)
		(assign '((:rsp local_this) (:rsp local_bucket)) '(:r0 :r2))
	(endif)
	(vp-xor-rr :r1 :r1)

(vp-label 'exit2)
	(exit 'hmap :find '(:r0 :r1 :r2))
	(vp-free local_size)
	(vp-ret)

(vp-label 'exit1)
	(vp-sub-cr (* +ptr_size 2) :r1)
	(vp-sub-rr :r1 :r5)
	(assign '(:r5) '((:r4 str_hashslot)))
	(exit 'hmap :find '(:r0 :r1 :r2))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hmap :insert)
	;inputs
	;:r0 = hmap object (ptr)
	;:r1 = key str object (ptr)
	;:r2 = value object (ptr)
	;outputs
	;:r0 = hmap object (ptr)
	;:r1 = iterator (pptr)
	;:r2 = bucket list (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this key value iter bucket))

	;save inputs
	(vp-alloc local_size)
	(entry 'hmap :insert '(:r0 :r1 (:rsp local_value)))
	(assign '(:r0 :r1) '((:rsp local_this) (:rsp local_key)))

	;search hash bucket
	(call 'hmap :find '(:r0 :r1) '(_ :r1 :r2))
	(assign '(:r2) '((:rsp local_bucket)))
	(vpif '(:r1 = 0))
		;new key, (key could be same as value !)
		(assign '((:rsp local_key) (:rsp local_value)) '(:r1 :r2))
		(class/obj/ref :r1 :r0)
		(class/obj/ref :r2 :r0)
		(call 'list :push_back2 '((:rsp local_bucket) :r1 :r2) '(:r0 :r1 _ :r3 :r4))
		;initial known slot
		(vp-sub-cr (* +ptr_size 2) :r4)
		(vp-sub-rr :r4 :r3)
		(assign '(:r3 :r4 :r0) '((:r1 str_hashslot) :r1 :r2))
	(else)
		;old key
		(assign '((:rsp local_value) (:r1 +ptr_size) :r1) '(:r2 :r0 (:rsp local_iter)))
		(assign '(:r2) '((:r1 +ptr_size)))
		(class/obj/ref :r2 :r3)
		(call 'obj :deref '(:r0))
		(assign '((:rsp local_iter) (:rsp local_bucket)) '(:r1 :r2))
	(endif)

	(exit 'hmap :insert '((:rsp local_this) :r1 :r2))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hmap :search)
	;inputs
	;:r0 = hmap object (ptr)
	;:r1 = key str object (ptr)
	;outputs
	;:r0 = hmap object (ptr)
	;:r1 = 0, else iterator (pptr)
	;:r2 = bucket list (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this key))

	(vp-alloc local_size)
	(entry 'hmap :search '(:r0 :r1))

	(assign '(:r0 :r1) '((:rsp local_this) (:rsp local_key)))
	(loop-start)
		(call 'hmap :find '(:r0 :r1) '(:r0 :r1 :r2))
		(breakif '(:r1 /= 0))
		(assign '((:r0 hmap_parent)) '(:r1))
		(breakif '(:r1 = 0))
		(assign '(:r1 (:rsp local_key)) '(:r0 :r1))
	(loop-end)

	(exit 'hmap :search '((:rsp local_this) :r1 :r2))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hmap :set)
	;inputs
	;:r0 = hmap object (ptr)
	;:r1 = key str object (ptr)
	;:r2 = value object (ptr)
	;outputs
	;:r0 = hmap object (ptr)
	;:r1 = 0 if not found, else value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this value))

	(vp-alloc local_size)
	(entry 'hmap :set '(:r0 :r1 (:rsp local_value)))

	(call 'hmap :search '(:r0 :r1) '(:r0 :r1 _))
	(vpif '(:r1 /= 0))
		(assign '((:rsp local_value) (:r1 +ptr_size)) '(:r2 :r0))
		(assign '(:r2) '((:r1 +ptr_size)))
		(class/obj/ref :r2 :r3)
		(call 'obj :deref '(:r0))
		(assign '((:rsp local_this) (:rsp local_value)) '(:r0 :r1))
	(endif)

	(exit 'hmap :set '(:r0 :r1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hmap :get)
	;inputs
	;:r0 = hmap object (ptr)
	;:r1 = key str object (ptr)
	;outputs
	;:r0 = hmap object (ptr)
	;:r1 = 0 if not found, else value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'hmap :get '(:r0 :r1))

	(call 'hmap :search '(:r0 :r1) '(:r0 :r1 _))
	(vpif '(:r1 /= 0))
		(assign '((:r1 +ptr_size)) '(:r1))
		(class/obj/ref :r1 :r2)
	(endif)

	(exit 'hmap :get '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'hmap :each)
	;inputs
	;:r0 = hmap object (ptr)
	;:r1 = predicate function (ptr)
	;:r2 = predicate data (ptr)
	;outputs
	;:r0 = hmap object (ptr)
	;trashes
	;:r1-:r4...
		;callback predicate
		;inputs
		;:r0 = predicate data (ptr)
		;:r1 = element iterator (pptr)
		;trashes
		;...

	(def-struct local 0
		(ptr this predicate predicate_data bucket)
		(pptr iter_begin iter_end iter_begin1 iter_end1))

	;save inputs
	(vp-alloc local_size)
	(entry 'hmap :each '(:r0 (:rsp local_predicate) (:rsp local_predicate_data)))
	(assign '(:r0) '((:rsp local_this)))

	;for all buckets
	(assign '((:r0 hset_num_buckets) (:r0 hset_buckets)) '(:r1 :r2))
	(vpif '(:r1 = 1))
		(class/array/get_both :r2 :r1 :r0)
		(assign '(:r2) '((:rsp local_bucket)))
	(vp-label 'erased)
		(assign '(:r0) '((:rsp local_iter_end)))
		(loop-while '(:r1 < :r0))
			(assign '((:rsp local_predicate_data) :r1) '(:r0 (:rsp local_iter_begin)))
			(vp-call-i :rsp local_predicate)
			(assign '((:rsp local_bucket) (:rsp local_iter_begin) (:rsp local_iter_end)) '(:r2 :r1 :r4))
			(class/array/get_end :r2 :r0 :r3)
			(gotoif '(:r0 /= :r4) 'erased)
			(vp-add-cr (* +ptr_size 2) :r1)
		(loop-end)
	(else)
		(class/array/get_both :r2 :r1 :r0)
		(assign '(:r0) '((:rsp local_iter_end1)))
		(loop-start)
			(assign '((:r1 0) :r1) '(:r2 (:rsp local_iter_begin1)))
			(class/array/get_both :r2 :r1 :r0)
			(assign '(:r2) '((:rsp local_bucket)))
		(vp-label 'erased1)
			(assign '(:r0) '((:rsp local_iter_end)))
			(loop-while '(:r1 < :r0))
				(assign '((:rsp local_predicate_data) :r1) '(:r0 (:rsp local_iter_begin)))
				(vp-call-i :rsp local_predicate)
				(assign '((:rsp local_bucket) (:rsp local_iter_begin) (:rsp local_iter_end)) '(:r2 :r1 :r4))
				(class/array/get_end :r2 :r0 :r3)
				(gotoif '(:r0 /= :r4) 'erased1)
				(vp-add-cr (* +ptr_size 2) :r1)
			(loop-end)
			(assign '((:rsp local_iter_begin1) (:rsp local_iter_end1)) '(:r1 :r2))
			(vp-add-cr +ptr_size :r1)
		(loop-until '(:r1 = :r2))
	(endif)

	(exit 'hmap :each '((:rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hmap :resize)
	;inputs
	;:r0 = hmap object (ptr)
	;:r1 = num buckets (uint)
	;outputs
	;:r0 = hmap object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this that))

	(vp-alloc local_size)
	(entry 'hmap :resize '(:r0 :r1))

	(call 'hmap :copy '(:r0 :r1) '(:r0 :r1))
	(assign '(:r0 :r1) '((:rsp local_this) (:rsp local_that)))
	(assign '((:r1 hset_num_buckets) (:r1 hset_buckets) (:r0 hset_buckets)) '(:r2 :r3 :r4))
	(assign '(:r2 :r3) '((:r0 hset_num_buckets) (:r0 hset_buckets)))
	(class/obj/ref :r3 :r0)
	(call 'list :deref '(:r4))
	(call 'hmap :deref '((:rsp local_that)))

	(exit 'hmap :resize '((:rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)
