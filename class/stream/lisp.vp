(include "lib/asm/func.inc")
(include "sys/str/class.inc")
(include "././str/class.inc")
(include "./class.inc")
(include "././sstream/class.inc")
(include "././fstream/class.inc")
(include "././stdio/class.inc")
(include "././num/class.inc")
(include "././lisp/class.inc")

(def-method 'stream :lisp_iostream)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'stream :lisp_iostream '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(vp-cpy-rr :r0 :r8)
	(list-bind-args :r1 '(:r5) '(:str))
	(switch 'exit)
		(switch)
		(call 'sys_str :compare '(:r5 "stdin") '(:r0))
		(assign '((:r8 lisp_stdin)) '(:r1))
		(breakif '(:r0 = 0))
		(call 'sys_str :compare '(:r5 "stdout") '(:r0))
		(assign '((:r8 lisp_stdout)) '(:r1))
		(breakif '(:r0 = 0))
		(call 'sys_str :compare '(:r5 "stderr") '(:r0))
		(assign '((:r8 lisp_stderr)) '(:r1))
		(breakif '(:r0 = 0))
		(assign '((:r8 lisp_sym_nil)) '(:r1))
		(endswitch)
		(class/obj/ref :r1 :r2)
	(endswitch)

	(exit 'stream :lisp_iostream '(:r8 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(io-stream io)" +error_msg_wrong_types :r1))
	(signature '(str)))

(def-func-end)

(def-method 'stream :lisp_fstream)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'stream :lisp_fstream '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1 2)

	(assign '((:r1 array_length)) '(:r2))
	(vp-push :r0)
	(defq in (method-input 'fstream :create))
	(vpif '(:r2 = 1))
		(list-bind-args :r1 (slice in 0 1) '(:str))
		(assign '(+file_open_read) (slice in 1 2))
	(else)
		(list-bind-args :r1 in '(:str :num))
	(endif)
	(call 'fstream :create in '(:r1))
	(vp-pop :r0)
	(vpif '(:r1 = 0))
		(assign '((:r0 lisp_sym_nil)) '(:r1))
		(class/obj/ref :r1 :r2)
	(endif)

	(exit 'stream :lisp_fstream '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(file-stream path [mode])" +error_msg_wrong_types :r1))
	(signature '(str num)))

(def-func-end)

(def-method 'stream :lisp_sstream)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'stream :lisp_sstream '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(vp-push :r0)
	(defq in (method-input 'sstream :create))
	(list-bind-args :r1 in '(:obj))
	(class/obj/ref (first in))
	(call 'sstream :create in '(:r1))
	(vp-pop :r0)

	(exit 'stream :lisp_sstream '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(string-stream str)" +error_msg_wrong_types :r1))
	(signature '(str)))

(def-func-end)

(def-method 'stream :lisp_available)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'stream :lisp_available '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(vp-push :r0)
	(defq in (method-input 'stream :available))
	(list-bind-args :r1 in '(:stream))
	(call 'stream :available in '(_ :r1))
	(call 'num :create '(:r1) '(:r1))
	(vp-pop :r0)

	(exit 'stream :lisp_available '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(stream-avail stream)" +error_msg_wrong_types :r1))
	(signature '(stream)))

(def-func-end)

(def-method 'stream :lisp_readchar)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this args value)
		(pptr iter_begin)
		(pubyte chars)
		(int length)
		(uint width))

	(push-scope)
	(entry 'stream :lisp_readchar {this, args})

	(d-call 'list :get_length {args} {_, length})
	(errorifnot {length = 1 || length = 2} 'error1)
	(call 'list :get_begin {args} {_, iter_begin})

(errorcase
	(call 'obj :inst_of (cat {iter_begin[0], @} (f-path 'stream :vtable)) '(_ tmp))
	(gotoif `(,tmp = 0) 'error2))

	(assign {length, 1} '(:r0 :r1))
	(vpif '(:r0 = 2))
		(assign {iter_begin[+ptr_size]} '(:r0))
	(errorcase
		(assign `((@ ,(f-path 'num :vtable)) (:r0 obj_vtable)) '(:r1 :r2))
		(gotoif '(:r1 /= :r2) 'error3))
		(assign '((:r0 num_value)) '(:r1))
		(vp-sub-cr 1 :r1)
		(vp-and-cr 7 :r1)
		(vp-add-cr 1 :r1)
	(endif)
	(assign '(:r1) {width})

	(call 'num :create '(0) {value})
	(assign {&value->num_value} '(:r0))
	(loop-start 'exit)
		(assign '(:r0) {chars})
		(call 'stream :read_char {iter_begin[0]} '(_ :r1))
		(vpif '(:r1 = -1))
			(call 'obj :deref {value})
			(call 'obj :ref {this->lisp_sym_nil} {value})
			(break 'exit)
		(endif)
		(assign {chars, width} '(:r0 :r2))
		(vp-cpy-ri-b :r1 :r0 0)
		(vp-add-cr 1 :r0)
		(vp-sub-cr 1 :r2)
		(assign '(:r2) {width})
	(loop-until '(:r2 = 0))

	(exit 'stream :lisp_readchar {this, value})
	(return)

(errorcase
	(defq in (method-input 'lisp :repl_error))
(vp-label 'error1)
	(vp-cpy-cr +error_msg_wrong_num_of_args (third in))
	(goto 'error)
(vp-label 'error2)
	(vp-cpy-cr +error_msg_not_a_stream (third in))
	(goto 'error)
(vp-label 'error3)
	(vp-cpy-cr +error_msg_not_a_number (third in))
(vp-label 'error)
	(assign {this, args} (erase in 1 3))
	(jump 'lisp :repl_error `(,(first in) "(read-char stream [width])" ,(third in) ,(elem-get in 3))))

	(pop-scope-syms)

(def-func-end)

(def-method 'stream :lisp_readline)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'stream :lisp_readline '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(vp-push :r0)
	(defq in (method-input 'stream :read_line))
	(list-bind-args :r1 in '(:stream))
	(call 'stream :read_line in '(_ :r1))
	(vp-pop :r0)
	(vpif '(:r1 = 0))
		(assign '((:r0 lisp_sym_nil)) '(:r1))
		(class/obj/ref :r1 :r2)
	(endif)

	(exit 'stream :lisp_readline '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(read-line stream)" +error_msg_wrong_types :r1))
	(signature '(stream)))

(def-func-end)

(def-method 'stream :lisp_readavail)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'stream :lisp_readavail '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(vp-push :r0)
	(list-bind-args :r1 '(:r2) '(:stream))
	(assign '((:r2 stream_bufp) (:r2 stream_bufe)) '(:r0 :r1))
	(assign '(:r1) '((:r2 stream_bufp)))
	(vp-sub-rr :r0 :r1)
	(call 'str :create_from_buffer '(:r0 :r1) '(:r1))
	(vp-pop :r0)

	(exit 'stream :lisp_readavail '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(read-avail stream)" +error_msg_wrong_types :r1))
	(signature '(stream)))

(def-func-end)

(def-method 'stream :lisp_write)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'stream :lisp_write '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 2)

	(vp-push :r0)
	(defq in (method-input 'stream :write))
	(array-bind-args :r1 (slice in 0 2))
	(assign `((,(second in) str_length)) `(,(third in)))
	(list-cast-args in '(:stream :str _))
	(vp-push (third in))
	(call 'stream :write in '(:r1))
	(vp-pop :r0)
	(call 'num :create '(:r0) '(:r1))
	(vp-pop :r0)

	(exit 'stream :lisp_write '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(write stream str)" +error_msg_wrong_types :r1))
	(signature '(stream str)))

(def-func-end)

(def-method 'stream :lisp_writechar)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (iter_end iter_begin stream value width this args)
		'(:r8 :r9 :r10 :r11 :r12))

	(entry 'stream :lisp_writechar `(,this ,args))

	(errorif-lisp-args-sig 'error :r1 2 3)

	(assign `((,args array_length)) `(,value))
	(assign `((,args array_begin)) `(,iter_begin))
	(assign `((,iter_begin 0)) `(,stream))

	(vp-cpy-cr 1 width)
	(vpif (list value '= 3))
		(assign `((,iter_begin ,(* +ptr_size 2))) `(,width))
		(assign `((,width num_value)) `(,width))
		(vp-sub-cr 1 width)
		(vp-and-cr 7 width)
		(vp-add-cr 1 width)
	(endif)

	(assign `((,iter_begin +ptr_size)) `(,value))
	(assign `((,value obj_vtable) (@ ,(f-path 'list :vtable))) '(:r13 :r14))
	(vpif '(:r13 = :r14))
	(errorcase
		(call 'lisp :env_args_type `(,value (@ ,(f-path 'num :vtable)) 1) '(tmp))
		(gotoif `(,tmp = 0) 'error2))
		(def-vars
			(ptr this stream)
			(pptr iter_begin iter_end)
			(uint width total))
		(push-scope)
		(class/array/get_both value iter_begin iter_end)
		(assign `(,this ,stream ,iter_end ,width) {this, stream, iter_end, width})
		(vp-sub-rr iter_begin iter_end)
		(vp-shr-cr (log2 +long_size) iter_end)
		(vp-mul-rr width iter_end)
		(assign `(,iter_end) {total})
		(loop-start)
			(assign `(,iter_begin) {iter_begin})
			(call 'stream :write {stream, &iter_begin[0]->num_value ,width})
			(assign {iter_begin, iter_end} `(,iter_begin ,iter_end))
			(vp-add-cr +ptr_size iter_begin)
		(loop-until `(,iter_begin = ,iter_end))
		(call 'num :create {total} `(,stream))
		(assign {this} `(,this))
		(pop-scope)
	(else)
	(errorcase
		(call 'obj :inst_of `(,value (@ ,(f-path 'num :vtable))) '(_ tmp))
		(gotoif `(,tmp = 0) 'error2))
		(def-vars
			(ptr this)
			(uint width))
		(push-scope)
		(assign `(,this ,width) {this, width})
		(call 'stream :write `(,stream (& ,value num_value) ,width))
		(call 'num :create {width} `(,stream))
		(assign {this} `(,this))
		(pop-scope)
	(endif)

	(exit 'stream :lisp_writechar `(,this ,stream))
	(vp-ret)

(errorcase
	(defq err (method-input 'lisp :repl_error 2))
(vp-label 'error1)
	(vp-cpy-cr +error_msg_wrong_num_of_args err)
	(goto 'error)
(vp-label 'error2)
	(vp-cpy-cr +error_msg_wrong_types err)
(vp-label 'error)
	(jump 'lisp :repl_error `(,this "(write-char stream list|num [width])" ,err ,args))
	(signature '(stream obj num)))

(def-func-end)

(def-method 'stream :lisp_write_flush)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'stream :lisp_write_flush '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(vp-push :r0)
	(defq in (method-input 'stream :flush))
	(array-bind-args :r1 in)
	(call 'stream :flush in '(:r1))
	(class/obj/ref :r1 :r2)
	(vp-pop :r0)

	(exit 'stream :lisp_write_flush '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(stream-flush stream)" +error_msg_wrong_types :r1))
	(signature '(stream)))

(def-func-end)

(def-method 'stream :lisp_seek)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'stream :lisp_seek '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 3)

	(vp-push :r0)
	(defq in (method-input 'stream :seek))
	(list-bind-args :r1 in '(:stream :num :num))
	(call 'stream :seek in '(_ :r0))
	(call 'num :create '(:r0) '(:r1))
	(vp-pop :r0)

	(exit 'stream :lisp_seek '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(stream-seek stream offset pos)" +error_msg_wrong_types :r1))
	(signature '(stream num num)))

(def-func-end)

(def-method 'stream :lisp_each)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this args stream func value)
		(int idx)
		(uint old_idx))

	(vp-def (this value func stream idx old_idx))

	(push-scope)
	(entry 'seq :lisp_each `(,this ,value))

	(errorif-lisp-args-sig 'error1 :r1 2)

	(assign `(,this) {this})
	(list-bind-args value `(,func ,stream) '(:obj :stream))
	(assign '(0) `(,idx))
	(assign `(,func ,stream ,idx) {func, stream, idx})

	(assign `((,this lisp_seq_idx)) `(,old_idx))
	(assign `(,idx) `((,this lisp_seq_idx)))
	(assign `(,old_idx) {old_idx})

	(loop-start)
		(call 'stream :read_line {stream} {_, value})
		(breakifnot {value})
		(call 'list :create :nil {args})
		(call 'list :push_back {args, value})
		(call 'lisp :repl_apply {this, args, func} {_, value})
		(call 'obj :deref {args})

	(errorcase
		(vp-def (vt1 vt2))
		(assign {value->obj_vtable, this->lisp_error} `(,vt1 ,vt2))
		(gotoif `(,vt1 = ,vt2) 'error))

		(call 'obj :deref {value})
		(assign {this} `(,this))
		(assign `((,this lisp_seq_idx)) `(,idx))
		(vp-add-cr 1 idx)
		(assign `(,idx) `((,this lisp_seq_idx)))
	(loop-end)
	(call 'obj :ref {this->lisp_sym_nil} {value})

(vp-label 'error)
	(assign {this, value} `(,this ,value))
	(assign {old_idx} `(,old_idx))
	(assign `(,old_idx) `((,this lisp_seq_idx)))

	(exit 'stream :lisp_each `(,this ,value))
	(return)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error `(,this "(lines! lambda stream)" +error_msg_wrong_types ,value))
	(signature '(obj stream)))

	(pop-scope-syms)

(def-func-end)
