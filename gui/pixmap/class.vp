(include "lib/asm/func.inc")
(include "class/sym/class.inc")
(include "class/hmap/class.inc")
(include "class/list/class.inc")
(include "./class.inc")
(include "././canvas/class.inc")
(include "././texture/class.inc")
(include "class/stream/class.inc")
(include "class/sstream/class.inc")
(include "class/fstream/class.inc")
(include "sys/str/class.inc")
(include "service/gui/class.inc")
(include "lib/consts/colors.inc")
(include "sys/statics/class.inc")

(gen-vtable 'pixmap)

(def-method 'pixmap :create)
	;inputs
	;:r0 = width (pixels)
	;:r1 = height (pixels)
	;:r2 = type (int)
	;outputs
	;:r0 = 0 if error, else pixmap object (ptr)
	;trashes
	;:r1-:r7

	;save size of data
	(entry 'pixmap :create '(:r0 :r1 :r2))
	(assign '(:r0 :r1 :r2) '(:r5 :r6 :r7))

	;create new pixmap object
	(vp-mul-rr :r1 :r0)
	(vp-mul-cr +int_size :r0)
	(vp-add-cr pixmap_data :r0)
	(call 'sys_mem :alloc '(:r0) '(:r0 _))
	(vpif '(:r0 /= 0))
		;init the object
		(call 'pixmap :init `(:r0 (@ ,(f-path 'pixmap :vtable)) :r5 :r6 :r7) '(:r0 :r1))
		(vpif '(:r1 = 0))
			;error with init
			(call 'sys_mem :free '(:r0))
			(vp-xor-rr :r0 :r0)
		(endif)
	(endif)

	(exit 'pixmap :create '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :init)
	;inputs
	;:r0 = pixmap object (ptr)
	;:r1 = vtable (pptr)
	;:r2 = width (pixels)
	;:r3 = height (pixels)
	;:r4 = type (int)
	;outputs
	;:r0 = pixmap object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r14

	(entry 'pixmap :init '(:r0 :r1 :r2 :r3 :r4))
	(assign '(:r2 :r3 :r4) '((:r0 pixmap_width) (:r0 pixmap_height) (:r0 pixmap_type)))
	(vp-mul-cr +int_size :r2)
	(assign '(:r2) '((:r0 pixmap_stride)))

	;init parent
	(s-call 'pixmap :init '(:r0 :r1) '(:r0 :r1))
	(vpif '(:r1 /= 0))
		(vp-push :r0)
		(assign '(0) '(:r1))
		(assign '(:r1 :r1 :r1 :r1)
			'((:r0 pixmap_texture) (:r0 pixmap_stream)
			(:r0 pixmap_bufp) (:r0 pixmap_stream_type)))

		;clear pixel buffer
		(assign '((:r0 pixmap_height) (:r0 pixmap_stride)) '(:r1 :r2))
		(vp-mul-rr :r2 :r1)
		(call 'sys_mem :fill '((& :r0 pixmap_data) :r1 0))
		(vp-pop :r0)
	(endif)

	(exit 'pixmap :init '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :deinit)
	;inputs
	;:r0 = pixmap object (ptr)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r14

	(vp-push :r0)

	;free any flm stream
	(call 'stream :deref_if '((:r0 pixmap_stream)))

	;free any texture
	(assign '((:rsp 0)) '(:r0))
	(call 'texture :deref_if '((:r0 pixmap_texture)))

	(vp-pop :r0)
	(s-jump 'pixmap :deinit '(:r0))

(def-func-end)

(def-method 'pixmap :upload 16)
	;inputs
	;:r0 = pixmap object (ptr)
	;:r1 = pixmap upload flags (uint)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this)
		(uint flags))

	(def-vars
		(struct frame local_size))

	(push-scope)
	(entry 'pixmap :upload {frame.local_this, frame.local_flags})

	(call 'sys_task :callback {&frame, $callback})

	(exit 'pixmap :upload {frame.local_this})
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;:r0 = user data

	(def-vars
		(ptr user this old_stack)
		(ulong tex_id))

	(vp-cpy-rr :rsp :r1)
	(push-scope)
	(vp-and-cr -16 :rsp)
	(entry {user, old_stack})

	;free any texture
	(assign {user->local_this} {this})
	(call 'texture :deref_if {this->pixmap_texture})

	;create SDL surface from pixel buffer, convert to texture
	(host-gui-call 'host_gui :create_texture {&this->pixmap_data,
			this->pixmap_width, this->pixmap_height,
			this->pixmap_stride, user->local_flags}
		{tex_id})

	;new texture
	(call 'texture :create {tex_id, this->pixmap_width, this->pixmap_height} {this->pixmap_texture})

	(assign {old_stack} '(:rsp))
	(pop-scope-syms)
	(return)

(def-func-end)

(def-method 'pixmap :to_premul)
	;inputs
	;:r1 = color (argb)
	;outputs
	;:r1 = color premul (argb)
	;trashes
	;:r1-:r3

	(vp-def (_ col g rb))

	(entry 'pixmap :to_premul `(,col))

	(vp-simd vp-cpy-rr `(,col) `(,rb ,g))
	(vp-shr-cr 24 col)
	(vp-simd vp-and-cr '(0xff00ff 0xff00) `(,rb ,g))
	(vp-simd vp-mul-rr `(,col) `(,rb ,g))
	(vp-shl-cr 24 col)
	(vp-simd vp-shr-cr '(8) `(,rb ,g))
	(vp-simd vp-and-cr '(0xff00ff 0xff00) `(,rb ,g))
	(vp-add-rr rb col)
	(vp-add-rr g col)

	(exit 'pixmap :to_premul `(,col))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :to_argb)
	;inputs
	;:r1 = color premul (argb)
	;outputs
	;:r1 = color (argb)
	;trashes
	;:r1-:r4

	(vp-def (c col g rb this))

	(entry 'pixmap :to_argb `(,col))

	(vp-cpy-rr col rb)
	(vp-shr-cr 24 rb)
	(vpif `(,rb /= 0) `(,rb /= 0xff))
		(vp-cpy-rr c this)
		(vp-xor-rr g g)
		(vp-cpy-cr 0xff00 c)
		(vp-div-rrr-u rb g c)
		(vp-simd vp-cpy-rr `(,col) `(,rb ,g))
		(vp-simd vp-and-cr '(0xff00ff 0xff00) `(,rb ,g))
		(vp-simd vp-mul-rr `(,c) `(,rb ,g))
		(vp-shr-cr 24 col)
		(vp-shl-cr 24 col)
		(vp-simd vp-shr-cr '(8) `(,rb ,g))
		(vp-simd vp-and-cr '(0xff00ff 0xff00) `(,rb ,g))
		(vp-add-rr rb col)
		(vp-add-rr g col)
		(vp-cpy-rr this c)
	(endif)

	(exit 'pixmap :to_argb `(,col))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :fill)
	;inputs
	;:r0 = pixmap object (ptr)
	;:r1 = color (argb)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r4

	(entry 'pixmap :fill '(:r0 :r1))

	(call 'pixmap :to_premul '(:r1) '(:r1))
	(vp-cpy-rr :r1 :r2)
	(vp-shl-cr 32 :r1)
	(vp-cpy-rr :r0 :r4)
	(vp-add-rr :r1 :r2)
	(assign '((:r0 pixmap_height) (:r0 pixmap_stride) (& :r0 pixmap_data)) '(:r1 :r3 :r0))
	(vp-mul-rr :r3 :r1)
	(call 'sys_mem :fill '(:r0 :r1 :r2))

	(exit 'pixmap :fill '(:r4))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :as_argb)
	;inputs
	;:r0 = pixmap object (ptr)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r8

	(vp-def (this col pix dst pmul argb end height)
		'(:r0 :r1 :r2 :r5 :r6 :r7 :r8 :r1))

	(entry 'pixmap :as_argb `(,this))

	(assign `((,this pixmap_type)) `(,pix))
	(vpif `(,pix < 0))
		(vp-mul-cr -1 pix)
		(assign `(,pix) `((,this pixmap_type)))

		(assign `((& ,this pixmap_data) (,this pixmap_stride) (,this pixmap_height))
			`(,dst ,end ,height))
		(vp-mul-rr height end)
		(vp-simd vp-xor-rr `(,pmul ,argb) `(,pmul ,argb))
		(vp-add-rr dst end)
		(loop-start)
			(vp-cpy-ir-ui dst 0 col)
			(vp-add-cr +int_size dst)
			(vpif `(,col /= ,pmul))
				(vp-cpy-rr col pmul)
				(call 'pixmap :to_argb `(,col) `(,argb))
			(endif)
			(vp-cpy-ri-i argb dst (neg +int_size))
		(loop-until `(,dst = ,end))
	(endif)

	(exit 'pixmap :as_argb `(,this))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :as_premul)
	;inputs
	;:r0 = pixmap object (ptr)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r7

	(vp-def (this col pix dst pmul argb end height)
		'(:r0 :r1 :r2 :r4 :r5 :r6 :r7 :r1))

	(entry 'pixmap :as_premul `(,this))

	(assign `((,this pixmap_type)) `(,pix))
	(vpif `(,pix < 0))
		(vp-mul-cr -1 pix)
		(assign `(,pix) `((,this pixmap_type)))

		(assign `((& ,this pixmap_data) (,this pixmap_stride) (,this pixmap_height))
			`(,dst ,end ,height))
		(vp-mul-rr height end)
		(vp-simd vp-xor-rr `(,pmul ,argb) `(,pmul ,argb))
		(vp-add-rr dst end)
		(loop-start)
			(vp-cpy-ir-ui dst 0 col)
			(vp-add-cr +int_size dst)
			(vpif `(,col /= ,argb))
				(vp-cpy-rr col argb)
				(call 'pixmap :to_premul `(,col) `(,pmul))
			(endif)
			(vp-cpy-ri-i argb dst (neg +int_size))
		(loop-until `(,dst = ,end))
	(endif)

	(exit 'pixmap :as_premul `(,this))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :to_argb32)
	;inputs
	;:r1 = col (uint)
	;:r2 = pixel type (uint)
	;outputs
	;:r1 = col (uint)
	;trashes
	;:r1-:r8

	(vp-def (col pix a r g b sa sr sg sb)
		'(:r1 :r2 :r3 :r4 :r5 :r6 :r7 :r8 :r1 :r2))

	(defun width (mask) (- 64 (nlz mask) (ntz mask)))

	(defun conv (col sr dr sm dm)
		(defq sw (width sm) dw (width dm))
		(cond
			((> (/ dw sw) 2)
				;fractional muliply
				(defq pipe `((vp-cpy-rr ,col ,dr)
					(vp-and-cr ,sm ,dr) (vp-mul-cr ,(/ dm sm) ,dr)))
				(if (/= sw 1) (push pipe `(vp-cpy-cr ,dm ,sr) `(vp-and-rr ,sr ,dr))))
			(:t ;left bit replicate
				(defq ls (- (nlz sm) (nlz dm)) pipe
					`((vp-cpy-rr ,col ,sr) (vp-and-cr ,sm ,sr)
					(vp-shl-cr ,ls ,sr) (vp-cpy-rr ,sr ,dr))
					dw (- dw sw) sm (>> (<< sm ls) sw))
				(while (> dw 0)
					(push pipe `(vp-shr-cr ,sw ,sr) `(vp-add-rr ,sr ,dr))
					(setq dw (- dw sw) sm (>> sm sw)))
				(and (/= dw 0) (/= sm 0) (push pipe `(vp-and-cr ,dm ,dr)))))
		pipe)

	(defun pipeline (&rest pipes)
		(defq plen (max-length pipes))
		(each (# (while (< (length %0) plen) (push %0 :nil))) pipes)
		(each (const eval) (apply (const zip) pipes)))

	(defun to-argb32 (am rm gm bm)
		(cond
			((= am 0)
				(vp-cpy-cr +argb_black a)
				(pipeline
					(conv col sr r rm 0xff0000)
					(conv col sg g gm 0x00ff00)
					(conv col sb b bm 0x0000ff)))
			(:t (pipeline
					(conv col sa a am 0xff000000)
					(conv col sr r rm 0x00ff0000)
					(conv col sg g gm 0x0000ff00)
					(conv col sb b bm 0x000000ff))))
		(vp-simd vp-add-rr `(,a ,g) `(,r ,b))
		(vp-lea-d r b col))

	(entry 'pixmap :to_argb32 (list col pix))

	(switch)
	(breakif (list pix '= 32))
	(vpcase (list pix '= 24))
		(vp-cpy-cr +argb_black pix)
		(vp-add-rr pix col)
		(break)
	(vpcase (list pix '= 16))
		(to-argb32
			0b0000000000000000 0b1111100000000000 0b0000011111100000 0b0000000000011111)
		(break)
	(vpcase (list pix '= 15))
		(to-argb32
			0b1000000000000000 0b0111110000000000 0b0000001111100000 0b0000000000011111)
		(break)
	(vpcase (list pix '= 12))
		(to-argb32
			0b1111000000000000 0b0000111100000000 0b0000000011110000 0b0000000000001111)
		(break)
	(vpcase (list pix '= 8))
		(vp-cpy-rr col r)
		(vp-cpy-rr col g)
		(vp-cpy-rr col b)
		(vp-shl-cr 16 r)
		(vp-shl-cr 8 g)
		(vp-cpy-cr +argb_black col)
		(vp-add-rr r g)
		(vp-add-rr b col)
		(vp-add-rr g col)
		(break)
	(default)
		(vpif (list col '= 0))
			(vp-cpy-cr +argb_black col)
		(else)
			(vp-cpy-cr +argb_white col)
		(endif)
	(endswitch)

	(exit 'pixmap :to_argb32 (list col))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :from_argb32)
	;inputs
	;:r1 = col (uint)
	;:r2 = pixel type (uint)
	;outputs
	;:r1 = col (uint)
	;trashes
	;:r1-:r5

	(vp-def (_ col pix r g b))

	(defun from-argb32 (am rm gm bm)
		(cond
			((= 0 am)
				(vp-simd vp-cpy-rr `(,col) `(,g ,b))
				(vp-simd vp-shr-cr
					`(,(- (nlz rm) 40) ,(- (nlz gm) 48) ,(- (nlz bm) 56))
					`(,col ,g ,b))
				(vp-simd vp-and-cr `(,rm ,gm ,bm) `(,col ,g ,b))
				(vp-add-rr g col)
				(vp-add-rr b col))
			(:t
				(vp-simd vp-cpy-rr `(,col) `(,r ,g ,b))
				(vp-simd vp-shr-cr
					`(,(- (nlz am) 32) ,(- (nlz rm) 40) ,(- (nlz gm) 48) ,(- (nlz bm) 56))
					`(,col ,r ,g ,b))
				(vp-simd vp-and-cr `(,am ,rm ,gm ,bm) `(,col ,r ,g ,b))
				(vp-simd vp-add-rr `(,r ,g) `(,col ,b))
				(vp-add-rr b col))))

	(entry 'pixmap :from_argb32 (list col pix))

	(switch)
	(breakif (list pix '= 32))
	(vpcase (list pix '= 24))
		(vp-and-cr 0xffffff col)
		(break)
	(vpcase (list pix '= 16))
		(from-argb32
			0b0000000000000000 0b1111100000000000 0b0000011111100000 0b0000000000011111)
		(break)
	(vpcase (list pix '= 15))
		(from-argb32
			0b1000000000000000 0b0111110000000000 0b0000001111100000 0b0000000000011111)
		(break)
	(vpcase (list pix '= 12))
		(from-argb32
			0b1111000000000000 0b0000111100000000 0b0000000011110000 0b0000000000001111)
		(break)
	(default)
		(vp-cpy-rr col g)
		(vp-cpy-rr col b)
		(vp-shr-cr 16 col)
		(vp-shr-cr 8 g)
		(vp-and-cr 0b11111111 col)
		(vp-and-cr 0b11111111 g)
		(vp-and-cr 0b11111111 b)
		(vp-mul-cr 19595 col)
		(vp-mul-cr 38469 g)
		(vp-mul-cr 7471 b)
		(vp-add-rr g col)
		(vp-add-rr b col)
		(vp-shr-cr 16 col)
		(breakif (list pix '= 8))
		(vp-shr-cr 7 col)
	(endswitch)

	(exit 'pixmap :from_argb32 (list col))
	(vp-ret)

(def-func-end)
