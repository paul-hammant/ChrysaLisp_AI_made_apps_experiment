(include "lib/asm/func.inc")
(include "./class.inc")
(include "class/array/class.inc")

(def-method 'pixmap :resize)
	;inputs
	;:r0 = pixmap object (ptr)
	;:r1 = source pixmap object (ptr)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this source)
		(puint data sdata buf)
		(uint x y x2 y2)
		(uint x1a x1b x1c x1d y1a y1b y1c y1d)
		(uint a r g b q weight_x weight_y)
		(long fw fh))

	(assign '((:r0 pixmap_width) (:r0 pixmap_height) (:r1 pixmap_width) (:r1 pixmap_height))
		'(:r2 :r3 :r4 :r5))
	(vp-simd vp-shl-cr '(1) '(:r2 :r3))
	(vpif '(:r2 = :r4) '(:r3 = :r5))
		(jump 'pixmap :resize_2 '(:r0 :r1))
	(endif)
	(vp-simd vp-shr-cr '(1) '(:r2 :r3))
	(vp-simd vp-mul-cr '(3) '(:r2 :r3))
	(vpif '(:r2 = :r4) '(:r3 = :r5))
		(jump 'pixmap :resize_3 '(:r0 :r1))
	(endif)

	(push-scope)
	(entry 'pixmap :resize {this, source})

	(call 'sys_mem :alloc {(this->pixmap_width + 1) * +int_size} {buf, _})
	(assign {(source->pixmap_width * 256) </ this->pixmap_width} {fw})
	(assign {(source->pixmap_height * 256) </ this->pixmap_height} {fh})

	(assign {0} {x2})
	(loop-while {x2 < this->pixmap_width})
		(assign {x2 *> fw} {(buf)[x2 * +int_size]})
		(assign {x2 + 1} {x2})
	(loop-end)
	(assign {source->pixmap_width * 256} {(buf)[x2 * +int_size]})

	(assign {&this->pixmap_size} {data})
	(assign {0} {y2})
	(loop-while {y2 < this->pixmap_height})
		(assign {y2 *> fh} {y1a})
		(assign {y1a >> 8} {y1c})
		(assign {((y2 + 1) *> fh) - 1} {y1b})
		(assign {y1b >> 8} {y1d})

		(assign {0} {x2})
		(loop-while {x2 < this->pixmap_width})
			(assign {(buf)[x2 * +int_size]} {x1a})
			(assign {x1a >> 8} {x1c})
			(assign {(buf)[(x2 + 1) * +int_size] - 1} {x1b})
			(assign {x1b >> 8} {x1d})

			(assign {0 => a => r => g => b} {q})

			(assign {y1c} {y})
			(loop-while {y <= y1d})
				(vp-def (weight_y y1c y1d y y1a y1b))
				(assign {256, y1c, y1d} (list weight_y y1c y1d))
				(vpif `(,y1c /= ,y1d))
					(assign {y, y1a, y1b} (list y y1a y1b))
					(vpif `(,y = ,y1c))
						(vp-and-cr 0xff y1a)
						(vp-sub-rr y1a weight_y)
					(elseif `(,y = ,y1d))
						(vp-and-cr 0xff y1b)
						(vp-add-cr 1 y1b)
						(vp-cpy-rr y1b weight_y)
					(endif)
				(endif)
				(assign (list weight_y) {weight_y})

				(assign {&source->pixmap_size + ((y * source->pixmap_width + x1c) * +int_size)} {sdata})
				(assign {x1c} {x})
				(loop-while {x <= x1d})
					(vp-def (weight_x x1c x1d x x1a x1b))
					(assign {256, x1c, x1d} (list weight_x x1c x1d))
					(vpif `(,x1c /= ,x1d))
						(assign {x, x1a, x1b} (list x x1a x1b))
						(vpif `(,x = ,x1c))
							(vp-and-cr 0xff x1a)
							(vp-sub-rr x1a weight_x)
						(elseif `(,x = ,x1d))
							(vp-and-cr 0xff x1b)
							(vp-add-cr 1 x1b)
							(vp-cpy-rr x1b weight_x)
						(endif)
					(endif)
					(assign (list weight_x) {weight_x})

					;multiply pixel channels by the pixel weight and accumulate
					(vp-def (r g b a q sr sg sb sa sdata weight))
					(assign {r, g, b, a, q, sdata, weight_x * weight_y}
						(list r g b a q sdata weight))
					(vp-cpy-ir-ui sdata 0 sa)
					(vp-add-cr +int_size sdata)

					(vp-simd vp-cpy-rr `(,sa) `(,sr ,sg ,sb))
					(vp-simd vp-shr-cr '(8 16 24) `(,sg ,sb ,sa))
					(vp-simd vp-and-cr '(0xff) `(,sr ,sg ,sb))
					(vp-simd vp-mul-rr `(,weight) `(,sr ,sg ,sb ,sa))
					(vp-simd vp-add-rr `(,sr ,sg ,sb ,sa) `(,r ,g ,b ,a))
					(vp-add-rr weight q)
					(assign (list sdata r g b a q) {sdata, r, g, b, a, q})

					(assign {x + 1} {x})
				(loop-end)
				(assign {y + 1} {y})
			(loop-end)

			;divide by the pixel weight and store
			(vp-def (q r g b a data))
			(assign {(1 << 32) / q, r, g, b, a, data} (list q r g b a data))
			(vp-simd vp-mul-rr `(,q) `(,r ,g ,b ,a))
			(vp-simd vp-shr-cr '(32) `(,r ,g ,b ,a))
			(vp-simd vp-shl-cr '(8 16 24) `(,g ,b ,a))
			(vp-simd vp-add-rr `(,g ,b ,a) `(,r))
			(vp-cpy-ri-i r data 0)
			(vp-add-cr +int_size data)
			(assign (list data) {data})

			(assign {x2 + 1} {x2})
		(loop-end)
		(assign {y2 + 1} {y2})
	(loop-end)

	(exit 'pixmap :resize {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'pixmap :resize_2)
	;inputs
	;:r0 = pixmap object (ptr)
	;:r1 = source pixmap object (ptr)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (this source sdata xdata ydata data rb ga srb sga sw mga mrb))

	(entry 'pixmap :resize_2 (list this source))

	(assign `((& ,this pixmap_size) (& ,source pixmap_size)) `(,data , sdata))
	(assign `((,source pixmap_stride) (,source pixmap_height) 0xff00ff00 0xff00ff)
		(list sw ydata mga mrb))

	(vp-mul-rr sw ydata)
	(vp-add-rr sdata ydata)
	(loop-while `(,sdata /= ,ydata))
		(vp-lea-d sdata sw xdata)
		(loop-while `(,sdata /= ,xdata))
			;accumulate pixel channels
			(vp-cpy-ir-ui sdata 0 ga)
			(vp-cpy-rr ga rb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,ga ,rb))

			(vp-cpy-ir-ui sdata +int_size sga)
			(vp-add-rr sw sdata)
			(vp-cpy-rr sga srb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,sga ,srb))
			(vp-simd vp-add-rr `(,sga ,srb) `(,ga ,rb))

			(vp-cpy-ir-ui sdata 0 sga)
			(vp-cpy-rr sga srb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,sga ,srb))
			(vp-simd vp-add-rr `(,sga ,srb) `(,ga ,rb))

			(vp-cpy-ir-ui sdata +int_size sga)
			(vp-sub-rr sw sdata)
			(vp-cpy-rr sga srb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,sga ,srb))
			(vp-simd vp-add-rr `(,sga ,srb) `(,ga ,rb))

			;divide by the pixel weight and store
			(vp-simd vp-shr-cr '(2) `(,ga ,rb))
			(vp-simd vp-and-rr `(,mga ,mrb) `(,ga ,rb))
			(vp-add-rr ga rb)
			(vp-cpy-ri-i rb data 0)

			(vp-add-cr +int_size data)
			(vp-add-cr (* 2 +int_size) sdata)
		(loop-end)
		(vp-add-rr sw sdata)
	(loop-end)

	(exit 'pixmap :resize_2 (list this))
	(vp-ret)

(def-func-end)

(def-method 'pixmap :resize_3)
	;inputs
	;:r0 = pixmap object (ptr)
	;:r1 = source pixmap object (ptr)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (this source sdata xdata ydata data q rb ga srb sga sw mga mrb))

	(entry 'pixmap :resize_3 (list this source))

	(assign `((& ,this pixmap_size) (& ,source pixmap_size)) `(,data , sdata))
	(assign `(,(/ (<< 1 32) 9) (,source pixmap_stride) (,source pixmap_height) 0xff00ff00 0xff00ff)
		(list q sw ydata mga mrb))

	(vp-mul-rr sw ydata)
	(vp-add-rr sdata ydata)
	(loop-while `(,sdata /= ,ydata))
		(vp-lea-d sdata sw xdata)
		(loop-while `(,sdata /= ,xdata))
			;accumulate pixel channels
			(vp-cpy-ir-ui sdata 0 ga)
			(vp-cpy-rr ga rb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,ga ,rb))

			(vp-cpy-ir-ui sdata +int_size sga)
			(vp-cpy-rr sga srb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,sga ,srb))
			(vp-simd vp-add-rr `(,sga ,srb) `(,ga ,rb))

			(vp-cpy-ir-ui sdata (* 2 +int_size) sga)
			(vp-add-rr sw sdata)
			(vp-cpy-rr sga srb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,sga ,srb))
			(vp-simd vp-add-rr `(,sga ,srb) `(,ga ,rb))

			(vp-cpy-ir-ui sdata 0 sga)
			(vp-cpy-rr sga srb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,sga ,srb))
			(vp-simd vp-add-rr `(,sga ,srb) `(,ga ,rb))

			(vp-cpy-ir-ui sdata +int_size sga)
			(vp-cpy-rr sga srb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,sga ,srb))
			(vp-simd vp-add-rr `(,sga ,srb) `(,ga ,rb))

			(vp-cpy-ir-ui sdata (* 2 +int_size) sga)
			(vp-add-rr sw sdata)
			(vp-cpy-rr sga srb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,sga ,srb))
			(vp-simd vp-add-rr `(,sga ,srb) `(,ga ,rb))

			(vp-cpy-ir-ui sdata 0 sga)
			(vp-cpy-rr sga srb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,sga ,srb))
			(vp-simd vp-add-rr `(,sga ,srb) `(,ga ,rb))

			(vp-cpy-ir-ui sdata +int_size sga)
			(vp-cpy-rr sga srb)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,sga ,srb))
			(vp-simd vp-add-rr `(,sga ,srb) `(,ga ,rb))

			(vp-cpy-ir-ui sdata (* 2 +int_size) sga)
			(vp-sub-rr sw sdata)
			(vp-cpy-rr sga srb)
			(vp-sub-rr sw sdata)
			(vp-simd vp-and-rr `(,mga ,mrb) `(,sga ,srb))
			(vp-simd vp-add-rr `(,sga ,srb) `(,ga ,rb))

			;divide by the pixel weight and store
			(vp-simd vp-cpy-rr `(,ga ,rb) `(,sga ,srb))
			(vp-simd vp-shr-cr '(24 16 8) `(,sga ,srb ,ga))
			(vp-simd vp-and-cr '(0xfff) `(,rb ,ga))
			(vp-simd vp-mul-rr `(,q) `(,sga ,srb ,ga ,rb))
			(vp-simd vp-shr-cr '(32) `(,sga ,srb ,ga ,rb))
			(vp-simd vp-shl-cr '(8 16 24) `(,ga ,srb ,sga))
			(vp-add-rr ga rb) (vp-add-rr srb rb) (vp-add-rr sga rb)
			(vp-cpy-ri-i rb data 0)

			(vp-add-cr +int_size data)
			(vp-add-cr (* 3 +int_size) sdata)
		(loop-end)
		(vp-add-rr sw sdata) (vp-add-rr sw sdata)
	(loop-end)

	(exit 'pixmap :resize_3 (list this))
	(vp-ret)

(def-func-end)
