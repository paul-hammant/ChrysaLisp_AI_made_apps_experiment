(include "lib/asm/func.inc")
(include "./class.inc")
(include "class/str/class.inc")
(include "class/stream/class.inc")
(include "class/array/class.inc")
(include "lib/consts/colors.inc")

(def-struct cpm 0
	(uint ident)        ;ident .CPM or .FLM
	(uint bytes)        ;0 if not known, else total size
	(uint version)      ;version number
	(uint type)         ;image type
	(uint width)        ;image w
	(uint height)       ;image h
	(uint trans))       ;image transparent colour

(def-method 'pixmap :load_cpm)
	;inputs
	;:r5 = stream object (ptr)
	;outputs
	;:r0 = 0 if error, else pixmap object (ptr)
	;trashes
	;:r0-:r14

	(def-vars
		(ptr this stream)
		(puint data data_end)
		(ulong bit_pool)
		(struct header cpm_size)
		(int length bit_pool_size bits)
		(ulong col))

	;save inputs
	(push-scope)
	(entry 'pixmap :load_cpm {stream})

	;read header
	(call 'stream :read {stream, &header, cpm_size} {_, length})
	(gotoif {length /= cpm_size} 'error1)

	;check ident '.CPM' or '.FLM'
	(gotoifnot (cat {header.cpm_ident = } (str (code "MPC." 4))
			{ || header.cpm_ident = } (str (code "MLF." 4))) 'error1)

	;create pixmap
	(call 'pixmap :create {header.cpm_width, header.cpm_height, 32} {this})
	(vpif {this})
		(assign {header.cpm_type => this->pixmap_stream_type} {bits})
		(assign {&this->pixmap_data} {data})
		(assign {data + this->pixmap_height * this->pixmap_stride} {data_end})
		(assign {0 => bit_pool} {bit_pool_size})
		(vpif {bits = 12 || bits = 15})
			(assign {16} {bits})
		(endif)

		;decode acording to type
		(vp-def (len col trans data data_end))
		(loop-start)
			;get token
			(call 'stream :read_bits {stream, 8, bit_pool, bit_pool_size} {_, length, bit_pool, bit_pool_size})
			(assign {length} (list len))
			(gotoif (list len '= -1) 'error)
			(vpif `(,len >= 128))
				;run of a pixel
				(vp-sub-cr 127 len)
				(assign (list len) {length})
				(call 'stream :read_bits {stream, bits, bit_pool, bit_pool_size} {_, col, bit_pool, bit_pool_size})
				(gotoif {col = -1} 'error)
				(call 'pixmap :to_argb32 {col, header.cpm_type} (list col))

				;fill or skip
				(assign {length, header.cpm_trans, data, data_end}
					(list len trans data data_end))
				(vpif `(,col /= ,trans))
					(loop-start)
						(gotoif `(,data >= ,data_end) 'error)
						(vp-cpy-ri-i col data 0)
						(vp-sub-cr 1 len)
						(vp-add-cr +int_size data)
					(loop-until `(,len = 0))
				(else)
					(vp-shl-cr (log2 +int_size) len)
					(vp-add-rr len data)
				(endif)
			(else)
				;block of pixels
				(vp-add-cr 1 len)
				(loop-start)
					(assign (list len) {length})
					(call 'stream :read_bits {stream, bits, bit_pool, bit_pool_size} {_, col, bit_pool, bit_pool_size})
					(gotoif {col = -1} 'error)
					(call 'pixmap :to_argb32 {col, header.cpm_type} (list col))
					(assign {length, header.cpm_trans, data, data_end}
						(list len trans data data_end))
					(gotoif `(,data >= ,data_end) 'error)
					(vpif `(,col /= ,trans))
						(vp-cpy-ri-i col data 0)
					(endif)
					(vp-sub-cr 1 len)
					(vp-add-cr +int_size data)
					(assign (list data) {data})
				(loop-until `(,len = 0))
			(endif)
			(assign (list data) {data})
		(loop-until `(,data = ,data_end))
		(assign {stream->stream_bufp} {this->pixmap_bufp})
	(endif)

	(exit 'pixmap :load_cpm {this})
	(return)

(vp-label 'error)
	(call 'pixmap :deref {this})
(vp-label 'error1)
	(exit 'pixmap :load_cpm '(0))
	(pop-scope)
	(return)

(def-func-end)

(def-method 'pixmap :save_cpm)
	;inputs
	;:r4 = pixmap object (ptr)
	;:r6 = stream object (ptr)
	;:r7 = format (uint)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r0-:r14

	(def-vars
		(ptr this stream)
		(puint data data1 data2)
		(ulong bit_pool)
		(struct header cpm_size)
		(int bit_pool_size)
		(uint format bits i j state len col next_col))

	;save inputs
	(push-scope)
	(entry 'pixmap :save_cpm {this, stream, format})

	;must be argb
	(call 'pixmap :as_argb {this})

	;write header
	(assign (str (code "MPC." 4)) {header.cpm_ident})
	(assign {0 => header.cpm_bytes} {header.cpm_trans})
	(assign {1} {header.cpm_version})
	(assign {format => header.cpm_type} {bits})
	(assign {this->pixmap_width} {header.cpm_width})
	(assign {this->pixmap_height} {header.cpm_height})
	(call 'stream :write {stream, &header, cpm_size})

	;save pixmap
	(assign {&this->pixmap_data} {data})
	(assign {this->pixmap_width * this->pixmap_height} {len})
	(assign {0 => bit_pool => bit_pool_size => i} {state})
	(vpif {bits = 12 || bits = 15})
		(assign {16} {bits})
	(endif)

	(loop-while {i < len} 'pixloop)
		(switch)
		(vpcase {state = 0})
			;no state
			(call 'pixmap :from_argb32 {data[i * +int_size], format} {col})
			(assign {i} {j})
			(assign {i + 1} {i})
			(vpif {i = len})
				(call 'stream :write_bits {stream, 0, 8, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(call 'stream :write_bits {stream, col, bits, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(break 'pixloop)
			(endif)
			(call 'pixmap :from_argb32 {data[i * +int_size], format} {next_col})
			(assign {2} {state})
			(continueif {col /= next_col} 'pixloop)
			(assign {1} {state})
			(continue 'pixloop)
		(default)
			;repeat state
			(call 'pixmap :from_argb32 {data[i * +int_size], format} {next_col})
			(assign {i + 1} {i})
			(nextcaseif {state /= 1})
			(switch)
			(vpcase {col /= next_col})
				(assign {i - 1} {i})
				(goto 'dorep)
			(vpcase {i = len || (i - j) = 0x80})
			(vp-label 'dorep)
				(call 'stream :write_bits {stream, i - j - 1 + 0x80, 8, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(call 'stream :write_bits {stream, col, bits, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(assign {0} {state})
			(endswitch)
			(continue 'pixloop)
		(default)
			;block state
			(switch)
			(vpcase {col = next_col})
				(assign {i - 1} {i})
				(goto 'doblk)
			(vpcase {i = len || (i - j) = 0x80})
			(vp-label 'doblk)
				(call 'stream :write_bits {stream, i - j - 1, 8, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(assign {&data[j * +int_size], &data[i * +int_size]} {data1, data2})
				(loop-start)
					(call 'pixmap :from_argb32 {*data1, format} {col})
					(call 'stream :write_bits {stream, col, bits, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(loop-until {(data1 + +int_size => data1) = data2})
				(assign {0} {state})
				(continue 'pixloop)
			(endswitch)
			(assign {next_col} {col})
		(endswitch)
	(loop-end)
	(call 'stream :write_bits {stream, 0, 7, bit_pool, bit_pool_size})

	(exit 'pixmap :save_cpm {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'pixmap :next_frame)
	;inputs
	;:r0 = pixmap object (ptr)
	;outputs
	;:r0 = pixmap object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this)
		(puint data data_end)
		(ulong col)
		(int length))

	;save inputs
	(push-scope)
	(entry 'pixmap :next_frame {this})

	(vpif {this->pixmap_stream} 'error)
		;must be premul
		(call 'pixmap :as_premul {this})

		;decode acording to type
		(assign {&this->pixmap_data} {data})
		(assign {data + this->pixmap_height * this->pixmap_stride} {data_end})

		(vp-def (len col data data_end))
		(loop-start)
			;get token, loop back if stream end
			(loop-start)
				(call 'stream :read_char {this->pixmap_stream} (list '_ len))
				(breakif (list len '/= -1))
				(assign {this->pixmap_bufp} {this->pixmap_stream->stream_bufp})
			(loop-end)

			;decode token
			(vpif `(,len >= 128))
				;skip
				(assign {data, data_end} (list data data_end))
				(vp-sub-cr 256 len)
				(vp-shl-cr (log2 +int_size) len)
				(vp-sub-rr len data)
			(else)
				;block of pixels
				(loop-start)
					(assign (list len) {length})
					(call 'stream :read_bits {this->pixmap_stream, this->pixmap_stream_type, 0, 0} {_, col, _, _})
					(breakif {col = -1} 'error)
					(call 'pixmap :to_argb32 {col, this->pixmap_stream_type} (list col))
					(call 'pixmap :to_premul (list col) (list col))
					(assign {length, data, data_end} (list len data data_end))
					(breakif `(,data >= ,data_end) 'error)
					(vp-cpy-ri-i col data 0)
					(vp-sub-cr 1 len)
					(vp-add-cr +int_size data)
					(assign (list data) {data})
				(loop-until `(,len = 0))
			(endif)
			(assign (list data) {data})
		(loop-until `(,data = ,data_end))
	(endif)

	(exit 'pixmap :next_frame {this})
	(pop-scope)
	(return)

(def-func-end)
