(include "lib/asm/func.inc")
(include "./class.inc")

(def-method 'canvas :ftri)
	;inputs
	;:r0 = canvas object (ptr)
	;:r1 = x0 (fixed)
	;:r2 = y0 (fixed)
	;:r3 = x1 (fixed)
	;:r4 = y1 (fixed)
	;:r5 = x2 (fixed)
	;:r6 = y2 (fixed)
	;outputs
	;:r0 = canvas object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this)
		(int a0 a1 a2 b0 b1 b2)
		(union
			(int x0 x1 x2 y0 y1 y2)
			(long c0 c1 c2))
		(int bx by bx1 by1))

	(push-scope)
	(entry 'canvas :ftri {this, x0, y0, x1, y1, x2, y2})

	(vp-def (this bx by x1 y1 x2 y2 bx1 by1 cx cy cx1 cy1 bxf byf) (method-input 'canvas :ftri))
	(assign {x0, y0, x0, y0, x1, y1, x2, y2,
			this->canvas_cx, this->canvas_cy, this->canvas_cx1, this->canvas_cy1}
		(list bx by bx1 by1 x1 y1 x2 y2 cx cy cx1 cy1))
	(vp-simd vp-min-rr `(,x1 ,y1) `(,bx ,by))
	(vp-simd vp-max-rr `(,x1 ,y1) `(,bx1 ,by1))
	(vp-simd vp-min-rr `(,x2 ,y2) `(,bx ,by))
	(vp-simd vp-max-rr `(,x2 ,y2) `(,bx1 ,by1))
	(vp-simd vp-shl-cr `(,+fp_shift) `(,cx ,cy ,cx1 ,cy1))

	(vpif `(,bx1 > ,cx) `(,by1 > ,cy) `(,bx < ,cx1) `(,by < ,cy1))
		(vp-simd vp-and-cr '((<< -1 +fp_shift)) `(,by ,by1))
		(vp-max-rr cy by)
		(vp-simd vp-add-cr '((<< 1 (- +fp_shift 1)) (<< 1 +fp_shift)) `(,by ,by1))
		(vp-min-rr cy1 by1)
		(vp-sub-rr cx cx1)
		(vp-asr-cr +fp_shift by1)
		(assign (list cx by cx1 by1) {bx, by, bx1, by1})

		; aX + bY + c = 0. a, b terms
		(vp-def (a0 a1 a2 c0 c1 c2 b0 b1 b2 x0 x1 x2 y0 y1 y2))
		(assign {x0, x1, x2, y0, y1 ,y2} (list x0 x1 x2 y0 y1 y2))
		(vp-simd vp-cpy-rr `(,y1 ,y2 ,y0) `(,a0 ,a1 ,a2))
		(vp-simd vp-cpy-rr `(,x0 ,x1 ,x2) `(,b0 ,b1 ,b2))
		(vp-simd vp-sub-rr `(,y0 ,y1 ,y2) `(,a0 ,a1 ,a2))
		(vp-simd vp-sub-rr `(,x1 ,x2 ,x0) `(,b0 ,b1 ,b2))
		(assign (list a0 a1 a2 b0 b1 b2) {a0, a1, a2, b0, b1, b2})

		; aX + bY + c = 0. c terms
		(vp-simd vp-mul-rr `(,a0 ,a1 ,a2) `(,x0 ,x1 ,x2))
		(vp-simd vp-mul-rr `(,b0 ,b1 ,b2) `(,y0 ,y1 ,y2))
		(vp-simd vp-cpy-rr `(,x0 ,x1 ,x2) `(,c0 ,c1 ,c2))
		(vp-simd vp-add-rr `(,y0 ,y1 ,y2) `(,c0 ,c1 ,c2))
		(vp-simd vp-mul-cr '(-1) `(,c0 ,c1 ,c2))

		; aX + bY + c = 0. starting c values
		(vp-def (a0 a1 a2 c0 c1 c2 b0 b1 b2 bx by))
		(assign {bx, by} (list bx by))
		(vp-simd vp-mul-rr `(,bx) `(,a0 ,a1 ,a2))
		(vp-simd vp-mul-rr `(,by) `(,b0 ,b1 ,b2))
		(vp-asr-cr +fp_shift by)
		(vp-simd vp-add-rr `(,a0 ,a1 ,a2) `(,c0 ,c1 ,c2))
		(vp-simd vp-add-rr `(,b0 ,b1 ,b2) `(,c0 ,c1 ,c2))
		(vp-simd vp-asr-cr `(,+fp_shift) `(,c0 ,c1 ,c2))
		(assign (list c0 c1 c2 by) {c0, c1, c2, by})

		;recip of a terms
		(vp-def (a0 a1 a2) '(:r3 :r4 :r5))
		(assign {a0, a1, a2} (list a0 a1 a2))
		(vpif `(,a0 /= 0))
			(vp-cpy-cr (<< -1 (* +fp_shift 2)) :r0)
			(vp-cpy-cr -1 :r2)
			(vp-div-rrr a0 :r2 :r0)
			(assign '(:r0) {a0})
		(endif)
		(vpif `(,a1 /= 0))
			(vp-cpy-cr (<< -1 (* +fp_shift 2)) :r0)
			(vp-cpy-cr -1 :r2)
			(vp-div-rrr a1 :r2 :r0)
			(assign '(:r0) {a1})
		(endif)
		(vpif `(,a2 /= 0))
			(vp-cpy-cr (<< -1 (* +fp_shift 2)) :r0)
			(vp-cpy-cr -1 :r2)
			(vp-div-rrr a2 :r2 :r0)
			(assign '(:r0) {a2})
		(endif)

		(vp-def (this bx1 x0 by c0 bx by1 x1 x2 c1 c2 i0 i1 i2) (method-input 'canvas :span_noclip))
		(assign {this, c0, c1, c2, bx, by, bx1, by1} (list this c0 c1 c2 bx by bx1 by1))
		(loop-start)
			(assign {a0, a1, a2} (list i0 i1 i2))
			(vp-simd vp-xor-rr `(,x0 ,x1 ,x2) `(,x0 ,x1 ,x2))
			(vp-simd vp-mul-rr `(,i0 ,i1 ,i2) `(,c0 ,c1 ,c2))
			(vp-simd vp-asr-cr `(,+fp_shift) `(,c0 ,c1 ,c2))
			(vpif `(,i0 <= 0))
				(vp-simd vp-cpy-rr `(,c0 ,bx1) `(,x0 ,c0))
			(endif)
			(vpif `(,i1 <= 0))
				(vp-simd vp-cpy-rr `(,c1 ,bx1) `(,x1 ,c1))
			(endif)
			(vpif `(,i2 <= 0))
				(vp-simd vp-cpy-rr `(,c2 ,bx1) `(,x2 ,c2))
			(endif)
			(vp-max-rr x1 x0) (vp-min-rr c1 c0)
			(vp-max-rr x2 x0) (vp-min-rr c2 c0)
			(vp-simd vp-add-rr `(,bx) `(,x0 ,c0))
			(vp-simd vp-asr-cr `(,+fp_shift) `(,x0 ,c0))
			(vpif `(,x0 < ,c0))
				(call 'canvas :span_noclip (list this 0x80 x0 by c0) (list this))
			(endif)
			(assign {b0, b1, b2, c0, c1, c2, bx, by, bx1, by1} (list i0 i1 i2 c0 c1 c2 bx by bx1 by1))
			(vp-simd vp-add-rr `(,i0 ,i1 ,i2) `(,c0 ,c1 ,c2))
			(vp-add-cr 1 by)
			(assign (list c0 c1 c2 by) {c0, c1, c2, by})
		(loop-until `(,by >= ,by1))
	(endif)

	(exit 'canvas :ftri {this})
	(pop-scope)
	(return)

(def-func-end)
