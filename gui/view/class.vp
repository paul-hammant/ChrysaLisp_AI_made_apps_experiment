(include "lib/asm/func.inc")
(include "service/gui/class.inc")
(include "././region/class.inc")
(include "./class.inc")
(include "class/list/class.inc")
(include "class/sym/class.inc")
(include "class/lisp/class.inc")
(include "class/func/class.inc")
(include "sys/task/class.inc")
(include "sys/statics/class.inc")

(gen-create 'view)
(gen-vtable 'view)

(def-method 'view :init)
	;inputs
	;:r0 = view object (ptr)
	;:r1 = vtable (pptr)
	;outputs
	;:r0 = view object (ptr)
	;:r1 = 0 if error, else ok
	;trashes
	;:r1-:r14

	;init parent
	(s-call 'view :init '(:r0 :r1 0 1) '(:r0 :r1))
	(vpif '(:r1 /= 0))
		;init myself
		(vp-push :r0)
		(call 'sys_mem :fill `((& :r0 view_start) ,(- view_size view_start) 0))
		(vp-pop :r0)
		(fn-bind 'sys/statics/statics :r1)
		(assign '((:r1 statics_gui_next_id)) '(:r2))
		(vp-sub-cr 1 :r2)
		(assign '(:r2 :r2) '((:r1 statics_gui_next_id) (:r0 view_id)))
		(vp-cpy-cr view_flag_solid :r1)
		(assign '(:r1 (& :r0 view_list)) '((:r0 view_flags) :r1))
		(lh-init :r1 :r2)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'view :deinit)
	;inputs
	;:r0 = view object (ptr)
	;outputs
	;:r0 = view object (ptr)
	;trashes
	;:r1-:r14

	;save object
	(vp-push :r0)

	;sub view from any parent
	(call 'view :sub '(:r0))

	;deref any child views
	(assign '((:rsp 0)) '(:r0))
	(loop-list-forward :r0 view_list :r0 :r1)
		(vp-sub-cr view_node :r0)
		(vp-push :r1)
		(call 'view :sub '(:r0))
		(call 'view :deref '(:r0))
		(vp-pop :r1)
	(loop-end)

	;free view object data
	(fn-bind 'sys/statics/statics :r0)
	(vp-add-cr statics_gui_rect_heap :r0)
	(assign '((:rsp 0)) '(:r1))
	(call 'region :free '(:r0 (& :r1 view_dirty_region)))
	(assign '((:rsp 0)) '(:r1))
	(call 'region :free '(:r0 (& :r1 view_opaque_region)))

	;deinit parent
	(vp-pop :r0)
	(s-jump 'view :deinit '(:r0))

(def-func-end)

(def-method 'view :add_front)
	;inputs
	;:r0 = view object (ptr)
	;:r1 = child view object (ptr)
	;outputs
	;:r0 = view object (ptr)
	;trashes
	;:r1-:r3

	;remove from any existing parent
	(vp-cpy-rr :r0 :r3)
	(call 'view :sub '(:r1))

	;add to parent
	(assign '(:r3) '((:r0 hmap_parent)))
	(vp-lea-i :r0 view_node :r2)
	(vp-cpy-rr :r3 :r0)
	(vp-add-cr view_list :r3)
	(lh-add-at-head :r3 :r2 :r1)
	(vp-ret)

(def-func-end)

(def-method 'view :add_back)
	;inputs
	;:r0 = view object (ptr)
	;:r1 = child view object (ptr)
	;outputs
	;:r0 = view object (ptr)
	;trashes
	;:r1-:r3

	;remove from any existing parent
	(vp-cpy-rr :r0 :r3)
	(call 'view :sub '(:r1))

	;add to parent
	(assign '(:r3) '((:r0 hmap_parent)))
	(vp-lea-i :r0 view_node :r2)
	(vp-cpy-rr :r3 :r0)
	(vp-add-cr view_list :r3)
	(lh-add-at-tail :r3 :r2 :r1)
	(vp-ret)

(def-func-end)

(def-method 'view :sub)
	;inputs
	;:r0 = view object (ptr)
	;outputs
	;:r0 = view object (ptr)
	;trashes
	;:r1-:r2

	;test parent
	(assign '((:r0 hmap_parent)) '(:r1))
	(vpif '(:r1 /= 0))
		;clear parent field
		(vp-xor-rr :r2 :r2)
		(assign '(:r2) '((:r0 hmap_parent)))

		;remove from parent list
		(vp-lea-i :r0 view_node :r2)
		(ln-remove-node :r2 :r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'view :hide)
	;inputs
	;:r0 = view object (ptr)
	;outputs
	;:r0 = view object (ptr)
	;trashes
	;:r1-:r14

	;test parent
	(assign '((:r0 hmap_parent)) '(:r1))
	(vpif '(:r1 /= 0))
		(vp-push :r0)

		;add dirty
		(assign '((& :r0 view_dirty_region) 1 0 0 (:r0 view_w) (:r0 view_h)) '(:r1 :r2 :r7 :r8 :r9 :r10))
		(fn-bind 'sys/statics/statics :r0)
		(assign '(:r2) '((:r0 statics_gui_dirty_flag)))
		(vp-add-cr statics_gui_rect_heap :r0)
		(call 'region :paste_rect '(:r0 :r1 :r7 :r8 :r9 :r10))

		;temp view for update
		(call 'view :create :nil '(:r1))
		(fn-bind 'sys/statics/statics :r0)
		(call 'list :push_back '((:r0 statics_gui_temps) :r1) '(_ :r1 _ _))

		;remove from parent list and splice in temp
		(vp-pop :r0)
		(vp-lea-i :r0 view_node :r2)
		(vp-lea-i :r1 view_node :r3)
		(ln-replace-node :r2 :r3 :r4)

		;splice over dirty region etc
		(assign '(0 (:r0 hmap_parent) (:r0 view_dirty_region) (:r0 view_x) (:r0 view_y) (:r0 view_w) (:r0 view_h))
			'(:r4 :r3 :r2 :r7 :r8 :r9 :r10))
		(assign '(:r3 :r2 :r7 :r8 :r9 :r10)
			'((:r1 hmap_parent) (:r1 view_dirty_region) (:r1 view_x) (:r1 view_y) (:r1 view_w) (:r1 view_h)))

		;clear parent field etc
		(assign '(:r4 :r4 :r4) '((:r1 view_flags) (:r0 hmap_parent) (:r0 view_dirty_region)))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'view :to_front)
	;inputs
	;:r0 = view object (ptr)
	;outputs
	;:r0 = view object (ptr)
	;trashes
	;:r1-:r14

	(assign '((:r0 hmap_parent)) '(:r5))
	(vpif '(:r5 /= 0))
		;are we already front ?
		(ln-get-pred :r0 view_node :r3)
		(vp-cpy-rr :r3 :r2)
		(loop-start)
			(vp-cpy-rr :r3 :r1)
			(ln-get-pred :r3 0 :r3)
			(breakif '(:r3 = 0))
			(vp-lea-i :r1 (neg view_node) :r4)
			(assign '((:r4 view_flags)) '(:r4))
			(vp-and-cr view_flag_at_front :r4)
		(loop-until '(:r4 /= 0))
		(vpif '(:r1 /= :r2))
			;no, so move to back of front item
			(vp-push :r1 :r5)
			(vp-lea-i :r0 view_node :r1)
			(ln-remove-node :r1 :r2)
			(call 'view :set_flags '(:r0 view_flag_dirty_all view_flag_dirty_all) '(:r0 _))
			(vp-pop :r1 :r5)
			(vp-lea-i :r0 view_node :r2)
			(ln-add-node-after :r1 :r2 :r3)
			(assign '(:r5) '((:r0 hmap_parent)))
		(endif)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'view :to_back)
	;inputs
	;:r0 = view object (ptr)
	;outputs
	;:r0 = view object (ptr)
	;trashes
	;:r1-:r14

	(assign '((:r0 hmap_parent)) '(:r5))
	(vpif '(:r5 /= 0))
		;are we already back ?
		(ln-get-succ :r0 view_node :r3)
		(vp-cpy-rr :r3 :r2)
		(loop-start)
			(vp-cpy-rr :r3 :r1)
			(ln-get-succ :r3 0 :r3)
			(breakif '(:r3 = 0))
			(vp-lea-i :r1 (neg view_node) :r4)
			(assign '((:r4 view_flags)) '(:r4))
			(vp-and-cr view_flag_at_back :r4)
		(loop-until '(:r4 /= 0))
		(vpif '(:r1 /= :r2))
			;no, so move to front of back item
			(vp-push :r1 :r5)
			(call 'view :hide '(:r0) '(:r0))
			(vp-pop :r1 :r5)
			(vp-lea-i :r0 view_node :r2)
			(ln-add-node-before :r1 :r2 :r3)
			(assign '(:r5) '((:r0 hmap_parent)))
		(endif)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'view :forward_tree)
	;inputs
	;:r0 = view object (ptr)
	;:r1 = user data pointer
	;:r2 = down callback (ptr)
	;:r3 = up callback (ptr)
	;outputs
	;:r0 = view object (ptr)
	;trashes
	;...
		;callback api
		;inputs
		;:r0 = view object (ptr)
		;:r1 = user data pointer (ptr)
		;outputs
		;:r0 = view object (ptr)
		;:r1 = 0 if should not descend after down callback
		;trashes
		;...

	(def-struct local 0
		(ptr this data down up))

	(vp-alloc local_size)
	(assign '(:r0 :r1 :r2 :r3 :r0) '((:rsp local_this) (:rsp local_data) (:rsp local_down) (:rsp local_up) :r1))
	(loop-start)
	(vp-label 'down_loop_ctx)
		(vp-cpy-rr :r1 :r0)

		;down callback
		(assign '((:rsp local_data)) '(:r1))
		(vp-call-i :rsp local_down)
		(breakif '(:r1 = 0))

		;down to child
		(lh-get-head :r0 view_list :r1)
		(vp-sub-cr view_node :r1)

		(ln-get-succ :r1 view_node :r2)
	(loop-until '(:r2 = 0))
	(loop-start)
		;up callback
		(assign '((:rsp local_data)) '(:r1))
		(vp-call-i :rsp local_up)

		;back at root ?
		(assign '((:rsp local_this)) '(:r2))
		(breakif '(:r0 = :r2))

		;across to sibling
		(ln-get-succ :r0 view_node :r1)
		(vp-sub-cr view_node :r1)

		(ln-get-succ :r1 view_node :r2)
		(gotoif '(:r2 /= 0) 'down_loop_ctx)

		;up to parent
		(assign '((:r0 hmap_parent)) '(:r0))
	(loop-end)

	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'view :backward_tree)
	;inputs
	;:r0 = view object (ptr)
	;:r1 = user data pointer
	;:r2 = down callback (ptr)
	;:r3 = up callback (ptr)
	;outputs
	;:r0 = view object (ptr)
	;trashes
	;...
		;callback api
		;inputs
		;:r0 = view object (ptr)
		;:r1 = user data pointer (ptr)
		;outputs
		;:r0 = view object (ptr)
		;:r1 = 0 if should not descend after down callback
		;trashes
		;...

	(def-struct local 0
		(ptr this data down up))

	(vp-alloc local_size)
	(assign '(:r0 :r1 :r2 :r3 :r0) '((:rsp local_this) (:rsp local_data) (:rsp local_down) (:rsp local_up) :r1))
	(loop-start)
	(vp-label 'down_loop_ctx)
		(vp-cpy-rr :r1 :r0)

		;down callback
		(assign '((:rsp local_data)) '(:r1))
		(vp-call-i :rsp local_down)
		(breakif '(:r1 = 0))

		;down to child
		(lh-get-tail :r0 view_list :r1)
		(vp-sub-cr view_node :r1)

		(ln-get-pred :r1 view_node :r2)
	(loop-until '(:r2 = 0))
	(loop-start)
		;up callback
		(assign '((:rsp local_data)) '(:r1))
		(vp-call-i :rsp local_up)

		;back at root ?
		(assign '((:rsp local_this)) '(:r2))
		(breakif '(:r0 = :r2))

		;across to sibling
		(ln-get-pred :r0 view_node :r1)
		(vp-sub-cr view_node :r1)

		(ln-get-pred :r1 view_node :r2)
		(gotoif '(:r2 /= 0) 'down_loop_ctx)

		;up to parent
		(assign '((:r0 hmap_parent)) '(:r0))
	(loop-end)

	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'view :draw)
	;inputs
	;:r0 = view object (ptr)
	;outputs
	;:r0 = view object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this args))

	(vp-alloc local_size)
	(entry 'view :draw '((:rsp local_this)))

	(call 'sym :get_static_sym '(static_sym_vtable) '(:r1))
	(call 'view :find '((:rsp local_this) :r1) '(_ :r2 _))
	(vpif '(:r2 /= 0))
		(call 'sym :get_static_sym '(static_sym_draw) '(:r1))
		(call 'view :find '((:r2 +ptr_size) :r1) '(_ :r1 _))
		(vpif '(:r1 /= 0))
			;jump to VP draw method ?
			(assign '((:r1 +ptr_size)) '(:r1))
			(f-bind 'func :vtable :r0)
			(assign '((:r1 obj_vtable)) '(:r2))
			(vpif '(:r0 = :r2))
				;VP :draw method
				(assign '((:rsp local_this)) '(:r0))
				(vp-call-i :r1 num_value)
			(else)
				;Lisp :draw method
				(assign '(:r1) '(:r13))
				(call 'list :create :nil '(:r0))
				(assign '((:rsp local_this)) '(:r1))
				(class/obj/ref :r1 :r2)
				(call 'list :push_back '(:r0 :r1) '(:r1 _ _ _))
				(assign '(:r1) '((:rsp local_args)))
				(fn-bind 'sys/statics/statics :r0)
				(assign '((:r0 statics_sys_task_current_tcb)) '(:r0))
				(assign '((:r0 tk_node_lisp)) '(:r0))
				(vpif '(:r0 /= 0))
					(call 'lisp :repl_apply '(:r0 :r1 :r13) '(_ :r1))
					(call 'obj :deref '(:r1))
				(endif)
				(call 'obj :deref '((:rsp local_args)))
			(endif)
		(endif)
	(endif)

	(exit 'view :draw '((:rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'view :find_id)
	;inputs
	;:r0 = view object (ptr)
	;:r1 = target id (long)
	;outputs
	;:r0 = view object (ptr)
	;:r1 = 0 if not found, else view object (ptr)
	;trashes
	;:r1-:r3

	(def-struct local 0
		(ptr this view)
		(ulong id))

	;save inputs
	(vp-alloc local_size)
	(entry 'view :find_id '((:rsp local_this) (:rsp local_id)))
	(vp-xor-rr :r1 :r1)
	(assign '(:r1) '((:rsp local_view)))

	;iterate through views front to back
	(call 'view :forward_tree '(:r0 :rsp ($ down_callback) ($ up_callback)))

	(exit 'view :find_id '((:rsp local_this) (:rsp local_view)))
	(vp-free local_size)
	(vp-ret)

(vp-label 'down_callback)
	(entry 'view :forward_tree_callback '(:r0 :r1))

	(assign '((:r1 local_view)) '(:r2))
	(gotoif '(:r2 /= 0) 'down_exit)
	(assign '((:r0 view_id) (:r1 local_id)) '(:r2 :r3))
	(vpif '(:r2 = :r3))
		(assign '(:r0) '((:r1 local_view)))
	(vp-label 'down_exit)
		(vp-xor-rr :r1 :r1)
	(endif)

(vp-label 'up_callback)
	(exit 'view :forward_tree_callback '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'view :hit)
	;inputs
	;:r0 = view object (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;outputs
	;:r0 = view object (ptr)
	;:r1 = 0 if not, else hit
	;trashes
	;:r1

	(vpif '(:r7 >= 0) '(:r8 >= 0))
		(assign '((:r0 view_w)) '(:r1))
		(vpif '(:r7 < :r1))
			(assign '((:r0 view_h)) '(:r1))
			(vpif '(:r8 < :r1))
				;hit ?
				(assign '((:r0 view_flags)) '(:r1))
				(vp-and-cr view_flag_solid :r1)
				(vp-ret)
			(endif)
		(endif)
	(endif)
	(vp-xor-rr :r1 :r1)
	(vp-ret)

(def-func-end)

(def-method 'view :hit_tree)
	;inputs
	;:r0 = view object (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;outputs
	;:r0 = view object (ptr)
	;:r1 = 0 if not hit, else hit view object (ptr)
	;:r7 = x relative to hit (pixels)
	;:r8 = y relative to hit (pixels)
	;trashes
	;:r1-:r3

	(def-struct local 0
		(ptr this hit))

	;save inputs
	(vp-alloc local_size)
	(assign '(:r0) '((:rsp local_this)))
	(vp-xor-rr :r1 :r1)
	(assign '(:r1) '((:rsp local_hit)))

	;iterate through views front to back
	(call 'view :forward_tree '(:r0 :rsp ($ hit_down_callback) ($ hit_up_callback)))

	(assign '((:rsp local_this) (:rsp local_hit)) '(:r0 :r1))
	(vp-free local_size)
	(vp-ret)

(vp-label 'hit_down_callback)
	(assign '((:r0 view_x)) '(:r1))
	(vp-sub-rr :r1 :r7)
	(assign '((:r0 view_y)) '(:r1))
	(vp-sub-rr :r1 :r8)
	(d-jump 'view :hit '(:r0 :r7 :r8))

(vp-label 'hit_up_callback)
	(assign '(:r1 (:r1 local_hit)) '(:r2 :r1))
	(vpif '(:r1 = 0))
		(call 'view :hit '(:r0 :r7 :r8) '(:r0 :r1))
		(vpif '(:r1 /= 0))
			(assign '(:r0) '((:r2 local_hit)))
			(vp-ret)
		(endif)
		(assign '((:r0 view_x)) '(:r1))
		(vp-add-rr :r1 :r7)
		(assign '((:r0 view_y)) '(:r1))
		(vp-add-rr :r1 :r8)
		(vp-xor-rr :r1 :r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'view :set_flags)
	;inputs
	;:r0 = view object (ptr)
	;:r1 = flag values (ulong)
	;:r2 = flag mask (ulong)
	;outputs
	;:r0 = view object (ptr)
	;:r1 = new flag values (ulong)
	;trashes
	;:r1-:r4

	(entry 'view :set_flags '(:r0 :r1 :r2))

	(assign '((:r0 view_flags)) '(:r3))
	(vp-xor-cr -1 :r2)
	(vp-and-rr :r2 :r3)
	(vp-or-rr :r3 :r1)
	(assign '((@ sys/statics/statics) :r1 :r1) '(:r2 :r3 (:r0 view_flags)))
	(assign '((:r2 statics_gui_dirty_flag)) '(:r4))
	(vp-and-cr view_flag_dirty_all :r3)
	(vp-or-rr :r4 :r3)
	(assign '(:r3) '((:r2 statics_gui_dirty_flag)))

	(exit 'view :set_flags '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'view :ref_prop)
	;inputs
	;:r0 = view object (ptr)
	;:r1 = static sym num (uint)
	;outputs
	;:r0 = view object (ptr)
	;:r1 = 0 else, property object (ptr)
	;trashes
	;:r1-:r14

	(entry 'view :ref_prop '(:r0 :r1))

	(call 'sym :get_static_sym '(:r1) '(:r1))
	(call 'view :get '(:r0 :r1) '(:r0 :r1))

	(exit 'view :ref_prop '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'view :get_prop)
	;inputs
	;:r0 = view object (ptr)
	;:r1 = static sym num (uint)
	;outputs
	;:r0 = view object (ptr)
	;:r1 = 0 else, property object (ptr)
	;trashes
	;:r1-:r14

	(entry 'view :get_prop '(:r0 :r1))

	(call 'view :ref_prop '(:r0 :r1) '(:r0 :r1))
	(vpif '(:r1 /= 0))
		(class/obj/ref :r1 :r2 -1)
	(endif)

	(exit 'view :get_prop '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'view :get_long_prop)
	;inputs
	;:r0 = view object (ptr)
	;:r1 = static sym num (uint)
	;outputs
	;:r0 = view object (ptr)
	;:r1 = property value (long)
	;trashes
	;:r1-:r14

	(entry 'view :get_long_prop '(:r0 :r1))

	(call 'view :get_prop '(:r0 :r1) '(:r0 :r1))
	(vpif '(:r1 /= 0))
		(assign '((:r1 num_value)) '(:r1))
	(endif)

	(exit 'view :get_long_prop '(:r0 :r1))
	(vp-ret)

(def-func-end)
