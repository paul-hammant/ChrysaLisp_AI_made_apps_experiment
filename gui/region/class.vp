(include "lib/asm/func.inc")
(include "./class.inc")

(defmacro rect-overlap (a b c d e f g h i j k l m n o p)
	`(progn
		;jump to correct overlap code
		(gotoif `(,x >= ,ix) 'rect_split1)
		(gotoif `(,y >= ,iy) 'rect_split2)
		(gotoif `(,ix1 >= ,x1) 'rect_split4)
		(gotoif `(,iy1 >= ,y1) 'rect_xyx1)
		;x, y, x1, y1 inside
		~a
	(vp-label 'rect_split1)
		;jump to correct overlap code
		(gotoif `(,y >= ,iy) 'rect_split3)
		(gotoif `(,ix1 >= ,x1) 'rect_split5)
		(gotoif `(,iy1 >= ,y1) 'rect_yx1)
		;y, x1, y1 inside
		~b
	(vp-label 'rect_split2)
		;jump to correct overlap code
		(gotoif `(,ix1 >= ,x1) 'rect_split6)
		(gotoif `(,iy1 >= ,y1) 'rect_xx1)
		;x, x1, y1 inside
		~c
	(vp-label 'rect_split3)
		;jump to correct overlap code
		(gotoif `(,ix1 >= ,x1) 'rect_split7)
		(gotoif `(,iy1 >= ,y1) 'rect_x1)
		;x1, y1 inside
		~d
	(vp-label 'rect_split4)
		;jump to correct overlap code
		(gotoif `(,iy1 >= ,y1) 'rect_xy)
		;x, y, y1 inside
		~e
	(vp-label 'rect_split5)
		;jump to correct overlap code
		(gotoif `(,iy1 >= ,y1) 'rect_y)
		;y, y1 inside
		~f
	(vp-label 'rect_split6)
		;jump to correct overlap code
		(gotoif `(,iy1 >= ,y1) 'rect_x)
		;x, y1 inside
		~g
	(vp-label 'rect_split7)
		;jump to correct overlap code
		(gotoif `(,iy1 >= ,y1) 'rect_encl)
		;y1 inside
		~h
	(vp-label 'rect_xyx1)
		;x, y, x1 inside
		~i
	(vp-label 'rect_encl)
		;region is enclosed
		~j
	(vp-label 'rect_x)
		;x inside
		~k
	(vp-label 'rect_y)
		;y inside
		~l
	(vp-label 'rect_xy)
		;x, y inside
		~m
	(vp-label 'rect_x1)
		;x1 inside
		~n
	(vp-label 'rect_xx1)
		;x, x1 inside
		~o
	(vp-label 'rect_yx1)
		;y, x1 inside
		~p))

(def-method 'region :copy_rect)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r2 = dest region listhead (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r4, :r11-:r14

	(vp-def (heap sregion dregion rec srec ix iy ix1 iy1 x y x1 y1 tmp)
		'(:r0 :r1 :r3 :r1 :r4 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14 :r2))

	(entry 'region :copy_rect `(,heap ,sregion ,dregion ,ix ,iy ,ix1 ,iy1))

	;check for any obvious errors in inputs
	(vpif `(,ix1 > ,ix) `(,iy1 > ,iy))
		;run through source region list
		(loop-flist sregion 0 srec srec)
			;not in contact ?
			(vp-simd vp-cpy-ir-i `(,srec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1) `(,x ,y ,x1 ,y1))
			(continueif `(,x >= ,ix1) `(,y >= ,iy1) `(,ix >= ,x1) `(,iy >= ,y1))

			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec tmp)

		(rect-overlap
			(;x, y, x1, y1 inside
			(vp-simd vp-cpy-ri-i `(,ix ,iy ,ix1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y, x1, y1 inside
			(vp-simd vp-cpy-ri-i `(,x ,iy ,ix1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, x1, y1 inside
			(vp-simd vp-cpy-ri-i `(,ix ,y ,ix1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x1, y1 inside
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y, y1 inside
			(vp-simd vp-cpy-ri-i `(,ix ,iy ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y, y1 inside
			(vp-simd vp-cpy-ri-i `(,x ,iy ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y1 inside
			(vp-simd vp-cpy-ri-i `(,ix ,y ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y1 inside
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y, x1 inside
			(vp-simd vp-cpy-ri-i `(,ix ,iy ,ix1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;region is enclosed
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x inside
			(vp-simd vp-cpy-ri-i `(,ix ,y ,x1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y inside
			(vp-simd vp-cpy-ri-i `(,x ,iy ,x1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y inside
			(vp-simd vp-cpy-ri-i `(,ix ,iy ,x1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x1 inside
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, x1 inside
			(vp-simd vp-cpy-ri-i `(,ix ,y ,ix1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y, x1 inside
			(vp-simd vp-cpy-ri-i `(,x ,iy ,ix1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))))
		(loop-end)
	(endif)

	(exit 'region :copy_rect `(,heap))
	(vp-ret)

(def-func-end)

(def-method 'region :cut_rect)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r2 = dest region listhead (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r6, :r11-:r14

	(vp-def (heap sregion dregion rec srec prec ix iy ix1 iy1 x y x1 y1 tmp)
		'(:r0 :r5 :r4 :r1 :r3 :r6 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14 :r2))

	(entry 'region :cut_rect `(,heap ,sregion ,dregion ,ix ,iy ,ix1 ,iy1))

	;check for any obvious errors in inputs
	(vpif `(,ix1 > ,ix) `(,iy1 > ,iy))
		;run through source region list
		(loop-flist sregion 0 srec prec)
			;not in contact ?
			(vp-simd vp-cpy-ir-i `(,srec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1) `(,x ,y ,x1 ,y1))
			(continueif `(,x >= ,ix1) `(,y >= ,iy1) `(,ix >= ,x1) `(,iy >= ,y1))

		(rect-overlap
			(;x, y, x1, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix ,iy ,ix1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;right part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix1 ,iy ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,iy ,ix ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y, x1, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,iy ,ix1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;right part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix1 ,iy ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, x1, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix ,y ,ix1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;right part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix1 ,y ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x1, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;right part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix1 ,y ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix ,iy ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,iy ,ix ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,iy ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix ,y ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y, x1 inside
			;left part
			(vp-simd vp-cpy-ri-i `(,iy ,ix) `(,srec) `(,rect_y ,rect_x1))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix ,iy ,ix1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;right part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix1 ,iy ,x1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;region is enclosed
			(vp-cpy-rr srec rec)
			(ln-remove-fnode srec prec)
			(ln-add-fnode dregion 0 rec prec)
			(continue))

			(;x inside
			;left part
			(vp-simd vp-cpy-ri-i `(,ix) `(,srec) `(,rect_x1))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix ,y ,x1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y inside
			;top part
			(vp-simd vp-cpy-ri-i `(,iy) `(,srec) `(,rect_y1))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,iy ,x1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y inside
			;left part
			(vp-simd vp-cpy-ri-i `(,iy ,ix) `(,srec) `(,rect_y ,rect_x1))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix ,iy ,x1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x1 inside
			;right part
			(vp-simd vp-cpy-ri-i `(,ix1) `(,srec) `(,rect_x))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, x1 inside
			;right part
			(vp-simd vp-cpy-ri-i `(,ix1) `(,srec) `(,rect_x))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,ix ,y ,ix1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y, x1 inside
			;right part
			(vp-simd vp-cpy-ri-i `(,ix1 ,iy) `(,srec) `(,rect_x ,rect_y))
			;cut part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,iy ,ix1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec prec)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))))
		(loop-end)
	(endif)

	(exit 'region :cut_rect `(,heap))
	(vp-ret)

(def-func-end)

(def-method 'region :paste_rect)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = dest region listhead (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r14

	(vp-def (heap dregion rec drec prec ix iy ix1 iy1 x y x1 y1 tmp)
		'(:r0 :r4 :r1 :r6 :r5 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14 :r2))

	(entry 'region :paste_rect `(,heap ,dregion ,ix ,iy ,ix1 ,iy1))

	;check for any obvious errors in inputs
	(vpif `(,ix1 > ,ix) `(,iy1 > ,iy))
		;run through source region list
		(loop-flist dregion 0 drec prec)
			;not in contact ?
			(vp-simd vp-cpy-ir-i `(,drec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1) `(,x ,y ,x1 ,y1))
			(continueif `(,x >= ,ix1) `(,y >= ,iy1) `(,ix >= ,x1) `(,iy >= ,y1))

		(rect-overlap
			(;x, y, x1, y1 inside
			(exit 'region :paste_rect `(,heap))
			(vp-ret))

			(;y, x1, y1 inside
			(vp-cpy-rr x ix1)
			(continue))

			(;x, x1, y1 inside
			(vp-cpy-rr y iy1)
			(continue))

			(;x1, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,drec) `(,rect_y))
			;right part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,ix1 ,y ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y, y1 inside
			(vp-cpy-rr x1 ix)
			(continue))

			(;y, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,drec) `(,rect_y))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,drec) `(,rect_y))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,drec) `(,rect_y))
			(continue))

			(;x, y, x1 inside
			(vp-cpy-rr y1 iy)
			(continue))

			(;region is enclosed
			(vp-cpy-rr drec rec)
			(ln-remove-fnode drec prec)
			(hp-freecell heap rec tmp)
			(continue))

			(;x inside
			;left part
			(vp-simd vp-cpy-ri-i `(,ix) `(,drec) `(,rect_x1))
			(continue))

			(;y inside
			;top part
			(vp-simd vp-cpy-ri-i `(,iy) `(,drec) `(,rect_y1))
			(continue))

			(;x, y inside
			;left part
			(vp-simd vp-cpy-ri-i `(,iy ,ix) `(,drec) `(,rect_y ,rect_x1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x1 inside
			;right part
			(vp-simd vp-cpy-ri-i `(,ix1) `(,drec) `(,rect_x))
			(continue))

			(;x, x1 inside
			;right part
			(vp-simd vp-cpy-ri-i `(,ix1) `(,drec) `(,rect_x))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y, x1 inside
			;right part
			(vp-simd vp-cpy-ri-i `(,ix1 ,iy) `(,drec) `(,rect_x ,rect_y))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode dregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))))
		(loop-end)

		;create new region ?
		(vpif `(,ix /= ,ix1) `(,iy /= ,iy1))
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (breakif `(,rec = 0))

			(ln-add-fnode dregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,ix ,iy ,ix1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
		(endif)
	(endif)

	(exit 'region :paste_rect `(,heap))
	(vp-ret)

(def-func-end)

(def-method 'region :remove_rect)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r5, :r11-:r14

	(vp-def (heap sregion rec srec prec ix iy ix1 iy1 x y x1 y1 tmp)
		'(:r0 :r4 :r1 :r3 :r5 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14 :r2))

	(entry 'region :remove_rect `(,heap ,sregion ,ix ,iy ,ix1 ,iy1))

	;check for any obvious errors in inputs
	(vpif `(,ix1 > ,ix) `(,iy1 > ,iy))
		;run through source region list
		(loop-flist sregion 0 srec prec)
			;not in contact ?
			(vp-simd vp-cpy-ir-i `(,srec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1) `(,x ,y ,x1 ,y1))
			(continueif `(,x >= ,ix1) `(,y >= ,iy1) `(,ix >= ,x1) `(,iy >= ,y1))

		(rect-overlap
			(;x, y, x1, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;right part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,ix1 ,iy ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,iy ,ix ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y, x1, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;right part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,ix1 ,iy ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, x1, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;right part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,ix1 ,y ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x1, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;right part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,ix1 ,y ,x1 ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,iy ,ix ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x, y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix ,iy1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y1 inside
			;bottom part
			(vp-simd vp-cpy-ri-i `(,iy1) `(,srec) `(,rect_y))
			(continue))

			(;x, y, x1 inside
			;left part
			(vp-simd vp-cpy-ri-i `(,iy ,ix) `(,srec) `(,rect_y ,rect_x1))
			;right part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,ix1 ,iy ,x1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;region is enclosed
			(vp-cpy-rr srec rec)
			(ln-remove-fnode srec prec)
			(hp-freecell heap rec tmp)
			(continue))

			(;x inside
			;left part
			(vp-simd vp-cpy-ri-i `(,ix) `(,srec) `(,rect_x1))
			(continue))

			(;y inside
			;top part
			(vp-simd vp-cpy-ri-i `(,iy) `(,srec) `(,rect_y1))
			(continue))

			(;x, y inside
			;left part
			(vp-simd vp-cpy-ri-i `(,iy ,ix) `(,srec) `(,rect_y ,rect_x1))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;x1 inside
			;right part
			(vp-simd vp-cpy-ri-i `(,ix1) `(,srec) `(,rect_x))
			(continue))

			(;x, x1 inside
			;right part
			(vp-simd vp-cpy-ri-i `(,ix1) `(,srec) `(,rect_x))
			;left part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,ix ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
			(continue))

			(;y, x1 inside
			;right part
			(vp-simd vp-cpy-ri-i `(,ix1 ,iy) `(,srec) `(,rect_x ,rect_y))
			;top part
			(call 'sys_heap :alloc `(,heap) `(,heap ,rec))
			; (continueif `(,rec = 0))
			(ln-add-fnode sregion 0 rec tmp)
			(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,iy) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))))
		(loop-end)
	(endif)

	(exit 'region :remove_rect `(,heap))
	(vp-ret)

(def-func-end)

(def-method 'region :remove_region)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r2 = dest region listhead (ptr)
	;:r7 = x translation (pixels)
	;:r8 = y translation (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr dlist)
		(int dx dy))

	(vp-def (heap region rec x y x1 y1 dx dy)
		'(:r0 :r1 :r6 :r7 :r8 :r9 :r10 :r11 :r12))

	;save inputs
	(vp-alloc local_size)
	(entry 'region :remove_region `(,heap ,region (:rsp local_dlist) (:rsp local_dx) (:rsp local_dy)))

	;run through source region list
	(loop-flist region 0 rec rec)
		(vp-simd vp-cpy-ir-i '(:rsp) `(,local_dx ,local_dy) `(,dx ,dy))
		(vp-simd vp-cpy-ir-i `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1) `(,x ,y ,x1 ,y1))
		(vp-simd vp-add-rr `(,dx ,dy ,dx ,dy) `(,x ,y ,x1 ,y1))
		(call 'region :remove_rect `(,heap (:rsp local_dlist) ,x ,y ,x1 ,y1))
	(loop-end)

	(exit 'region :remove_region `(,heap))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'region :copy_region)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r2 = dest region listhead (ptr)
	;:r3 = copy region listhead (ptr)
	;:r7 = x translation (pixels)
	;:r8 = y translation (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr slist)
		(int dx dy))

	(vp-def (heap dregion cregion rec x y x1 y1 dx dy)
		'(:r0 :r6 :r3 :r5 :r7 :r8 :r9 :r10 :r11 :r12))

	;save inputs
	(vp-alloc local_size)
	(entry 'region :copy_region `(,heap (:rsp local_slist) ,dregion ,cregion (:rsp local_dx) (:rsp local_dy)))

	;run through copy region list
	(loop-flist cregion 0 rec rec)
		(vp-simd vp-cpy-ir-i '(:rsp) `(,local_dx ,local_dy) `(,dx ,dy))
		(vp-simd vp-cpy-ir-i `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1) `(,x ,y ,x1 ,y1))
		(vp-simd vp-add-rr `(,dx ,dy ,dx ,dy) `(,x ,y ,x1 ,y1))
		(call 'region :copy_rect `(,heap (:rsp local_slist) ,dregion ,x ,y ,x1 ,y1))
	(loop-end)

	(exit 'region :copy_region `(,heap))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'region :paste_region)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r2 = dest region listhead (ptr)
	;:r7 = x translation (pixels)
	;:r8 = y translation (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr node dlist)
		(int dx dy))

	(vp-def (heap region rec x y x1 y1 dx dy)
		'(:r0 :r1 :r1 :r7 :r8 :r9 :r10 :r11 :r12))

	;save inputs
	(vp-alloc local_size)
	(entry 'region :paste_region `(,heap ,region (:rsp local_dlist) (:rsp local_dx) (:rsp local_dy)))

	;run through source region list
	(loop-flist region 0 rec rec)
		(assign `(,rec) '((:rsp local_node)))
		(vp-simd vp-cpy-ir-i '(:rsp) `(,local_dx ,local_dy) `(,dx ,dy))
		(vp-simd vp-cpy-ir-i `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1) `(,x ,y ,x1 ,y1))
		(vp-simd vp-add-rr `(,dx ,dy ,dx ,dy) `(,x ,y ,x1 ,y1))
		(call 'region :paste_rect `(,heap (:rsp local_dlist) ,x ,y ,x1 ,y1))
		(assign '((:rsp local_node)) `(,rec))
	(loop-end)

	(exit 'region :paste_region `(,heap))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'region :clip_rect)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;outputs
	;:r0 = region heap (ptr)
	;trashes
	;:r1-:r3, :r11-:r14

	(vp-def (heap region rec trec prec cx cy cx1 cy1 x y x1 y1)
		'(:r0 :r1 :r1 :r2 :r3 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14))

	(entry 'region :clip_rect `(,heap ,region ,cx ,cy ,cx1 ,cy1))

	;check for any obvious errors in inputs
	(vpif `(,cx1 > ,cx) `(,cy1 > ,cy))
		;run through source region list
		(loop-flist region 0 rec prec 'node_loop)
			(vp-simd vp-cpy-ir-i `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1) `(,x ,y ,x1 ,y1))
			(vpif `(,x < ,cx1) `(,y < ,cy1) `(,x1 > ,cx) `(,y1 > ,cy))
				;clip region
				(vp-simd vp-max-rr `(,cx ,cy) `(,x ,y))
				(vp-simd vp-min-rr `(,cx1 ,cy1) `(,x1 ,y1))
				(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
				(continue 'node_loop)
			(endif)

			;region is outside
			(vp-cpy-rr rec trec)
			(ln-remove-fnode rec prec)
			(hp-freecell heap trec prec)
		(loop-end)
	(endif)

	(exit 'region :clip_rect `(,heap))
	(vp-ret)

(def-func-end)

(def-method 'region :bounds)
	;inputs
	;:r1 = region listhead (ptr)
	;outputs
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = x1 (pixels)
	;:r10 = y1 (pixels)
	;trashes
	;:r1, :r7-:r14

	(vp-def (region rec bx by bx1 by1 x y x1 y1)
		'(:r1 :r1 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14))

	(entry 'region :bounds `(,region))

	;is empty ?
	(assign `((,region ln_fnode_next)) `(,rec))
	(vpif `(,rec = 0))
		(vp-simd vp-cpy-rr `(,rec) `(,bx ,by ,bx1 ,by1))
	(else)
		;first rect
		(vp-simd vp-cpy-ir-i `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1) `(,bx ,by ,bx1 ,by1))
		;run through region list
		(loop-flist rec 0 rec rec)
			(vp-simd vp-cpy-ir-i `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1) `(,x ,y ,x1 ,y1))
			(vp-simd vp-min-rr `(,x ,y) `(,bx ,by))
			(vp-simd vp-max-rr `(,x1 ,y1) `(,bx1 ,by1))
		(loop-end)
	(endif)

	(exit 'region :bounds `(,bx ,by ,bx1 ,by1))
	(vp-ret)

(def-func-end)

(def-method 'region :translate)
	;inputs
	;:r1 = region listhead (ptr)
	;:r7 = x translation (pixels)
	;:r8 = y translation (pixels)
	;trashes
	;:r1, :r11-:r14

	(vp-def (region rec tx ty x y x1 y1)
		'(:r1 :r1 :r7 :r8 :r11 :r12 :r13 :r14))

	(entry 'region :translate `(,region ,tx ,ty))

	;run through source region list
	(loop-flist region 0 rec rec)
		(vp-simd vp-cpy-ir-i `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1) `(,x ,y ,x1 ,y1))
		(vp-simd vp-add-rr `(,tx ,ty ,tx ,ty) `(,x ,y ,x1 ,y1))
		(vp-simd vp-cpy-ri-i `(,x ,y ,x1 ,y1) `(,rec) `(,rect_x ,rect_y ,rect_x1 ,rect_y1))
	(loop-end)
	(vp-ret)

(def-func-end)

(def-method 'region :free)
	;inputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;outputs
	;:r0 = region heap (ptr)
	;:r1 = source region listhead (ptr)
	;trashes
	;:r2-:r4

	(vp-def (heap region rec0 recn rec)
		'(:r0 :r1 :r2 :r3 :r4))

	(entry 'region :free `(,heap ,region))

	;empty ?
	(assign `((,region ln_fnode_next)) `(,rec0))
	(vpif `(,rec0 /= 0))
		;find end of region list
		(loop-flist rec0 0 rec recn)
		(loop-end)
		;splice region onto heap free list
		(assign `((,heap hp_heap_free_flist)) `(,rec))
		(assign `(,rec0) `((,heap hp_heap_free_flist)))
		(assign `(,rec) `((,recn ln_fnode_next)))
		;free region list
		(vp-xor-rr rec rec)
		(assign `(,rec) `((,region ln_fnode_next)))
	(endif)

	(exit 'region :free `(,heap ,region))
	(vp-ret)

(def-func-end)
