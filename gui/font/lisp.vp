(include "lib/asm/func.inc")
(include "./class.inc")
(include "class/str/class.inc")
(include "class/num/class.inc")
(include "class/sym/class.inc")
(include "class/lisp/class.inc")

(def-method 'font :lisp_create)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'font :lisp_create '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 2)

	(vp-push :r0)
	(defq in (method-input 'font :open))
	(list-bind-args :r1 in '(:str :num))
	(call 'font :open in '(:r0))
	(vpif '(:r0 = 0))
		(assign '((:rsp 0)) '(:r0))
		(call 'obj :ref '((:r0 lisp_sym_nil)) '(:r0))
	(endif)
	(vp-cpy-rr :r0 :r1)
	(vp-pop :r0)

	(exit 'font :lisp_create '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(create-font name pixels)" +error_msg_wrong_types :r1))
	(signature '(str num)))

(def-func-end)

(def-method 'font :lisp_glyph_paths)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this info paths))

	(entry 'font :lisp_glyph_paths '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 2)

	(vp-alloc local_size)
	(defq in1 (method-input 'font :glyph_info)
		in2 (method-input 'font :glyph_paths))
	(assign '(:r0) '((:rsp local_this)))
	(list-bind-args :r1 in1 '(:font :obj))
	(call 'font :glyph_info in1 `(,(first in2) ,(third in2)))
	(assign `((:rsp local_this) ,(third in2)) `(,(second in2) (:rsp local_info)))
	(assign `((,(second in2) lisp_stack)) `(,(second in2)))
	(call 'font :glyph_paths in2 '(_ (:rsp local_paths) _ _))
	(call 'array :deref '((:rsp local_info)))

	(exit 'font :lisp_glyph_paths '((:rsp local_this) (:rsp local_paths)))
	(vp-free local_size)
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(font-glyph-paths font str)" +error_msg_wrong_types :r1))
	(signature '(font str)))

(def-func-end)

(def-method 'font :lisp_info)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'font :lisp_info '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(vp-push :r0)
	(array-bind-args :r1 '(:r13))
	(vp-cpy-ir :r13 font_name :r0)
	(call 'str :create_from_buffer '((& :r0 str_data) (:r0 str_length)) '(:r12))
	(call 'num :create '((:r13 font_pixels)) '(:r11))
	(call 'list :create :nil '(:r0))
	(call 'list :push_back2 '(:r0 :r12 :r11) '(:r1 _ _ _ _))
	(vp-pop :r0)

	(exit 'font :lisp_info '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(font-info font)" +error_msg_wrong_types :r1))
	(signature '(font)))

(def-func-end)

(def-method 'font :lisp_glyph_bounds)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this info)
		(uint w h))

	(entry 'font :lisp_glyph_bounds '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 2)

	(vp-alloc local_size)
	(defq in1 (method-input 'font :glyph_info)
		in2 (method-input 'font :glyph_bounds))
	(assign '(:r0) '((:rsp local_this)))
	(list-bind-args :r1 in1 '(:font :obj))
	(call 'font :glyph_info in1 in2)
	(assign `(,(second in2)) `((:rsp local_info)))
	(call 'font :glyph_bounds in2 '(_ (:rsp local_w) (:rsp local_h)))
	(call 'array :deref '((:rsp local_info)))
	(call 'list :create :nil '(:r13))
	(call 'num :create  '((:rsp local_w)) '(:r11))
	(call 'num :create  '((:rsp local_h)) '(:r0))
	(call 'list :push_back2 '(:r13 :r11 :r0) '(:r1 _ _ _ _))

	(exit 'font :lisp_glyph_bounds '((:rsp local_this) :r1))
	(vp-free local_size)
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(font-glyph-bounds font str)" +error_msg_wrong_types :r1))
	(signature '(font str)))

(def-func-end)

(def-method 'font :lisp_glyph_ranges)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'font :lisp_glyph_ranges '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(vp-push :r0)
	(defq in (method-input 'font :glyph_ranges))
	(list-bind-args :r1 in '(:font))
	(call 'font :glyph_ranges in '(_ :r1))
	(vp-pop :r0)

	(exit 'font :lisp_glyph_ranges '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(font-glyph-ranges font)" +error_msg_wrong_types :r1))
	(signature '(font)))

(def-func-end)

(def-method 'font :lisp_texture)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'font :lisp_texture '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 2)

	(vp-push :r0)
	(defq in (method-input 'font :sym_texture))
	(list-bind-args :r1 in '(:font :sym))
	(call 'font :sym_texture in '(_ :r1))
	(vp-pop :r0)
	(vpif '(:r1 = 0))
		(assign '((:r0 lisp_sym_nil)) '(:r1))
		(class/obj/ref :r1 :r2)
	(endif)

	(exit 'font :lisp_texture '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(font-sym-texture font sym)" +error_msg_wrong_types :r1))
	(signature '(font sym)))

(def-func-end)
