(include "lib/asm/func.inc")
(include "./class.inc")
(include "sys/statics/class.inc")
(include "gui/view/class.inc")
(include "class/list/class.inc")
(include "gui/region/class.inc")

(def-method 'host_gui :update 16)
	;inputs
	;:r0 = mouse x
	;:r1 = mouse y
	;:r2 = update flags

	(def-vars
		(ptr statics old_stack)
		(struct rect host_gui_rect_size))

	(entry 'host_gui :update '(:r0 :r1 :r2))

	;kernel callback for update
	(fn-bind 'sys/statics/statics :r3)
	(assign '(:r0 :r1 :r2) '((:r3 statics_gui_mouse_x) (:r3 statics_gui_mouse_y) (:r3 statics_gui_flags)))
	(jump 'sys_task :callback '(0 ($ update_callback)))

(vp-label 'update_callback)
	(vp-cpy-rr :rsp :r0)
	(push-scope)
	(vp-and-cr -16 :rsp)
	(entry {old_stack})

	;inited gui compositor ?
	(assign {@sys/statics/statics} {statics})
	(vpifnot {statics->statics_gui_init})
		;init
		(assign {0, 0, statics->statics_gui_screen->view_w, statics->statics_gui_screen->view_h}
			{rect.host_gui_rect_x, rect.host_gui_rect_y, rect.host_gui_rect_w, rect.host_gui_rect_h})
		(host-gui-call 'host_gui :init {&rect, 1})
		(assign {1, rect.host_gui_rect_w, rect.host_gui_rect_h}
			{statics->statics_gui_init, statics->statics_gui_screen->view_w, statics->statics_gui_screen->view_h})
	(endif)

	;resize back buffer etc ?
	(vpif {statics->statics_gui_flags})
		;resize back buffer and redraw in full
		(host-gui-call 'host_gui :resize {statics->statics_gui_screen->view_w, statics->statics_gui_screen->view_h})
	(endif)

	;update screen
	(vpif {statics->statics_gui_dirty_flag})
		;render to the backbuffer
		(host-gui-call 'host_gui :begin_composite)
		(call 'host_gui :composite {statics->statics_gui_screen}
			{rect.host_gui_rect_x, rect.host_gui_rect_y, rect.host_gui_rect_w, rect.host_gui_rect_h})
		(host-gui-call 'host_gui :end_composite)

		;flush backbuffer, clear temps and dirty flag
		(host-gui-call 'host_gui :flush {&rect})
		(call 'list :clear {statics->statics_gui_temps})
		(assign {0} {statics->statics_gui_dirty_flag})
	(endif)

	(assign {old_stack} '(:rsp))
	(pop-scope-syms)
	(return)

(def-func-end)

(def-method 'host_gui :composite)
	;inputs
	;:r0 = root view object (ptr)
	;outputs
	;:r7 = x (pixels)
	;:r8 = y (pixels)
	;:r9 = width (pixels)
	;:r10 = height (pixels)
	;trashes
	;:r0-:r14
	;info
	;the dirty region bounds is returned for use by the :flush call !

	(vp-def (root heap region x y x1 y1 tmp)
		'(:r0 :r0 :r1 :r7 :r8 :r9 :r10 :r1))

	(def-struct local 0
		(ptr root ctx_flist ctx_next)
		(ptr damaged_region)
		(uint index)
		(int x y w h))

	;save inputs
	(vp-alloc local_size)
	(entry 'host_gui :composite `(,root))
	(assign `(,root) '((:rsp local_root)))

	;iterate through views back to front
	;setting abs cords, plus
	;create visible region at root
	(vp-xor-rr x x)
	(vp-xor-rr y y)
	(call 'view :backward_tree `(,root ,root ($ visible_down_callback) ($ visible_up_callback)))

	;save bounds for :flush
	(call 'region :bounds `((& ,root view_dirty_region)) `(,x ,y ,x1 ,y1))
	(vp-simd vp-sub-rr `(,x ,y) `(,x1 ,y1))
	(vp-simd vp-cpy-ri-i
		`(,x ,y ,x1 ,y1)
		`(:rsp :rsp :rsp :rsp)
		`(,local_x ,local_y ,local_w ,local_h))

	;iterate through views front to back
	;distribute visible region
	(vp-xor-rr tmp tmp)
	(assign `(,tmp) '((:rsp local_ctx_flist)))
	(call 'view :forward_tree `(,root :rsp ($ distribute_down_callback) ($ distribute_up_callback)))

	;draw all views on draw list, and free dirty regions
	(loop-flist :rsp local_ctx_flist root root)
		(assign `(,root) '((:rsp local_ctx_next)))
		(vp-sub-cr view_ctx_node root)
		(call 'view :draw `(,root))
		(assign '((:rsp local_ctx_next)) `(,region))
		(vp-sub-cr (- view_ctx_node view_dirty_region) region)
		(fn-bind 'sys/statics/statics heap)
		(vp-add-cr statics_gui_rect_heap heap)
		(call 'region :free `(,heap ,region))
		(assign '((:rsp local_ctx_next)) `(,root))
	(loop-end)

	(vp-simd vp-cpy-ir-i
		`(:rsp :rsp :rsp :rsp)
		`(,local_x ,local_y ,local_w ,local_h)
		`(,x ,y ,x1 ,y1))

	(exit 'host_gui :composite `(,x ,y ,x1 ,y1))
	(vp-free local_size)
	(vp-ret)

(vp-label 'visible_down_callback)
	(vp-def (heap view1 view2 tmp x y x1 y1 vx vy vx1 vy1)
		'(:r0 :r1 :r2 :r3 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14))

	(def-struct vis 0
		(ptr this root next region))

	;save inputs
	(vp-alloc vis_size)
	(entry 'view :forward_tree_callback `(,view1 ,view2))
	(assign `(,view1 ,view2) '((:rsp vis_this) (:rsp vis_root)))

	;abs of this view !
	(vp-simd vp-cpy-ir-i `(,view1 ,view1) `(,view_x ,view_y) `(,x1 ,y1))
	(vp-simd vp-add-rr `(,x1 ,y1) `(,x ,y))
	(vp-simd vp-cpy-ri-i `(,x ,y) `(,view1 ,view1) `(,view_ctx_x ,view_ctx_y))

	;if not root
	(vpif `(,view1 /= ,view2))
		;region heap
		(fn-bind 'sys/statics/statics heap)
		(vp-add-cr statics_gui_rect_heap heap)

		;remove my opaque region from ancestors
		(vp-xor-rr tmp tmp)
		(assign `(,tmp (,view1 view_flags)) `((:rsp vis_region) ,tmp))
		(vp-and-cr view_flag_opaque tmp)
		(vpif `(,tmp /= 0))
			;entire view is opaque
			(vp-simd vp-cpy-cr '(0 0) `(,x ,y))
			(vp-simd vp-cpy-ir-i `(,view1 ,view1) `(,view_w ,view_h) `(,x1 ,y1))
			(loop-start)
				(assign `((,view1 hmap_parent)) `(,view2))
				(assign `(,view2) '((:rsp vis_next)))

				;translate region
				(vp-simd vp-cpy-ir-i `(,view1 ,view1) `(,view_x ,view_y) `(,vx ,vy))
				(vp-simd vp-cpy-ir-i `(,view2 ,view2) `(,view_w ,view_h) `(,vx1 ,vy1))
				(vp-simd vp-add-rr `(,vx ,vy ,vx ,vy) `(,x ,y ,x1 ,y1))

				;clip to parent, exit if clipped away
				(breakif `(,x >= ,vx1) `(,y >= ,vy1) `(,x1 <= 0) `(,y1 <= 0))
				(vp-simd vp-max-cr '(0 0) `(,x ,y))
				(vp-simd vp-min-rr `(,vx1 ,vy1) `(,x1 ,y1))

				;remove opaque region
				(call 'region :remove_rect `(,heap (& ,view2 view_dirty_region)
					,x ,y ,x1 ,y1) `(,heap))

				(assign '((:rsp vis_next) (:rsp vis_root)) `(,view1 ,view2))
			(loop-until `(,view1 = ,view2))
		(else)
			;use views opaque region
			(assign `((,view1 hmap_parent)) `(,view2))
			(vp-simd vp-cpy-ir-i `(,view1 ,view1) `(,view_x ,view_y) `(,x ,y))
			(vp-simd vp-cpy-ir-i `(,view2 ,view2) `(,view_w ,view_h) `(,x1 ,y1))
			(vp-simd vp-mul-cr '(-1 -1) `(,x ,y))
			(vp-simd vp-add-rr `(,x ,y) `(,x1 ,y1))
			(call 'region :copy_rect `(,heap (& ,view1 view_opaque_region)
				(& :rsp vis_region) ,x ,y ,x1 ,y1) `(,heap))

			;remove from ancestors
			(assign '((:rsp vis_this)) `(,view1))
			(loop-start)
				(assign `((,view1 hmap_parent)) `(,view2))
				(assign `(,view2) '((:rsp vis_next)))

				;exit if clipped away
				(assign '((:rsp vis_region)) `(,tmp))
				(breakif `(,tmp = 0))

				;translate temp opaque region
				(vp-simd vp-cpy-ir-i `(,view1 ,view1) `(,view_x ,view_y) `(,x ,y))
				(call 'region :translate `((& :rsp vis_region) ,x ,y))

				;clip temp opaque region
				(assign '((:rsp vis_next)) `(,view2))
				(call 'region :clip_rect `(,heap (& :rsp vis_region)
					0 0 (,view2 view_w) (,view2 view_h)) `(,heap))

				;remove temp opaque region
				(assign '((:rsp vis_next)) `(,view2))
				(call 'region :remove_region `(,heap (& :rsp vis_region)
					(& ,view2 view_dirty_region) 0 0) `(,heap))

				(assign '((:rsp vis_next) (:rsp vis_root)) `(,view1 ,view2))
			(loop-until `(,view1 = ,view2))

			;free any temp region
			(call 'region :free `(,heap (& :rsp vis_region)) `(,heap _))
		(endif)
	(endif)

	;abs of this view !
	(assign `((:rsp vis_this)) `(,view2))
	(vp-simd vp-cpy-ir-i `(,view2 ,view2) `(,view_ctx_x ,view_ctx_y) `(,x ,y))

	(exit 'view :forward_tree_callback `(,view2 ,heap))
	(vp-free vis_size)
	(vp-ret)

(vp-label 'visible_up_callback)
	(vp-def (heap view1 view2 tmp x y x1 y1 vx vy vx1 vy1)
		'(:r0 :r1 :r2 :r3 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14))

	;save inputs
	(vp-alloc vis_size)
	(entry 'view :forward_tree_callback '((:rsp vis_this) (:rsp vis_root)))

	;region heap
	(fn-bind 'sys/statics/statics heap)
	(vp-add-cr statics_gui_rect_heap heap)

	;if dirty all flag then dirty entire view
	(assign '((:rsp vis_this)) `(,view1))
	(assign `((,view1 view_flags)) `(,tmp))
	(vp-and-cr view_flag_dirty_all tmp)
	(vpif `(,tmp /= 0))
		;clear dirty all flag
		(assign `((,view1 view_flags)) `(,tmp))
		(vp-and-cr (lognot view_flag_dirty_all) tmp)
		(assign `(,tmp) `((,view1 view_flags)))

		;add dirty
		(vp-simd vp-cpy-cr '(0 0) `(,x ,y))
		(vp-simd vp-cpy-ir-i `(,view1 ,view1) `(,view_w ,view_h) `(,x1 ,y1))
		(call 'region :paste_rect `(,heap (& ,view1 view_dirty_region)
			,x ,y ,x1 ,y1) `(,heap))
	(endif)

	;clip local dirty region with parent bounds
	(assign '((:rsp vis_this) (:rsp vis_root)) `(,view1 ,tmp))
	(assign `((,view1 hmap_parent)) `(,view2))
	(vpif `(,view1 = ,tmp))
		(vp-cpy-rr view1 view2)
	(endif)
	(vp-simd vp-cpy-ir-i `(,view1 ,view1) `(,view_x ,view_y) `(,x ,y))
	(vp-simd vp-cpy-ir-i `(,view2 ,view2) `(,view_w ,view_h) `(,x1 ,y1))
	(vp-simd vp-mul-cr '(-1 -1) `(,x ,y))
	(vp-simd vp-add-rr `(,x ,y) `(,x1 ,y1))
	(call 'region :clip_rect `(,heap (& ,view1 view_dirty_region)
		,x ,y ,x1 ,y1) `(,heap))

	;paste local dirty region onto parent if not root
	(assign '((:rsp vis_this) (:rsp vis_root)) `(,view1 ,view2))
	(vpif `(,view1 /= ,view2))
		(vp-simd vp-cpy-ir-i `(,view1 ,view1) `(,view_x ,view_y) `(,x ,y))
		(assign `((,view1 hmap_parent)) `(,view2))
		(call 'region :paste_region `(,heap (& ,view1 view_dirty_region)
			(& ,view2 view_dirty_region) ,x ,y) `(,heap))

		;free local dirty region
		(assign '((:rsp vis_this)) `(,view1))
		(call 'region :free `(,heap (& ,view1 view_dirty_region)) `(,heap _))
	(endif)

	;abs of parent view !
	(assign `((:rsp vis_this)) `(,view2))
	(vp-simd vp-cpy-ir-i `(,view2 ,view2) `(,view_ctx_x ,view_ctx_y) `(,x ,y))
	(vp-simd vp-cpy-ir-i `(,view2 ,view2) `(,view_x ,view_y) `(,x1 ,y1))
	(vp-simd vp-sub-rr `(,x1 ,y1) `(,x ,y))

	(exit 'view :forward_tree_callback `(,view2 ,view1))
	(vp-free vis_size)
	(vp-ret)

(vp-label 'distribute_down_callback)
	(vp-def (heap view1 view2 tmp x y x1 y1 vx vy vx1 vy1)
		'(:r0 :r1 :r2 :r3 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14))

	(def-struct dist 0
		(ptr this data next region))

	;save inputs
	(vp-alloc dist_size)
	(entry 'view :forward_tree_callback `(,view2 ,view1))
	(assign `(,view2 ,view1) '((:rsp dist_this) (:rsp dist_data)))

	;if not root
	(assign `((,view1 local_root)) `(,tmp))
	(vpif `(,view2 /= ,tmp))
		;region heap
		(fn-bind 'sys/statics/statics heap)
		(vp-add-cr statics_gui_rect_heap heap)

		;copy my dirty region from parent
		(assign `((,view2 hmap_parent)) `(,view1))
		(vp-simd vp-cpy-ir-i `(,view2 ,view2 ,view2 ,view2)
			`(,view_ctx_x ,view_ctx_y ,view_w ,view_h)
			`(,x ,y ,x1 ,y1))
		(vp-simd vp-add-rr `(,x ,y) `(,x1 ,y1))
		(call 'region :copy_rect `(,heap (& ,view1 view_dirty_region)
			(& ,view2 view_dirty_region) ,x ,y ,x1 ,y1) `(,heap))

		;did we find any dirty region ?
		(assign '((:rsp dist_this)) `(,view2))
		(assign `((,view2 view_dirty_region)) `(,view1))
		(vpif `(,view1 /= 0))
			;remove my opaque areas from ancestors
			(vp-xor-rr tmp tmp)
			(assign `(,tmp (,view2 view_flags)) `((:rsp dist_region) ,tmp))
			(vp-and-cr view_flag_opaque tmp)
			(vpif `(,tmp /= 0))
				;entire view is opaque
				(loop-start)
					(assign `((,view2 hmap_parent)) `(,view1))
					(assign `(,view1) '((:rsp dist_next)))

					;clip to parent, exit if clipped away
					(vp-simd vp-cpy-ir-i `(,view1 ,view1 ,view1 ,view1)
						`(,view_ctx_x ,view_ctx_y ,view_w ,view_h)
						`(,vx ,vy ,vx1 ,vy1))
					(vp-simd vp-add-rr `(,vx ,vy) `(,vx1 ,vy1))
					(breakif `(,x >= ,vx1) `(,y >= ,vy1) `(,x1 <= ,vx) `(,y1 <= ,vy))
					(vp-simd vp-max-rr `(,vx ,vy) `(,x ,y))
					(vp-simd vp-min-rr `(,vx1 ,vy1) `(,x1 ,y1))

					;remove from parent
					(call 'region :remove_rect `(,heap (& ,view1 view_dirty_region)
						,x ,y ,x1 ,y1) `(,heap))

					(assign '((:rsp dist_data) (:rsp dist_next)) `(,view1 ,view2))
					(assign `((,view1 local_root)) `(,view1))
				(loop-until `(,view1 = ,view2))
			(else)
				;use views opaque region
				(assign `((,view2 hmap_parent)) `(,view1))
				(vp-simd vp-cpy-ir-i `(,view2 ,view2) `(,view_x ,view_y) `(,x ,y))
				(vp-simd vp-cpy-ir-i `(,view1 ,view1) `(,view_w ,view_h) `(,x1 ,y1))
				(vp-simd vp-mul-cr '(-1 -1) `(,x ,y))
				(vp-simd vp-add-rr `(,x ,y) `(,x1 ,y1))
				(call 'region :copy_rect `(,heap (& ,view2 view_opaque_region)
					(& :rsp dist_region) ,x ,y ,x1 ,y1) `(,heap))

				;translate temp opaque region
				(assign '((:rsp dist_this)) `(,view2))
				(vp-simd vp-cpy-ir-i `(,view2 ,view2) `(,view_ctx_x ,view_ctx_y) `(,x ,y))
				(call 'region :translate `((& :rsp dist_region) ,x ,y))

				;remove from ancestors
				(assign '((:rsp dist_this)) `(,view1))
				(loop-start)
					(assign `((,view1 hmap_parent)) `(,view2))
					(assign `(,view2) '((:rsp dist_next)))

					;exit if clipped away
					(assign '((:rsp dist_region)) `(,tmp))
					(breakif `(,tmp = 0))

					;clip temp opaque region
					(vp-simd vp-cpy-ir-i `(,view2 ,view2) `(,view_ctx_x ,view_ctx_y) `(,x ,y))
					(vp-simd vp-cpy-ir-i `(,view2 ,view2) `(,view_w ,view_h) `(,x1 ,y1))
					(vp-simd vp-add-rr `(,x ,y) `(,x1 ,y1))
					(call 'region :clip_rect `(,heap (& :rsp dist_region)
						,x ,y ,x1 ,y1) `(,heap))

					;remove temp opaque region
					(assign '((:rsp dist_next)) `(,view2))
					(call 'region :remove_region `(,heap (& :rsp dist_region)
						(& ,view2 view_dirty_region) 0 0) `(,heap))

					(assign '((:rsp dist_data) (:rsp dist_next)) `(,view2 ,view1))
					(assign `((,view2 local_root)) `(,view2))
				(loop-until `(,view1 = ,view2))

				;free any temp region
				(call 'region :free `(,heap (& :rsp dist_region)) `(,heap _))
			(endif)

			;return flag for traversing into children
			(assign '((:rsp dist_this)) `(,view1))
			(assign `((,view1 view_dirty_region)) `(,view1))
		(endif)
	(endif)

	;return value will be 0 or not depending on haveing any dirty region
	;we will not traverse into child views if no reason
	(exit 'view :forward_tree_callback `((:rsp dist_this) ,view1))
	(vp-free dist_size)
	(vp-ret)

(vp-label 'distribute_up_callback)
	;add myself to draw list if any dirty region
	(vp-def (view user node tmp) '(:r0 :r1 :r2 :r3))

	(entry 'view :forward_tree_callback `(,view ,user))

	(assign `((,view view_dirty_region)) `(,node))
	(vpif `(,node /= 0))
		(vp-lea-i view view_ctx_node node)
		(vp-add-cr local_ctx_flist user)
		(ln-add-fnode user 0 node tmp)
	(endif)

	(exit 'view :forward_tree_callback `(,view ,user))
	(vp-ret)

(def-func-end)
