(include "lib/asm/func.inc")
(include "./class.inc")
(include "class/lisp/class.inc")
(include "class/num/class.inc")
(include "class/str/class.inc")
(include "sys/statics/class.inc")

(defun host-audio-call (_1 _2 &optional _3 _4 _5 _6)
	;_1 = class name
	;_2 = member name
	;_3 = in parameters
	;_4 = out parameters
	;_5 = dispatch reg
	;_6 = temp reg
	(setd _5 :r14 _6 :r13)
	(fn-bind 'sys/statics/statics _5)
	(vp-cpy-ir _5 statics_sys_load_host_audio_funcs _5)
	(abi-call-table _1 _2 _5 _3 _4 _6))

(def-method 'host_audio :lisp_init)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this)
		(long c_ret))

	(entry 'host_audio :lisp_init '(:r0 :r1))

	;check 0 args
	(errorif-lisp-args-len 'error :r1 /= 0)

	;allocate stack for locals
	(vp-alloc local_size)
	;save lisp `this`
	(assign '(:r0) '((:rsp local_this)))

	;callback in kernel thread/stack
	(call 'sys_task :callback '(:rsp ($ callback)))
	;convert C return value to number
	(call 'num :create '((:rsp local_c_ret)) '(:r1))

	;return lisp `this` and return value
	(exit 'host_audio :lisp_init '((:rsp local_this) :r1))
	;free local stack
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;:r0 = user data (ptr)

	;kernel callback
	(entry 'sys_task :task_callback '(:r0))
	(vp-push :r0)
	(host-audio-call 'host_audio :init '() '(:r0))
	(vp-pop :r1)
	(assign '(:r0) '((:r1 local_c_ret)))
	(vp-ret)

(errorcase
	(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(audio-init)" +error_msg_wrong_types :r1)))

(def-func-end)

(def-method 'host_audio :lisp_deinit)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this)
		(long c_ret))

	(entry 'host_audio :lisp_deinit '(:r0 :r1))

	;check 0 args
	(errorif-lisp-args-len 'error :r1 /= 0)

	;allocate stack for locals
	(vp-alloc local_size)
	;save lisp `this`
	(assign '(:r0) '((:rsp local_this)))

	;callback in kernel thread/stack
	(call 'sys_task :callback '(:rsp ($ callback)))
	;convert C return value to number
	(call 'num :create '((:rsp local_c_ret)) '(:r1))

	;return lisp `this` and return value
	(exit 'host_audio :lisp_deinit '((:rsp local_this) :r1))
	;free local stack
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;:r0 = user data (ptr)

	;kernel callback
	(entry 'sys_task :task_callback '(:r0))
	(vp-push :r0)
	(host-audio-call 'host_audio :deinit)
	(vp-pop :r1)
	(assign '(:r0) '((:r1 local_c_ret)))
	(vp-ret)

(errorcase
	(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(audio-deinit)" +error_msg_wrong_types :r1)))

(def-func-end)

(def-method 'host_audio :lisp_add_sfx)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this)
		(pubyte c_path)
		(long c_ret))

	(entry 'host_audio :lisp_add_sfx '(:r0 :r1))

	;check 1 arg with given type
	(errorif-lisp-args-sig 'error :r1 1)

	;allocate stack for locals
	(vp-alloc local_size)
	;save lisp `this`
	(assign '(:r0) '((:rsp local_this)))
	;cast input string args to C style char*
	(list-bind-args :r1 '(:r0) '(:str))
	;save them so kernel callback can see them
	(assign '(:r0) '((:rsp local_c_path)))
	;callback in kernel thread/stack
	(call 'sys_task :callback '(:rsp ($ callback)))
	;convert C return value to number
	(call 'num :create '((:rsp local_c_ret)) '(:r1))

	;return lisp `this` and return value
	(exit 'host_audio :lisp_add_sfx '((:rsp local_this) :r1))
	;free local stack
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;:r0 = user data (ptr)

	;kernel callback
	(entry 'sys_task :task_callback '(:r0))
	(vp-push :r0)
	(host-audio-call 'host_audio :add_sfx '((:r0 local_c_path)) '(:r0))
	(vp-pop :r1)
	(assign '(:r0) '((:r1 local_c_ret)))
	(vp-ret)

(errorcase
	(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(audio-add-sfx path)" +error_msg_wrong_types :r1))
	(signature '(str)))

(def-func-end)

(def-method 'host_audio :lisp_change_sfx)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this)
		(long c_handle c_state c_ret))

	(entry 'host_audio :lisp_change_sfx '(:r0 :r1))

	;check 2 args with given types
	(errorif-lisp-args-sig 'error :r1 2)

	;allocate stack for locals
	(vp-alloc local_size)
	;save lisp `this`
	(assign '(:r0) '((:rsp local_this)))
	;cast input numeric args
	(list-bind-args :r1 '(:r1 :r2) '(:num :num))
	;save them so kernel callback can see them
	(assign '(:r1 :r2) '((:rsp local_c_handle) (:rsp local_c_state)))
	;callback in kernel thread/stack
	(call 'sys_task :callback '(:rsp ($ callback)))
	;convert C return value to number
	(call 'num :create '((:rsp local_c_ret)) '(:r1))

	;return lisp `this` and return value
	(exit 'host_audio :lisp_change_sfx '((:rsp local_this) :r1))
	;free local stack
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;:r0 = user data (ptr)

	;kernel callback
	(entry 'sys_task :task_callback '(:r0))
	(vp-push :r0)
	(host-audio-call 'host_audio :change_sfx '((:r0 local_c_handle) (:r0 local_c_state)) '(:r0))
	(vp-pop :r1)
	(assign '(:r0) '((:r1 local_c_ret)))
	(vp-ret)

(errorcase
	(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(audio-change_sfx handle state)" +error_msg_wrong_types :r1))
	(signature '(num num)))

(def-func-end)

(def-method 'host_audio :lisp_remove_sfx)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this)
		(long c_handle c_ret))

	(entry 'host_audio :lisp_remove_sfx '(:r0 :r1))

	;check 1 arg with given type
	(errorif-lisp-args-sig 'error :r1 1)

	;allocate stack for locals
	(vp-alloc local_size)
	;save lisp `this`
	(assign '(:r0) '((:rsp local_this)))
	;cast input numeric arg
	(list-bind-args :r1 '(:r1) '(:num))
	;save it so kernel callback can see it
	(assign '(:r1) '((:rsp local_c_handle)))
	;callback in kernel thread/stack
	(call 'sys_task :callback '(:rsp ($ callback)))
	;convert C return value to number
	(call 'num :create '((:rsp local_c_ret)) '(:r1))

	;return lisp `this` and return value
	(exit 'host_audio :lisp_remove_sfx '((:rsp local_this) :r1))
	;free local stack
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;:r0 = user data (ptr)

	;kernel callback
	(entry 'sys_task :task_callback '(:r0))
	(vp-push :r0)
	(host-audio-call 'host_audio :remove_sfx '((:r0 local_c_handle)) '(:r0))
	(vp-pop :r1)
	(assign '(:r0) '((:r1 local_c_ret)))
	(vp-ret)

(errorcase
	(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(audio-remove-sfx handle)" +error_msg_wrong_types :r1))
	(signature '(num)))

(def-func-end)

(def-method 'host_audio :lisp_play_sfx)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this)
		(long c_handle c_ret))

	(entry 'host_audio :lisp_play_sfx '(:r0 :r1))

	;check 1 arg with given type
	(errorif-lisp-args-sig 'error :r1 1)

	;allocate stack for locals
	(vp-alloc local_size)
	;save lisp `this`
	(assign '(:r0) '((:rsp local_this)))
	;cast input numeric arg
	(list-bind-args :r1 '(:r1) '(:num))
	;save it so kernel callback can see it
	(assign '(:r1) '((:rsp local_c_handle)))
	;callback in kernel thread/stack
	(call 'sys_task :callback '(:rsp ($ callback)))
	;convert C return value to number
	(call 'num :create '((:rsp local_c_ret)) '(:r1))

	;return lisp `this` and return value
	(exit 'host_audio :lisp_play_sfx '((:rsp local_this) :r1))
	;free local stack
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;:r0 = user data (ptr)

	;kernel callback
	(entry 'sys_task :task_callback '(:r0))
	(vp-push :r0)
	(host-audio-call 'host_audio :play_sfx '((:r0 local_c_handle)) '(:r0))
	(vp-pop :r1)
	(assign '(:r0) '((:r1 local_c_ret)))
	(vp-ret)

(errorcase
	(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(audio-play-sfx handle)" +error_msg_wrong_types :r1))
	(signature '(num)))

(def-func-end)
