(include "lib/asm/func.inc")
(include "././link/class.inc")
(include "class/obj/class.inc")
(include "././kernel/class.inc")
(include "././statics/class.inc")

(def-method 'sys_mail :out)
	;info
	;parcels going off chip or junk mail task

	(def-vars
		(ptr msg data frag statics)
		(struct node_id node_id_size)
		(ulong time)
		(uint offset ammount len))

	(push-scope)

	(call 'sys_task :set_priority '(1))
	(call 'sys_kernel :id :nil {node_id.node_id_node1, node_id.node_id_node2})
	(assign {@sys/statics/statics} {statics})

	(loop-start 'mail_loop)
		;read parcel or junk mail
		(call 'sys_mail :mymail :nil {msg, data})
		(vpifnot {(msg->msg_dest.net_id_node_id.node_id_node1 - node_id.node_id_node1)
			| (msg->msg_dest.net_id_node_id.node_id_node2 - node_id.node_id_node2)})
			;we got some junk mail, just free it for now
			(call 'sys_mail :free {msg})
			(continue 'mail_loop)
		(endif)

		;create next parcel id
		(assign {statics->statics_sys_mail_session + 1} {statics->statics_sys_mail_session})

		;for each fragment
		(call 'host_os :pii_time :nil {time})
		(assign {0} {offset})
		(assign {msg->msg_frag_length} {ammount})
		(loop-start)
			;create fragment
			(assign {ammount} {len})
			(vpif {len > lk_data_size})
				(assign {lk_data_size} {len})
			(endif)
			(call 'sys_heap :alloc {&statics->statics_sys_mail_msg_heap} {_, frag})
			(call 'obj :ref {msg->msg_obj} {frag->msg_obj})

			;fill in fragment
			(assign {time} {frag->msg_timestamp})
			(assign {msg->msg_dest.net_id_mbox_id} {frag->msg_dest.net_id_mbox_id})
			(assign {msg->msg_dest.net_id_node_id.node_id_node1} {frag->msg_dest.net_id_node_id.node_id_node1})
			(assign {msg->msg_dest.net_id_node_id.node_id_node2} {frag->msg_dest.net_id_node_id.node_id_node2})

			(assign {statics->statics_sys_mail_session} {frag->msg_src.net_id_mbox_id})
			(assign {node_id.node_id_node1} {frag->msg_src.net_id_node_id.node_id_node1})
			(assign {node_id.node_id_node2} {frag->msg_src.net_id_node_id.node_id_node2})

			(assign {len} {frag->msg_frag_length})
			(assign {offset} {frag->msg_frag_offset})
			(assign {msg->msg_frag_length} {frag->msg_total_length})
			(assign {data + offset} {frag->msg_frag_data})

			;move on
			(assign {offset + len} {offset})
			(assign {ammount - len} {ammount})

			;queue it on the outgoing packet list
			(vp-def (head node tmp))
			(assign {&statics->statics_sys_mail_offchip_list, frag} (list head node))
			(lh-add-at-tail head node tmp)
		(loop-untilnot {ammount})

		;free parcel
		(call 'sys_mail :free {msg})

		;let other links get at some packets
		(call 'sys_task :sleep '(0))
	(loop-end)

	(pop-scope)
	(return)

(def-func-end)
