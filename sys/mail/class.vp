(include "lib/asm/func.inc")
(include "././link/class.inc")
(include "././kernel/class.inc")
(include "././statics/class.inc")
(include "class/list/class.inc")
(include "class/sym/class.inc")
(include "class/hmap/class.inc")
(include "class/num/class.inc")
(include "class/node/class.inc")
(include "lib/consts/chars.inc")

(def-method 'sys_mail :statics_init)
	;info
	;init the mailbox system, heap, buckets and id

	(fn-bind 'sys/statics/statics :r12)
	(vp-xor-rr :r0 :r0)
	(assign '(:r0 (& :r12 statics_sys_mail_timeout_list)) '((:r12 statics_sys_mail_next_mbox_id) :r0))
	(vp-lea-i :r0 (* (+ num_mbox_buckets 3) lh_list_size) :r1)
	(loop-start)
		(lh-init :r0 :r2)
		(vp-add-cr lh_list_size :r0)
	(loop-until '(:r0 = :r1))
	(jump 'sys_heap :init '((& :r12 statics_sys_mail_mbox_heap) mbox_size 32))

(def-func-end)

(def-method 'sys_mail :statics_init1)
	;info
	;init the mail system

	;init postmen task
	(fn-bind 'sys/statics/statics :r12)
	(vp-xor-rr :r0 :r0)
	(assign '(:r0) '((:r12 statics_sys_mail_session)))
	(call 'sys_task :start `((@ ,(f-path 'sys_mail :out))) '(_ :r1 _ _ _))
	(fn-bind 'sys/statics/statics :r12)
	(assign '(:r1) '((:r12 statics_sys_mail_out_mbox_addr)))

	;services, links and routing
	(call 'array :create :nil '((:r12 statics_sys_mail_links_array)))
	(call 'hmap :create '(($ key_node) 1) '((:r12 statics_sys_mail_node_map)))

	;init header heap
	(jump 'sys_heap :init '((& :r12 statics_sys_mail_msg_heap) msg_size 64))

(vp-label 'key_node)
	;inputs
	;:r0 = node1 object (ptr)
	;:r1 = node2 object (ptr)
	;outputs
	;:r1 = 0 if same
	;trashes
	;:r0-:r3

	(entry '(:r0 :r1))

	(assign `((:r0 ,(+ str_data node_id_node1)) (:r0 ,(+ str_data node_id_node2))
		(:r1 ,(+ str_data node_id_node1)) (:r1 ,(+ str_data node_id_node2))) '(:r0 :r1 :r2 :r3))
	(vp-sub-rr :r2 :r0)
	(vp-sub-rr :r3 :r1)
	(vp-or-rr :r0 :r1)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :alloc_mbox)
	;outputs
	;:r0 = mailbox id (uint)
	;:r1 = mailbox address (ptr)
	;trashes
	;:r0-:r5

	;pick next id
	(fn-bind 'sys/statics/statics :r4)
	(assign '((:r4 statics_sys_mail_next_mbox_id)) '(:r3))
	(loop-start)
		(vp-cpy-rr :r3 :r5)
		(vp-and-cr (dec num_mbox_buckets) :r5)
		(vp-mul-cr lh_list_size :r5)
		(vp-add-rr :r4 :r5)
		(loop-list-forward :r5 statics_sys_mail_mbox_buckets :r1 :r2)
			(assign '((:r1 mbox_id)) '(:r0))
		(loop-until '(:r3 = :r0))
		(breakif '(:r2 = 0))
		(vp-cpy-cr 0xffffffff :r2)
		(vp-add-cr 1 :r3)
		(vp-and-rr :r2 :r3)
	(loop-end)
	(vp-lea-i :r3 1 :r0)
	(assign '(:r0) '((:r4 statics_sys_mail_next_mbox_id)))

	;allocate mailbox with this id
	(call 'sys_heap :alloc '((& :r4 statics_sys_mail_mbox_heap)) '(_ :r1))
	(vp-xor-rr :r2 :r2)
	(assign '(:r3 :r2) '((:r1 mbox_id) (:r1 mbox_tcb)))
	(vp-lea-i :r1 mbox_list :r0)
	(lh-init :r0 :r2)
	(vp-add-cr statics_sys_mail_mbox_buckets :r5)
	(lh-add-at-tail :r5 :r1 :r2)

	(exit 'sys_mail :alloc_mbox '(:r3 :r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :free_mbox)
	;inputs
	;:r0 = mailbox id (uint)
	;trashes
	;:r0-:r4

	(entry 'sys_mail :free_mbox '(:r0))

	(call 'sys_mail :validate '(:r0) '(:r0))
	(vpif '(:r0 /= 0))
		;remove mailbox node
		(vp-cpy-rr :r0 :r1)
		(ln-remove-node :r1 :r2)

		;free mailbox node
		(fn-bind 'sys/statics/statics :r1)
		(vp-add-cr statics_sys_mail_mbox_heap :r1)
		(hp-freecell :r1 :r0 :r2)

		;splice any dead mail to postman
		(call 'sys_mail :junk_mail '((& :r0 mbox_list)))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :junk_mail)
	;inputs
	;:r3 = mail list pointer (ptr)
	;trashes
	;:r0-:r4

	(entry 'sys_mail :junk_mail '(:r3))

	;splice any junk mail to postman
	(lh-is-empty :r3 0 :r1)
	(vpif '(:r1 /= 0))
		;resume postman if needed
		(fn-bind 'sys/statics/statics :r1)
		(assign '((:r1 statics_sys_mail_out_mbox_addr)) '(:r4))
		(assign '((:r4 mbox_tcb)) '(:r0))
		(vpif '(:r0 /= 0))
			(vp-xor-rr :r1 :r1)
			(assign '(:r1) '((:r4 mbox_tcb)))
			(call 'sys_task :resume '(:r0))
		(endif)
		;splice junk mail
		(lh-get-head :r3 0 :r0)
		(lh-get-tail :r3 0 :r1)
		(lh-get-tail :r4 mbox_list :r2)
		(vp-add-cr (+ mbox_list lh_list_tail) :r4)
		(ln-set-succ :r2 0 :r0)
		(ln-set-pred :r0 0 :r2)
		(ln-set-succ :r1 0 :r4)
		(ln-set-pred :r4 0 :r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :validate)
	;inputs
	;:r0 = mailbox id (uint)
	;outputs
	;:r0 = 0, else mailbox address (ptr)
	;trashes
	;:r0-:r3

	(vp-def (node next mid id))

	(entry 'sys_mail :validate `(,id))

	(vp-cpy-rr id next)
	(fn-bind 'sys/statics/statics node)
	(vp-and-cr (dec num_mbox_buckets) next)
	(vp-mul-cr lh_list_size next)
	(vp-shl-cr 32 id)
	(vp-shr-cr 32 id)
	(vp-add-rr next node)
	(loop-list-forward node statics_sys_mail_mbox_buckets node next)
		(assign `((,node mbox_id)) `(,mid))
	(loop-until (list mid '= id))
	(vpif (list next '= 0))
		;not found
		(vp-cpy-rr next node)
	(endif)

	(exit 'sys_mail :validate `(,node))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :mymail)
	;outputs
	;:r0 = mail address (ptr)
	;:r1 = string data (pubyte)
	;trashes
	;:r0-:r2

	(fn-bind 'sys/statics/statics :r0)
	(assign '((:r0 statics_sys_task_current_tcb)) '(:r0))
	(jump 'sys_mail :read '((:r0 tk_node_mbox_addr)))

(def-func-end)

(def-method 'sys_mail :alloc)
	;inputs
	;:r0 = mail size (bytes)
	;outputs
	;:r0 = mail message (ptr)
	;:r1 = string data (pubyte)
	;trashes
	;:r0-:r6

	(entry 'sys_mail :alloc '(:r0))

	(call 'str :create_from_buffer '(0 :r0) '(:r4))
	(fn-bind 'sys/statics/statics :r0)
	(call 'sys_heap :alloc '((& :r0 statics_sys_mail_msg_heap)) '(_ :r0))
	(vp-xor-rr :r2 :r2)
	(vp-lea-i :r4 str_data :r1)
	(assign '(:r4 :r1 :r3 :r2)
		'((:r0 msg_obj) (:r0 msg_frag_data) (:r0 msg_frag_length) (:r0 msg_total_length)))

	(exit 'sys_mail :alloc '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :alloc_obj)
	;inputs
	;:r0 = object (ptr)
	;:r1 = data (pubyte)
	;:r2 = data length (bytes)
	;outputs
	;:r0 = mail message (ptr)
	;trashes
	;:r0-:r5

	(entry 'sys_mail :alloc_obj '(:r0 :r4 :r5))

	(call 'obj :ref '(:r0) '(:r3))
	(fn-bind 'sys/statics/statics :r0)
	(call 'sys_heap :alloc '((& :r0 statics_sys_mail_msg_heap)) '(_ :r0))
	(vp-xor-rr :r1 :r1)
	(assign '(:r3 :r4 :r5 :r1)
		'((:r0 msg_obj) (:r0 msg_frag_data) (:r0 msg_frag_length) (:r0 msg_total_length)))

	(exit 'sys_mail :alloc_obj '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :free)
	;inputs
	;:r0 = mail message (ptr)
	;trashes
	;:r0-:r14

	(entry 'sys_mail :free '(:r0))

	(vpif '(:r0 /= 0))
		(vp-push :r0)
		(call 'str :deref '((:r0 msg_obj)))
		(fn-bind 'sys/statics/statics :r0)
		(vp-pop :r1)
		(call 'sys_heap :free '((& :r0 statics_sys_mail_msg_heap) :r1))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :free_obj)
	;inputs
	;:r0 = mail message (ptr)
	;outputs
	;:r0 = 0 if msg was 0, else object (ptr)
	;:r1 = data (pubyte)
	;:r2 = data length (bytes)
	;trashes
	;:r0-:r5

	(entry 'sys_mail :free_obj '(:r0))

	(vpif '(:r0 /= 0))
		(assign '((:r0 msg_obj) (:r0 msg_frag_data) (:r0 msg_frag_length)) '(:r3 :r4 :r5))
		(fn-bind 'sys/statics/statics :r2)
		(call 'sys_heap :free '((& :r2 statics_sys_mail_msg_heap) :r0))
		(vp-cpy-rr :r3 :r0)
		(vp-cpy-rr :r4 :r1)
		(vp-cpy-rr :r5 :r2)
	(endif)

	(exit 'sys_mail :free_obj '(:r0 :r1 :r2))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :read)
	;inputs
	;:r0 = mailbox address (ptr)
	;outputs
	;:r0 = mail address (ptr)
	;:r1 = string data (pubyte)
	;trashes
	;:r0-:r2

	(entry 'sys_mail :read '(:r0))

	(lh-is-empty :r0 mbox_list :r2)
	(vpif '(:r2 = 0))
		(fn-bind 'sys/statics/statics :r1)
		(assign '((:r1 statics_sys_task_current_tcb)) '(:r1))
		(assign '(:r1) '((:r0 mbox_tcb)))
		(call 'sys_task :suspend)
	(endif)
	(lh-get-head :r0 mbox_list :r0)
	(vp-cpy-rr :r0 :r1)
	(ln-remove-node :r1 :r2)

	(exit 'sys_mail :read '(:r0 (:r0 msg_frag_data)))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :send)
	;inputs
	;:r0 = mail message (ptr)
	;trashes
	;:r0-:r4

	(entry 'sys_mail :send '(:r4))

	;on or off chip ?
	(call 'sys_kernel :id '() '(:r0 :r1))
	(load-node-id :r4 (+ msg_dest net_id_node_id) :r2 :r3)
	(vpif '(:r0 = :r2) '(:r1 = :r3))
		;on this chip
		(call 'sys_mail :validate `((:r4 ,(+ msg_dest net_id_mbox_id))) '(:r1))
		(vpif '(:r1 = 0))
			;must use postman task for junk mail
			(fn-bind 'sys/statics/statics :r1)
			(assign '((:r1 statics_sys_mail_out_mbox_addr)) '(:r1))
		(endif)
	(vp-label 'post_it)
		(vp-add-cr mbox_list :r1)
		(lh-add-at-tail :r1 :r4 :r0)
		(assign `((:r1 ,(- mbox_tcb mbox_list))) '(:r0))
		(vpif '(:r0 /= 0))
			(vp-xor-rr :r4 :r4)
			(assign '(:r4) `((:r1 ,(- mbox_tcb mbox_list))))
			(call 'sys_task :resume '(:r0))
		(endif)
	(else)
		;going off chip
		(fn-bind 'sys/statics/statics :r1)
		(assign '((:r4 msg_frag_length)) '(:r0))
		(switch)
		(vpcase '(:r0 > lk_data_size))
			;must use postman task for parcels
			(assign '((:r1 statics_sys_mail_out_mbox_addr)) '(:r1))
			(goto 'post_it)
		(default)
			;timestamp it and queue it on the outgoing packet list
			(call 'sys_pii :time :nil '(:r0))
			(vp-cpy-ri :r0 :r4 msg_timestamp)
			(vp-add-cr statics_sys_mail_offchip_list :r1)
			(lh-add-at-tail :r1 :r4 :r0)
		(endif)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :poll)
	;inputs
	;:r0 = mailbox list object (ptr)
	;outputs
	;:r0 = -1, else mailbox index (uint)
	;:r4 = mailbox list begin iter (pptr)
	;:r5 = mailbox list end iter (pptr)
	;trashes
	;:r0-:r6

	(vp-def (idx iter_begin iter_end iter) '(:r0 :r4 :r5 :r6))

	(entry 'sys_mail :poll '(:r0))

	;check if any have mail
	(class/array/get_both :r0 iter iter_end)
	(vp-cpy-rr iter iter_begin)
	(loop-start)
		(switch)
		(assign `((,iter 0)) `(,idx))
		(assign `((,idx ,(+ str_data net_id_mbox_id) ui)) `(,idx))
		(breakif (list idx '= 0))
		(call 'sys_mail :validate `(,idx) `(,idx))
		(breakif (list idx '= 0))
		(lh-is-empty idx mbox_list idx)
		(breakif (list idx '= 0))
			;return mailbox index
			(vp-sub-rr iter_begin iter)
			(vp-shr-cr (log2 +long_size) iter)
			(exit 'sys_mail :poll `(,iter ,iter_begin ,iter_end))
			(vp-ret)
		(endswitch)
		(vp-add-cr +long_size iter)
	(loop-until (list iter '= iter_end))

	(exit 'sys_mail :poll `(-1 ,iter_begin ,iter_end))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :select)
	;inputs
	;:r0 = mailbox id array object (ptr)
	;outputs
	;:r0 = mailbox index (uint)
	;trashes
	;:r0-:r8

	(vp-def (idx iter_begin iter_end iter ids tcb) '(:r0 :r4 :r5 :r6 :r7 :r8))

	(entry 'sys_mail :select `(,ids))

	(loop-start)
		;check if any have mail
		(call 'sys_mail :poll `(,ids) `(,idx ,iter_begin ,iter_end))
		(vpif (list idx '/= -1))
			;return mailbox index
			(exit 'sys_mail :select `(,idx))
			(vp-ret)
		(endif)

		;fill in all tcb's
		(fn-bind 'sys/statics/statics tcb)
		(assign `((,tcb statics_sys_task_current_tcb)) `(,tcb))
		(vp-call 'set_tcbs)

		;suspend till some mail arrives
		(call 'sys_task :suspend)

		;clear all tcb's !
		(vp-xor-rr tcb tcb)
		(vp-call 'set_tcbs)
	(loop-end)

(vp-label 'set_tcbs)
	(assign `(,iter_begin) `(,iter))
	(loop-start)
		(switch)
		(assign `((,iter 0)) `(,idx))
		(assign `((,idx ,(+ str_data net_id_mbox_id) ui)) `(,idx))
		(breakif (list idx '= 0))
		(call 'sys_mail :validate `(,idx) `(,idx))
		(breakif (list idx '= 0))
			(assign `(,tcb) `((,idx mbox_tcb)))
		(endswitch)
		(vp-add-cr +long_size iter)
	(loop-until (list iter '= iter_end))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :service)
	;inputs
	;:r0 = service name str object (ptr)
	;:r1 = mailbox id str object (ptr)
	;:r2 = service info str object (ptr)
	;outputs
	;:r0 = service entry str object (ptr)
	;trashes
	;:r0-:r14

	(def-vars
		(ptr name id info cat tmp1 tmp2))

	(push-scope)
	(entry 'sys_mail :service {name, id, info})

	;create service entry
	(call 'obj :ref {name})
	(call 'obj :ref {info})
	(call 'list :create :nil {cat})
	(call 'list :push_back {cat, name})
	(call 'str :create_from_buffer '("," 1) {tmp1})
	(call 'list :push_back {cat, tmp1})
	(call 'str :create_from_buffer {0, +net_id_size * 2} {tmp2})
	;node_id
	(call 'to_string {&id->str_data + 8, &tmp2->str_data, 16})
	;mailbox_id
	(call 'to_string {&id->str_data, &tmp2->str_data + 32, 8})
	(call 'list :push_back {cat, tmp2})
	(call 'str :ref {tmp1})
	(call 'list :push_back2 {cat, tmp1, info})
	(call 'str :cat {name, cat} {name})
	(call 'list :destroy {cat})

	(exit 'sys_mail :service {name})
	(pop-scope)
	(return)

(vp-label 'to_string)
	(entry '(:r0 :r1 :r2))
	(vp-add-rr :r0 :r2)
	(loop-start)
		(vp-cpy-ir-ub :r0 0 :r3)
		(vp-cpy-rr :r3 :r4)
		(vp-and-cr 0x0f :r3)
		(vp-and-cr 0xf0 :r4)
		(vp-shr-cr 4 :r4)
		(vp-add-cr +char_a :r3)
		(vp-add-cr +char_a :r4)
		(vp-cpy-ri-b :r3 :r1 0)
		(vp-cpy-ri-b :r4 :r1 +byte_size)
		(vp-add-cr +byte_size :r0)
		(vp-add-cr (* +byte_size 2) :r1)
	(loop-until '(:r0 = :r2))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :declare)
	;inputs
	;:r0 = ID str object (net_id)
	;:r1 = service name str object (ptr)
	;:r2 = service info str object (ptr)
	;outputs
	;:r0 = service key str object (ptr)
	;trashes
	;:r0-:r14

	(def-vars
		(ptr name id info key bucket set)
		(pptr tuple)
		(ulong time))

	(push-scope)
	(entry 'sys_mail :declare {id, name, info})

	;insert into service map
	(call 'node :create {&id->str_data.net_id_node_id, +node_id_size} {key})
	(call 'hmap :find {@sys/statics/statics.statics_sys_mail_node_map, key} {_, tuple, bucket})
	(vpifnot {tuple})
		(call 'array :create :nil {tuple})
		(call 'hset :create `((@ ,(f-path 'str :same)) 1) {set})
		(call 'array :push_back2 {tuple, set, 0})
		(call 'array :push_back2 {tuple, -1, -1})
		(call 'list :push_back2 {bucket, key, tuple})
	(else)
		(assign {tuple[+ptr_size]} {tuple})
		(call 'node :destroy {key})
	(endif)
	(call 'sys_pii :time :nil {time})
	(call 'array :set_elem {tuple, time, 1})
	(call 'array :get_first {tuple} {_, set})
	(call 'sys_mail :service {name, id, info} {name})
	(call 'hset :insert {set, name})
	(call 'sys_mail :ping)

	(exit 'sys_mail :declare {name})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail :enquire)
	;inputs
	;:r0 = service prefix str object (ptr)
	;outputs
	;:r0 = matching service entries list object (ptr)
	;trashes
	;:r0-:r14

	(def-struct local 0
		(ptr prefix entries))

	(vp-alloc local_size)
	(entry 'sys_mail :enquire '((:rsp local_prefix)))

	(call 'list :create :nil '((:rsp local_entries)))
	(fn-bind 'sys/statics/statics :r0)
	(call 'hmap :each '((:r0 statics_sys_mail_node_map) ($ callback1) :rsp))

	(exit 'sys_mail :enquire '((:rsp local_entries)))
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback1)
	;inputs
	;:r0 = predicate data (ptr)
	;:r1 = element iterator (ptr)
	;:r2 = bucket list pointer (ptr)

	(entry 'hmap :each_callback '(:r0 :r1 :r2))

	(assign '((:r1 +ptr_size) 0) '(:r2 :r1))
	(class/array/get_elem :r2 :r1 :r1 :r2)
	(jump 'hset :each '(:r1 ($ callback2) :r0))

(vp-label 'callback2)
	;inputs
	;:r0 = predicate data (ptr)
	;:r1 = element iterator (ptr)
	;:r2 = bucket list pointer (ptr)

	(entry 'hset :each_callback '(:r0 :r1 :r2))

	(assign '((:r1 0)) '(:r1))
	(vp-push :r0 :r1)
	(call 'str :starts_with '((:r0 local_prefix) :r1) '(_ :r2))
	(vp-pop :r0 :r1)
	(vpif '(:r2 = 0))
		(class/obj/ref :r1 :r2)
		(jump 'list :push_back '((:r0 local_entries) :r1))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :forget)
	;inputs
	;:r0 = service key str object (ptr)
	;trashes
	;:r0-:r14

	;find in service map and erase
	(fn-bind 'sys/statics/statics :r1)
	(call 'hmap :each '((:r1 statics_sys_mail_node_map) ($ callback) :r0))
	(jump 'sys_mail :ping)

(vp-label 'callback)
	;inputs
	;:r0 = predicate data (ptr)
	;:r1 = element iterator (ptr)
	;:r2 = bucket list pointer (ptr)

	(entry 'hmap :each_callback '(:r0 :r1 :r2))

	(vp-swp-rr :r0 :r1)
	(assign '((:r0 +ptr_size) 0) '(:r2 :r0))
	(class/array/get_elem :r2 :r0 :r0 :r2)
	(call 'hset :find '(:r0 :r1) '(:r0 :r1 :r2))
	(vpif '(:r1 /= 0))
		(jump 'list :erase '(:r2 :r1))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :ping)
	;trashes
	;:r0-:r14
	;info
	;ping services out to network

	(def-struct cat 0
		(ptr entries lf))

	(def-vars
		(ptr key bucket set msg data services statics)
		(pptr tuple)
		(struct cat cat_size))

	(push-scope)

	(call 'node :create {@sys/statics/statics.statics_sys_task_kernel_node_id, +node_id_size} {key})
	(assign {@sys/statics/statics} {statics})
	(call 'hmap :find {statics->statics_sys_mail_node_map, key} {_, tuple, bucket})
	(vpif {tuple})
		(assign {tuple[+ptr_size], +char_lf} {tuple, cat.cat_lf})
		(call 'str :create_from_buffer {&cat.cat_lf, 1} {cat.cat_lf})
		(call 'list :create :nil {cat.cat_entries})
		(call 'array :get_elem {tuple, 0} {_, set})
		(call 'hset :each {set, $callback, &cat})
		(call 'str :cat {cat.cat_lf, cat.cat_entries} {services})
		(call 'sys_mail :alloc {kn_msg_ping_services + services->str_length} {msg, data})
		(assign {msg, data, key, statics} '(:r0 :r1 :r5 :r7))
		(vp-call 'ping_header)
		(call 'sys_mem :copy {&services->str_data, &data->kn_msg_ping_services, services->str_length})
		(call 'list :destroy {cat.cat_entries})
		(call 'str :destroy {services})
		(call 'str :destroy {cat.cat_lf})
	(else)
		(call 'sys_mail :alloc {kn_msg_ping_services} {msg, data})
		(assign {msg, data, key, statics} '(:r0 :r1 :r5 :r7))
		(vp-call 'ping_header)
	(endif)
	(call 'sys_mail :send {msg})
	(jump 'node :destroy {key})

(vp-label 'ping_header)
	(assign '((:r7 statics_sys_mail_session) 0) '(:r8 :r2))
	(vp-add-cr 1 :r8)
	(assign `(,kn_call_ping :r8) '(:r6 (:r7 statics_sys_mail_session)))
	(assign '(:r6 :r8 :r2) `((:r1 ,kn_msg_ping_func) (:r1 ,kn_msg_ping_session) (:r1 ,kn_msg_ping_hops)))
	(load-node-id :r5 str_data)
	(save-net-id :r0 msg_dest)
	(save-node-id :r1 kn_msg_ping_origin)
	(save-node-id :r1 kn_msg_ping_via)
	(vp-ret)

	(pop-scope-syms)

(vp-label 'callback)
	;inputs
	;:r0 = predicate data (ptr)
	;:r1 = element iterator (ptr)
	;:r2 = bucket list pointer (ptr)

	(entry 'hset :each_callback '(:r0 :r1 :r2))

	(assign '((:r1 0) (:r0 cat_lf)) '(:r1 :r2))
	(vp-cpy-ir-ub :r1 str_data :r3)
	(vpif `(:r3 = +char_multiply))
		(class/obj/ref :r1 :r3)
		(class/obj/ref :r2 :r3)
		(jump 'list :push_back2 '((:r0 cat_entries) :r1 :r2))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :devices)
	;outputs
	;:r0 = known network nodes list object (ptr)
	;trashes
	;:r0-:r14

	(call 'list :create :nil '(:r0))
	(vp-push :r0)
	(fn-bind 'sys/statics/statics :r0)
	(call 'hmap :each '((:r0 statics_sys_mail_node_map) ($ callback) (:rsp 0)))
	(vp-pop :r0)

	(exit 'sys_mail :devices '(:r0))
	(vp-ret)

(vp-label 'callback)
	;inputs
	;:r0 = predicate data (ptr)
	;:r1 = element iterator (ptr)
	;:r2 = bucket list pointer (ptr)

	(entry 'hmap :each_callback '(:r0 :r1 :r2))

	(assign '((:r1 0)) '(:r1))
	(class/obj/ref :r1 :r2)
	(jump 'list :push_back '(:r0 :r1))

(def-func-end)

(def-method 'sys_mail :ready)
	;inputs
	;:r0-:r1 = peer node id (node_id)
	;:r2 = key node object (ptr)
	;outputs
	;:r0 = 0 if none, else msg (ptr)

	(vp-def (next node key peer1 peer2 tuple via1 via2 iter_begin iter_end)
		'(:r13 :r12 :r11 :r10 :r9 :r1))

	(entry 'sys_mail :ready `(,peer1 ,peer2 ,key))

	(fn-bind 'sys/statics/statics next)
	(loop-list-forward next statics_sys_mail_offchip_list node next 'exit)
		(load-node-id node (+ msg_dest net_id_node_id) via1 via2)
		(vpif (list peer1 '= via1))
			(breakif (list peer2 '= via2) 'exit)
		(endif)
		(save-node-id key str_data via1 via2)
		(fn-bind 'sys/statics/statics tuple)
		(call 'hmap :find `((,tuple statics_sys_mail_node_map) ,key) `(_ ,tuple _))
		(continueif (list tuple '= 0))
		(call 'array :get_both `((,tuple +ptr_size)) `(_ ,iter_begin ,iter_end))
		(vp-add-cr (* 4 +long_size) iter_begin)
		(continueif (list iter_begin '= iter_end))
		(loop-start)
			(load-node-id iter_begin 0 via1 via2)
			(vp-add-cr +node_id_size iter_begin)
			(vpif (list via1 '= peer1))
				(breakif (list via2 '= peer2) 'exit)
			(endif)
		(loop-until (list iter_begin '= iter_end))
	(loop-end)
	(vpif (list next '/= 0))
		(vp-cpy-rr node next)
		(ln-remove-node node key)
	(endif)

	(exit 'sys_mail :ready `(,next))
	(vp-ret)

(def-func-end)
