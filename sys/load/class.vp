(include "lib/asm/func.inc")
(include "./class.inc")
(include "././str/class.inc")
(include "././kernel/class.inc")
(include "class/str/class.inc")
(include "lib/consts/chars.inc")
(include "././statics/class.inc")

(def-method 'sys_load :init)
	;inputs
	;system argv
	;host OS function table
	;host GUI function table
	;host audio function table
	;info
	;register inputs are dependant on the platform ABI
	;they are extracted via (abi-arg 0)-(abi-arg 2).
	;we need to keep the statics function on the front
	;of the tail block, even though it dosn't get used
	;because the boot image has relative link references
	;to the 'sys/statics/statics' string in its header !

	(def-struct local 0
		(ptr argv os gui audio statics)
		(ptr boot_static_func boot_tail_func)
		(ptr new_static_func new_tail_func)
		(uint boot_static_len boot_tail_len))

	(vp-def (links paths func statics os) '(:r10 :r11 :r12 :r13 :r14))

	;save inputs
	(tk-save-state)
	(vp-alloc local_size)
	(entry 'sys_load :init '((:rsp local_argv) (:rsp local_os) (:rsp local_gui) (:rsp local_audio)))

	;get boot block info
	(assign '(($ fn_start) ($ fn_end)) '(:r0 :r1))
	(assign '((:r0 0) (:r1 +fn_header_length)) '(:r2 :r3))
	(assign '(:r1 :r3) '((:rsp local_boot_static_func) (:rsp local_boot_static_len)))
	(assign '(:r1) '((:rsp local_boot_tail_func)))
	(vp-sub-rr :r0 :r1)
	(vp-sub-rr :r1 :r2)
	(assign '(:r2) '((:rsp local_boot_tail_len)))

	;relocate statics and tail to their own mmap regions
	(defq in (method-input 'host_os :mmap))
	(assign '((:rsp local_os) (:rsp local_boot_static_len) -1 +mmap_data) `(,os ~in))
	(vp-add-cr statics_size (first in))
	(abi-call-table 'host_os :mmap os in '(:r0))
	(assign '(:r0) '((:rsp local_new_static_func)))
	(assign '((:rsp local_os)) `(,os))
	(abi-call-table 'host_os :mmap os '((:rsp local_boot_tail_len) -1 +mmap_data) '(:r0))
	(assign '(:r0) '((:rsp local_new_tail_func)))
	(call 'memcpy '((:rsp local_boot_static_func) (:rsp local_new_static_func) (:rsp local_boot_static_len)))
	(call 'memcpy '((:rsp local_boot_tail_func) (:rsp local_new_tail_func) (:rsp local_boot_tail_len)))

	;allocate relloc/stat/name buffer
	(assign '((:rsp local_os)) `(,os))
	(abi-call-table 'host_os :mmap os '(ld_reloc_buf_size -1 +mmap_data) '(:r0))

	;init reloc buffer address etc
	(assign '((:rsp local_new_static_func)) `(,statics))
	(assign `((,statics +fn_header_entry)) '(:r1))
	(vp-add-rr :r1 statics)
	(assign `(,statics) '((:rsp local_statics)))
	(assign '(:r0 :r0) `((,statics statics_sys_load_reloc_stack) (,statics statics_sys_load_reloc_buffer)))
	(vp-add-cr ld_reloc_size :r0)
	(assign '(:r0) `((,statics statics_sys_load_name_buffer)))
	(vp-add-cr ld_name_size :r0)
	(assign '(:r0) `((,statics statics_sys_load_stat_buffer)))

	;save host abi tables
	(assign '((:rsp local_os) (:rsp local_gui) (:rsp local_audio)) '(:r0 :r1 :r2))
	(assign '(:r0) `((,statics statics_sys_load_host_os_funcs)))
	(assign '(:r1) `((,statics statics_sys_load_host_gui_funcs)))
	(assign '(:r2) `((,statics statics_sys_load_host_audio_funcs)))


	;add statics function to function list
	(assign '((:rsp local_new_static_func)) `(,func))
	(ln-add-fnode statics statics_sys_load_function_flist func :r0)
	;add all tail functions to function list
	(assign '((:rsp local_new_tail_func)) `(,func))
	(assign `((,func +fn_header_length)) '(:r0))
	(vp-add-rr :r0 func)
	(loop-start)
		(assign `((,func +fn_header_length)) '(:r0))
		(breakif '(:r0 = 0))
		(ln-add-fnode statics statics_sys_load_function_flist func :r1)
		(vp-add-rr :r0 func)
	(loop-end)

	;bind all function intra references
	(assign '((:rsp local_new_tail_func)) `(,func))
	(assign `((,func +fn_header_length)) '(:r0))
	(vp-add-rr :r0 func)
	(loop-start)
		(assign `((,func +fn_header_length)) '(:r0))
		(breakif '(:r0 = 0))
		(assign `((,func +fn_header_links) (,func +fn_header_paths)) `(,links ,paths))
		(vp-add-rr func links)
		(vp-add-rr func paths)
		(vp-add-rr :r0 func)
		(loop-while (list links '/= paths))
			(vp-cpy-ir links 0 :r0)
			(vp-add-rr links :r0)
			(call 'bind `(:r0 ,statics) '(:r0))
			(vp-cpy-ri :r0 links 0)
			(vp-add-cr +ptr_size links)
		(loop-end)
	(loop-end)

	;set functions to RX
	(assign '((:rsp local_os)) `(,os))
	(abi-call-table 'host_os :mprotect os '((:rsp local_new_tail_func) (:rsp local_boot_tail_len) +mmap_exec))
	(assign '((:rsp local_os)) `(,os))
	(abi-call-table 'host_os :clear_icache os '((:rsp local_new_tail_func) (:rsp local_boot_tail_len)))

	;call the kernel
	(call 'bind '(($ bind_kernel) (:rsp local_statics)) '(:r1))
	(assign '((:rsp local_argv)) '(:r0))
	(vp-call-r :r1)

	;free new statics and tail regions etc
	(assign '((:rsp local_statics) (:rsp local_os)) `(,statics ,os))
	(abi-call-table 'host_os :munmap os `((,statics statics_sys_load_reloc_buffer) ld_reloc_buf_size +mmap_data))
	(assign '((:rsp local_os)) `(,os))
	(abi-call-table 'host_os :munmap os '((:rsp local_new_static_func) (:rsp local_boot_static_len) +mmap_exec))
	(assign '((:rsp local_os)) `(,os))
	(abi-call-table 'host_os :munmap os '((:rsp local_new_tail_func) (:rsp local_boot_tail_len) +mmap_exec))

	;return with code 0
	(vp-free local_size)
	(tk-load-state)
	(vp-xor-rr :r0 :r0)
	(exit 'sys_load :init '(:r0))
	(vp-ret)

(vp-label 'bind)
	;inputs
	;:r0 = name
	;:r1 = statics
	;outputs
	;:r0 = func entry point
	;trashes
	;:r1-:r6
	(vp-def (name stats node str1 str2 c1 c2))
	(entry `(,name ,stats))

	(loop-flist stats statics_sys_load_function_flist node node)
		(vp-cpy-rr name str1)
		(vp-lea-i node +fn_header_pathname str2)
		(loop-start)
			(vp-cpy-ir-ub str1 0 c1)
			(vp-cpy-ir-ub str2 0 c2)
			(vp-sub-rr c2 c1)
			(breakif (list c1 '/= 0) (list c2 '= 0))
			(vp-add-cr +byte_size str1)
			(vp-add-cr +byte_size str2)
		(loop-end)
	(loop-until (list c1 '= 0))
	(assign `((,node +fn_header_entry)) '(:r0))
	(vp-add-rr node :r0)

	(exit '(:r0))
	(vp-ret)

(vp-label 'memcpy)
	;inputs
	;:r0 = src
	;:r1 = dest
	;:r2 = length
	;trashes
	;:r0-:r3
	(vp-def (src dst len end))
	(entry `(,src ,dst ,len))

	(assign `((& ,src ,len)) `(,end))
	(loop-start)
		(vp-cpy-ir src 0 len)
		(vp-add-cr +long_size src)
		(vp-cpy-ri len dst 0)
		(vp-add-cr +long_size dst)
	(loop-until (list src '>= end))
	(vp-ret)

(vp-label 'bind_kernel)
	(vp-cstr "sys/kernel/kernel")

(def-func-end)

(def-method 'sys_load :bind)
	;input
	;:r0 = c string function path name (pubyte)
	;output
	;:r0 = 0 else, function entry pointer (ptr)
	;trashes
	;:r1-:r7

	(entry 'sys_load :bind '(:r6))

	;check if function already present !
	(fn-bind 'sys/statics/statics :r7)
	(loop-flist :r7 statics_sys_load_function_flist :r5 :r5)
		(call 'sys_str :compare '(:r6 (& :r5 +fn_header_pathname)) '(:r0))
	(loop-until '(:r0 = 0))
	(vpif '(:r5 /= 0))
		;found function already loaded
		(assign '((:r5 +fn_header_entry)) '(:r0))
		(vp-add-rr :r5 :r0)
		(vp-ret)
	(endif)

	;set the function buffers to RW
	(loop-flist :r7 statics_sys_load_block_flist :r3 :r3)
		(call 'host_os :pii_mprotect '(:r3 ld_block_size +mmap_data) '(:r0))
		(assert '(:r0 = 0))
	(loop-end)

	;load the function/s
	(call 'sys_load :load '(:r6) '(:r4))

	;set the function buffers to RX
	(fn-bind 'sys/statics/statics :r7)
	(loop-flist :r7 statics_sys_load_block_flist :r3 :r3)
		(call 'host_os :pii_mprotect '(:r3 ld_block_size +mmap_exec) '(:r0))
		(assert '(:r0 = 0))
	(loop-end)

	;return function address
	(exit 'sys_load :bind '(:r4))
	(vp-ret)

(def-func-end)

(def-method 'sys_load :load)
	;input
	;:r0 = c string function path name (pubyte)
	;output
	;:r0 = 0 else, function entry pointer (ptr)
	;trashes
	;:r1-:r7

	(entry 'sys_load :load '(:r6))

	;check if function already present !
	(fn-bind 'sys/statics/statics :r7)
	(loop-flist :r7 statics_sys_load_function_flist :r5 :r5)
		(call 'sys_str :compare '(:r6 (& :r5 +fn_header_pathname)) '(:r0))
	(loop-until '(:r0 = 0))
	(vpif '(:r5 /= 0))
		;found function already loaded
		(assign '((:r5 +fn_header_entry)) '(:r0))
		(vp-add-rr :r5 :r0)
		(vp-ret)
	(endif)

	;create filename
	(call 'sys_str :copy `(,(cat "obj/" *cpu* "/" *abi* "/") (:r7 statics_sys_load_name_buffer)) '(_ :r1))
	(vp-sub-cr 1 :r1)
	(call 'sys_str :copy '(:r6 :r1))
	(assign '((:r7 statics_sys_load_name_buffer)) '(:r6))

	;get length of function on disk
	(call 'host_os :pii_stat '(:r6 (:r7 statics_sys_load_stat_buffer)) '(:r0))
	(vpif '(:r0 /= 0))
	(vp-label 'funcexit)
		(vp-xor-rr :r0 :r0)
		(vp-ret)
	(endif)

	;test for regular file only
	(assign '((:r7 statics_sys_load_stat_buffer)) '(:r0))
	(assign '((:r0 stat_mode)) '(:r0))
	(vp-and-cr s_ifmt :r0)
	(gotoif '(:r0 /= s_ifreg) 'funcexit)

	;ensure space for new function
	(assign '((:r7 statics_sys_load_block_start) (:r7 statics_sys_load_block_end) (:r7 statics_sys_load_stat_buffer))
		'(:r1 :r2 :r0))
	(vp-sub-rr :r1 :r2)
	(assign '((:r0 stat_fsize)) '(:r0))
	(vpif '(:r2 < :r0))
		;not enough so allocate new function buffer
		(call 'host_os :pii_mmap '(ld_block_size -1 +mmap_data) '(:r0))
		(assert '(:r0 /= 0))

		;add to block list for freeing
		(ln-add-fnode :r7 statics_sys_load_block_flist :r0 :r1)

		;set block pointers for loading
		(vp-add-cr +ptr_size :r0)
		(assign '(:r0) '((:r7 statics_sys_load_block_start)))
		(vp-add-cr (- ld_block_size +ptr_size) :r0)
		(assign '(:r0) '((:r7 statics_sys_load_block_end)))
	(endif)

	;open function file
	(call 'host_os :pii_open '(:r6 +file_open_read) '(:r6))

	;read into buffer
	(assign '((:r7 statics_sys_load_stat_buffer)) '(:r2))
	(call 'host_os :pii_read '(:r6 (:r7 statics_sys_load_block_start) (:r2 stat_fsize)))
	(assign '((:r7 statics_sys_load_stat_buffer)) '(:r2))
	(call 'host_os :pii_clear_icache '((:r7 statics_sys_load_block_start) (:r2 stat_fsize)))

	;close function file
	(call 'host_os :pii_close '(:r6))

	;check loaded length equals file size
	(assign '((:r7 statics_sys_load_block_start) (:r7 statics_sys_load_stat_buffer)) '(:r3 :r2))
	(assign '((:r3 +fn_header_length) (:r2 stat_fsize)) '(:r0 :r1))
	(vpif '(:r0 /= :r1))
		(call 'host_os :pii_write_str '(2 "Length field error !"))
		(call 'host_os :pii_exit '(1))
	(endif)

	;add to function list
	(ln-add-fnode :r7 statics_sys_load_function_flist :r3 :r0)

	;relocate vtable so we can discard paths
	(assign '((:r7 statics_sys_load_reloc_stack)) '(:r1))
	(vp-cpy-rr :r1 :r5)

	;copy paths to reloc buffer
	(assign '((:r3 +fn_header_paths) (:r3 +fn_header_length)) '(:r0 :r2))
	(vp-add-rr :r3 :r0)
	(vp-add-rr :r3 :r2)
	(loop-while '(:r0 /= :r2))
		(vp-cpy-ir-b :r0 0 :r4)
		(vp-cpy-ri-b :r4 :r1 0)
		(vp-add-cr +byte_size :r0)
		(vp-add-cr +byte_size :r1)
	(loop-end)

	;push reloc buffer entry
	(vp-add-cr (dec (* +ptr_size 2)) :r1)
	(vp-and-cr (neg +ptr_size) :r1)
	(assign '(:r5 :r1) `((:r1 ,(neg +ptr_size)) (:r7 statics_sys_load_reloc_stack)))

	;overflow check
	(assign '((:r7 statics_sys_load_name_buffer)) '(:r2))
	(vpif '(:r1 > :r2))
		(call 'host_os :pii_write_str '(2 "Reloc buffer overflow !"))
		(call 'host_os :pii_exit '(1))
	(endif)

	;bind links to paths in reloc buffer
	(assign '((:r3 +fn_header_links) (:r3 +fn_header_paths)) '(:r0 :r1))
	(vp-add-rr :r3 :r0)
	(vp-add-rr :r3 :r1)
	(vp-sub-rr :r1 :r5)
	(loop-while '(:r0 /= :r1))
		(vp-cpy-ir :r0 0 :r2)
		(vp-add-rr :r0 :r2)
		(vp-add-rr :r5 :r2)
		(vp-cpy-ri :r2 :r0 0)
		(vp-add-cr +ptr_size :r0)
	(loop-end)

	;adjust block start
	(assign '((:r3 +fn_header_paths)) '(:r0))
	(vp-add-rr :r3 :r0)
	(vp-add-cr (dec +ptr_size) :r0)
	(vp-and-cr (neg +ptr_size) :r0)
	(assign '(:r0) '((:r7 statics_sys_load_block_start)))

	;load and link function references
	;now actual addresses of strings in the reloc buffer
	(assign '((:r3 +fn_header_links)) '(:r0))
	(vp-add-rr :r3 :r0)
	(loop-start)
		(assign '((:r3 +fn_header_paths)) '(:r1))
		(vp-add-rr :r3 :r1)
		(breakif '(:r0 = :r1))
		(vp-push :r3 :r0)
		(call 'fn_entry '((:r0 0)))
		(vpif '(:r0 = 0))
			;no such file
			(call 'host_os :pii_write_str '(2 "Bind error: "))
			(assign '((:rsp 0)) '(:r0))
			(call 'host_os :pii_write_str '(2 (:r0 0)))
			(call 'host_os :pii_write_char '(2 +char_lf))
			(call 'host_os :pii_exit '(1))
		(endif)
		(vp-cpy-rr :r0 :r1)
		(vp-pop :r3 :r0)
		(vp-cpy-ri :r1 :r0 0)
		(vp-add-cr +ptr_size :r0)
	(loop-end)

	;pop reloc buffer
	(fn-bind 'sys/statics/statics :r7)
	(assign '((:r7 statics_sys_load_reloc_stack)) '(:r0))
	(vp-cpy-ir :r0 (neg +ptr_size) :r0)
	(assign '(:r0) '((:r7 statics_sys_load_reloc_stack)))

	;return function address
	(assign '((:r3 +fn_header_entry)) '(:r0))
	(vp-add-rr :r3 :r0)

	(exit 'sys_load :load '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_load :find)
	;inputs
	;:r0 = code pointer (ptr)
	;outputs
	;:r0 = 0, else function header pointer (ptr)
	;:r1 = function header offset (uint)
	;trashes
	;:r0-:r2

	(vp-def (cptr node_end node))

	(entry 'sys_load :find `(,cptr))

	(fn-bind 'sys/statics/statics node)
	(loop-flist node statics_sys_load_function_flist node node)
		(assign `((,node +fn_header_entry)) `(,node_end))
		(vp-add-rr node node_end)
		(continueif (list cptr '< node_end))
		(assign `((,node +fn_header_links)) `(,node_end))
		(vp-add-rr node node_end)
	(loop-until (list cptr '< node_end))
	(vp-sub-rr node cptr)

	(exit 'sys_load :find `(,node ,cptr))
	(vp-ret)

(def-func-end)
