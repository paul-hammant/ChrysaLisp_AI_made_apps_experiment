(include "lib/asm/func.inc")
(include "././link/class.inc")
(include "././load/class.inc")
(include "./class.inc")
(include "././str/class.inc")
(include "././math/class.inc")
(include "././pii/class.inc")
(include "gui/gui/class.inc")
(include "class/sym/class.inc")
(include "class/num/class.inc")
(include "class/node/class.inc")
(include "class/hmap/class.inc")
(include "class/lisp/class.inc")
(include "lib/consts/chars.inc")
(include "././statics/class.inc")

;;;;;;;;;;;;;
; kernel task
;;;;;;;;;;;;;

(def-method 'sys_kernel :kernel)
	;inputs
	;:r0 = argv pointer (pptr)
	;info
	;loader is already initialized when we get here !

	(def-vars
		(union
			(ptr argv)
			(ptr link))
		(ptr statics mbox_addr msg data tuple key best_nodes)
		(pptr iter_begin iter_end)
		(struct node_id node_id_size)
		(ulong time)
		(uint link_cnt best_cnt best_rand))

	(push-scope)
	(entry {argv})

	;init allocator
	(call 'sys_mem :statics_init)

	;init symbols
	(call 'sym :statics_init)

	;init tasks
	(call 'sys_task :statics_init)

	;init mailer mailbox list
	(call 'sys_mail :statics_init)

	;start kernel task (get's mailbox id of 0 !)
	(assign {@sys/statics/statics} {statics})
	(call 'sys_task :start {$fn_entry} {statics->statics_sys_task_kernel_tcb, mbox_addr, _, _, _})
	(assign {statics->statics_sys_task_kernel_tcb} {statics->statics_sys_task_current_tcb})

	;init mailer
	(call 'sys_mail :statics_init1)

	;allocate best choice nodes array
	(call 'array :create :nil {best_nodes})

	;set random node ID
	(call 'sys_pii :rand {&statics->statics_sys_task_kernel_node_id, +node_id_size})
	;lisp nodes allways have bit 0 set !
	(assign {&statics->statics_sys_task_kernel_node_id} '(:r0))
	(assign '((:r0 0 ub)) '(:r1))
	(vp-or-cr 1 :r1)
	(assign '(:r1) '((:r0 0 ub)))
	(call 'sys_kernel :id :nil {node_id.node_id_node1, node_id.node_id_node2})

	;process command options
	(call 'opts {argv})

	;start routing pings
	(call 'node :create {0, +node_id_size} {key})
	(call 'sys_load :bind `(,(str (f-path 'sys_kernel :ping))) '(:r0))
	(vpif '(:r0 /= 0))
		(call 'sys_task :start '(:r0))
	(endif)

;;;;;;;;;;;;;;;;;;;;;;;
; main kernel task loop
;;;;;;;;;;;;;;;;;;;;;;;

	;loop till no other tasks running
	(call 'sys_task :set_priority '(0))
	(loop-start 'exit)
		;service all kernel mail
		(loop-start 'kernel_loop)
			;check if any mail
			(assign {mbox_addr} '(:r0))
			(lh-is-empty :r0 mbox_list :r1)
			(breakif '(:r1 = 0))
			(call 'sys_mail :read '(:r0) {msg, data})
			;which kernel call number
			(assign {data->kn_msg_func} '(:r0))
			(switch)
			(vpcase '(:r0 = kn_call_open))
			(vp-label 'run_here)
				;fill in reply ID, user field is left alone !
				(call 'opt_run {&data->kn_msg_open_pathname} '(:r0 :r1 :r2))
				(assign {msg, data, kn_msg_size} '(:r3 :r4 :r5))
				(assign-net-id :r4 kn_msg_reply_id :r3 msg_dest :r6 :r7 :r8)
				(save-net-id :r4 kn_msg_reply_id :r0 :r1 :r2)
				(assign '(:r5) '((:r3 msg_frag_length)))
				(call 'sys_mail :send '(:r3))
				(break)
			(vpcase '(:r0 = kn_call_child))
				;find best cpu to run task
				(call 'array :clear {best_nodes})
				(assign {statics->statics_sys_task_task_count} {best_cnt})
				(call 'array :get_both {statics->statics_sys_mail_links_array}
					{_, iter_begin, iter_end})
				(loop-while {iter_begin /= iter_end})
					(assign {*iter_begin} {link})
					(assign {iter_begin + +ptr_size} {iter_begin})
					(assign {link->lk_node_task_count} {link_cnt})
					(continueifnot {link_cnt})
					(continueif {link_cnt > best_cnt})
					(vpif {link_cnt < best_cnt})
						(assign {link_cnt} {best_cnt})
						(call 'array :clear {best_nodes})
					(endif)
					(call 'array :push_back2 {best_nodes,
						link->lk_node_peer_node_id.node_id_node1,
						link->lk_node_peer_node_id.node_id_node2})
				(loop-end)
				(gotoif {statics->statics_sys_task_task_count <= best_cnt} 'run_here)
				;send to random better kernel
				(call 'array :get_length {best_nodes} {_, best_cnt})
				(assign {(best_rand + 1 => best_rand) % (best_cnt >> 1)} {best_cnt})
				(call 'array :get_elem2 {best_nodes, best_cnt << 1}
					{_, msg->msg_dest.net_id_node_id.node_id_node1,
						msg->msg_dest.net_id_node_id.node_id_node2})
				(call 'sys_mail :send {msg})
				(break)
			(vpcase '(:r0 = kn_call_ping))
				;new services/routing ping
				(def-vars
					(ptr session set)
					(long hops)
					(union
						(ptr bucket new_key)
						(ptr services entries)))
				(push-scope)

				;timestamp
				(call 'sys_pii :time :nil '{time})

				;find/create the routing tuple for the origin
				(assign {data, key} '(:r0 :r1))
				(assign-node-id :r0 kn_msg_ping_origin :r1 str_data)
				(call 'hmap :find {statics->statics_sys_mail_node_map, key} {_, tuple, bucket})
				(vpifnot {tuple})
					(call 'node :create {&data->kn_msg_ping_origin, +node_id_size} {new_key})
					(call 'array :create :nil {tuple})
					;service set, time, session, hops, then any vias...
					(call 'hset :create `((@ ,(f-path 'str :same)) 1) {set})
					(call 'array :push_back2 {tuple, set, 0})
					(call 'array :push_back2 {tuple, -1, -1})
					(call 'list :push_back2 {bucket, new_key, tuple})
				(else)
					(assign {(pptr tuple)[+ptr_size]} {tuple})
				(endif)

				;update routing entries for the origin ?
				(call 'array :get_begin {tuple} '(_ :r1))
				(assign `((:r1 ,(* +long_size 2)) (:r1 ,(* +long_size 3))) '(:r1 :r2))
				(assign '(:r1 :r2) {session, hops})
				(switch)
				(breakif {data->kn_msg_ping_session < session})
				(vpcase {data->kn_msg_ping_session > session})
					;new routing session, clear vias, update session and hops
					(call 'array :set_length {tuple, 1})
					(call 'array :push_back {tuple, time})
					(call 'array :push_back2 {tuple, data->kn_msg_ping_session, data->kn_msg_ping_hops})
					(goto 'flood_via)
				(vpcase {data->kn_msg_ping_hops < hops})
					;better route, clear vias, update hops
					(call 'array :set_length {tuple, 3})
					(call 'array :push_back {tuple, data->kn_msg_ping_hops})
				(vp-label 'flood_via)
					(call 'array :push_back2 {tuple,
						data->kn_msg_ping_via.node_id_node1,
						data->kn_msg_ping_via.node_id_node2})
					(call 'flood_fill {statics , msg, data, node_id.node_id_node1, node_id.node_id_node2})
					(break)
				(vpcase {data->kn_msg_ping_hops = hops})
					;equal route, push via, but no need to flood onwards !
					(call 'array :push_back2 {tuple,
						data->kn_msg_ping_via.node_id_node1,
						data->kn_msg_ping_via.node_id_node2})
				(endswitch)

				;don't update services if I am orign !
				(switch)
				(breakif {data->kn_msg_ping_session <= session})
				(breakifnot {(node_id.node_id_node1 - data->kn_msg_ping_origin.node_id_node1)
							| (node_id.node_id_node2 - data->kn_msg_ping_origin.node_id_node2)})
				(default)
					(call 'str :create_from_buffer {&data->kn_msg_ping_services, msg->msg_frag_length - kn_msg_ping_services} {services})
					(call 'str :split {services, +char_lf} {_, entries})
					(call 'str :destroy {services})
					(call 'list :get_both {entries} {_, iter_begin, iter_end})
					(call 'array :get_first {tuple} {_, set})
					(call 'hset :clear {set})
					(loop-while {iter_begin /= iter_end})
						(call 'hset :insert {set, *iter_begin})
						(assign {iter_begin + +ptr_size} {iter_begin})
					(loop-end)
					(call 'list :destroy {entries})
				(endswitch)

				(pop-scope)
				(call 'sys_mail :free {msg})
				(break)
			(vpcase '(:r0 = kn_call_callback))
				;call callback with this thread/stack
				(assign {data->kn_msg_key, data->kn_msg_callback_addr} '(:r0 :r1))
				(vp-call-r :r1)
				;wake originator
				(call 'sys_task :resume {data->kn_msg_reply_id.net_id_mbox_id)})
				(call 'sys_mail :free {msg})
			(endswitch)
		(loop-end)

		;resume any ready tasks and timeouts on the timer lists
		(call 'sys_task :timer :nil '(:r0))

		;find next task we could defer to
		(assign {statics} '(:r3))
		(assign '((& :r3 (+ statics_sys_task_task_lists lh_list_size))) '(:r1))
		(assign '((& :r3 (+ statics_sys_task_task_lists (* num_task_lists lh_list_size)))) '(:r2))
		(loop-start)
			(lh-get-head :r1 0 :r4)
			(ln-get-succ :r4 0 :r5)
			(breakif '(:r5 /= 0))
			(vp-add-cr lh_list_size :r1)
		(loop-until '(:r1 = :r2))

		;defer to task if available
		(vpif '(:r5 /= 0))
			(call 'sys_task :defer '(:r4))
			(continue 'kernel_loop)
		(endif)

		;no other task ready to run so
		;exit if no tasks waiting for timers
		(lh-get-head :r3 statics_sys_task_timer_list :r4)
		(lh-get-head :r3 statics_sys_mail_timeout_list :r5)
		(ln-get-succ :r4 0 :r1)
		(ln-get-succ :r5 0 :r2)
		(vpif '(:r1 = 0))
			(breakif '(:r2 = 0) 'exit)
		(endif)

		;go to sleep till next wake time then
		(vp-cpy-cr +max_long :r6)
		(vp-cpy-rr :r6 :r7)
		(vpif '(:r1 /= 0))
			(assign '((:r4 tk_node_time)) '(:r6))
		(endif)
		(vpif '(:r2 /= 0))
			(assign '((:r5 msg_frag_data)) '(:r7))
			(assign '((:r7 0)) '(:r7))
		(endif)
		(vpif '(:r7 < :r6))
			(vp-cpy-rr :r7 :r6)
		(endif)
		(vp-sub-rr :r0 :r6)
		(host-os-call 'host :sleep '(:r6))
	(loop-end)

	;deinit best choice array
	(call 'array :deref {best_nodes})

	;deinit allocator
	(call 'sys_mem :statics_deinit)

	;exit back to load init
	(pop-scope)
	(return)

(vp-label 'flood_fill)
	;inputs
	;:r0 = mail statics
	;:r1 = flood msg
	;:r2 = flood data
	;:r3-:r4 = kernel node_id
	;trashes
	;:r0-:r14

	(vp-def (msg data knode1 knode2 vnode1 vnode2 iter_begin iter_end iter link_node statics)
		'(:r14 :r13 :r12 :r11 :r10 :r9 :r8 :r7 :r6 :r5 :r4))

	(entry `(,statics ,msg ,data ,knode1 ,knode2))

	;inc hops
	(assign `((,data ,kn_msg_ping_hops)) '(:r0))
	(vp-add-cr 1 :r0)
	(assign '(:r0) `((,data ,kn_msg_ping_hops)))
	;old via
	(load-node-id data kn_msg_ping_via vnode1 vnode2)
	;set new via
	(save-node-id data kn_msg_ping_via knode1 knode2)
	;loop over the links
	(assign `((,statics statics_sys_mail_links_array)) '(:r0))
	(class/array/get_both :r0 iter iter_end)
	(vp-cpy-rr iter iter_begin)
	(loop-while (list iter '/= iter_end) 'next_link)
		(assign `((,iter 0)) `(,link_node))
		(vp-add-cr +ptr_size iter)
		;this links peer
		(load-node-id link_node lk_node_peer_node_id knode1 knode2)
		;not there yet ?
		(assign `(,knode1 ,knode2) '(:r0 :r1))
		(vp-or-rr :r1 :r0)
		(continueif '(:r0 = 0))
		;it's the old via ?
		(assign `(,knode1) '(:r0))
		(vp-sub-rr vnode1 :r0)
		(vp-sub-rr vnode2 :r1)
		(vp-or-rr :r1 :r0)
		(continueif '(:r0 = 0))
		;have we sent to this node allready ?
		(vp-cpy-rr iter_begin :r2)
		(loop-start)
			(assign '((:r2 0)) `(,link_node))
			(vp-add-cr +ptr_size :r2)
			(breakif (list :r2 '= iter))
			(load-node-id link_node lk_node_peer_node_id :r0 :r1)
			(vp-sub-rr knode1 :r0)
			(vp-sub-rr knode2 :r1)
			(vp-or-rr :r1 :r0)
			(continueif '(:r0 = 0) 'next_link)
		(loop-end)
		;multi-cast the data
		(call 'sys_mail :alloc_obj `((,msg msg_obj) ,data (,msg msg_frag_length)) '(:r0))
		(vp-xor-rr :r1 :r1)
		(save-net-id :r0 msg_dest :r1 knode1 knode2)
		(call 'sys_mail :send '(:r0))
	(loop-end)
	(vp-ret)

(vp-label 'opts)
	;inputs
	;:r0 = argv array (pptr)
	;trashes
	;:r0-:r14
	;info
	;process command options

	(def-vars
		(pptr argv)
		(ptr arg)
		(plong table)
		(long offset)
		(int len))

	(push-scope)
	(entry {argv})

	(loop-start)
		(assign {*argv} {arg})
		(breakifnot {arg})
		(assign {argv + +ptr_size} {argv})
		(assign {$options_table} {table})
		(loop-start 'next_arg)
			(assign {*table} {offset})
			(breakifnot {offset})
			(assign {table + +ptr_size} {table})
			(call 'sys_str :compare {table, arg})
			(vpif (list (method-output 'sys_str :compare 0) '= 0))
				(assign {*argv} {arg})
				(breakifnot {arg} 'next_arg)
				(assign {arg, $options_table + offset} '(:r0 :r1))
				(vp-call-r :r1)
				(break 'next_arg)
			(endif)
			(call 'sys_str :length {table} {_, len})
			(assign {(table + len + +ptr_size) & - +ptr_size} {table})
		(loop-end)
	(loop-end)

	(pop-scope)
	(return)

(vp-label 'opt_run)
	;inputs
	;:r0 = argv pointer (pubyte)
	;outputs
	;:r0-:r2 = 0 if error, else ID (net_id)
	;trashes
	;:r0-:r14

	(def-vars
		(ptr arg func msg)
		(struct id net_id_size)
		(uint length))

	(push-scope)
	(entry {arg})

	;is this a lisp file
	(assign {0 => id.net_id_mbox_id => id.net_id_node_id.node_id_node1} {id.net_id_node_id.node_id_node2})
	(call 'sys_str :length {arg} {_, length})
	(vpif {length >= 5})
		(call 'sys_str :compare {arg + length - 5, ".lisp"} {length})
	(endif)
	(vpifnot {length})
		;yup it's a .lisp file, check it exists
		(call 'sys_pii :stat {arg, @sys/statics/statics.statics_sys_load_stat_buffer} {func})
		(breakif {func})
		;start lisp run task and send args
		(call 'sys_load :bind `(,(str (f-path 'lisp :run))) '(:r0))
		(breakif '(:r0 = 0))
		(call 'sys_task :start '(:r0)
			{_, _, id.net_id_mbox_id, id.net_id_node_id.node_id_node1, id.net_id_node_id.node_id_node2})
		(call 'str :create_from_cstr {arg} {arg})
		(call 'sys_mail :alloc_obj {arg, &arg->str_data, arg->str_length} {msg})
		(assign {msg, id.net_id_mbox_id, id.net_id_node_id.node_id_node1, id.net_id_node_id.node_id_node2}
			'(:r0 :r2 :r3 :r4))
		(save-net-id :r0 msg_dest)
		(call 'sys_mail :send '(:r0))
		(call 'str :deref {arg})
	(else)
		;open as raw task and return mailbox ID
		(call 'sys_load :bind {arg} {func})
		(breakifnot {func})
		;start this function as task
		(call 'sys_task :start {func}
			{_, _, id.net_id_mbox_id, id.net_id_node_id.node_id_node1, id.net_id_node_id.node_id_node2})
	(endif)

	(exit {id.net_id_mbox_id, id.net_id_node_id.node_id_node1, id.net_id_node_id.node_id_node2})
	(pop-scope)
	(return)

(vp-label 'opt_link)
	;inputs
	;:r0 = argv pointer (pubyte)
	;trashes
	;:r0-:r11

	(entry '(:r0))

	;start link
	(vp-push :r0)
	(assign `(,(str (f-path 'sys_link :link))) '(:r0))
(vp-label 'opt_link_run)
	(call 'sys_load :bind '(:r0) '(:r0))
	(vp-pop :r8)
	(vpif '(:r0 /= 0))
		(call 'sys_task :start '(:r0) '(_ _ :r9 :r10 :r11))
		;params message
		(call 'sys_str :length '(:r8) '(_ :r0))
		(call 'sys_mail :alloc '(:r0) '(:r0 :r1))
		(save-net-id :r0 msg_dest :r9 :r10 :r11)
		(vp-cpy-rr :r0 :r3)
		(call 'sys_str :copy '(:r8 :r1))
		;send to link task
		(call 'sys_mail :send '(:r3))
	(endif)
	(vp-ret)

	(vp-align +ptr_size)
(vp-label 'options_table)
	(vp-long `(- ,(label-sym 'opt_run) ,(label-sym 'options_table)))
		(vp-cstr "-run")
		(vp-align +ptr_size)
	(vp-long `(- ,(label-sym 'opt_link) ,(label-sym 'options_table)))
		(vp-cstr "-l")
		(vp-align +ptr_size)
	(vp-long 0)

(def-func-end)

(def-method 'sys_kernel :id)
	;outputs
	;:r0-:r1 = node id (node_id)
	;trashes
	;:r0-:r1

	(fn-bind 'sys/statics/statics :r1)
	(exit 'sys_kernel :id
		`((:r1 ,(+ statics_sys_task_kernel_node_id node_id_node1))
		(:r1 ,(+ statics_sys_task_kernel_node_id node_id_node2))))
	(vp-ret)

(def-func-end)

(def-method 'sys_kernel :ping)
	;started by kernel at boot

	(def-struct local 0
		(struct node_id node_id_size)
		(ulong now))

	(vp-alloc local_size)

	;don't count ping or postman tasks in load balancing
	(fn-bind 'sys/statics/statics :r0)
	(assign '((:r0 statics_sys_task_task_count)) '(:r1))
	(vp-sub-cr 2 :r1)
	(assign '(:r1) '((:r0 statics_sys_task_task_count)))

	(call 'sys_kernel :id :nil `((:rsp ,(+ local_node_id node_id_node1)) (:rsp ,(+ local_node_id node_id_node2))))
	(vp-cpy-cr 2500000 :r4)
	(loop-start)
		(call 'sys_math :i_rand '(1000000) '(:r0))
		(vp-add-rr :r4 :r0)
		(call 'sys_task :sleep '(:r0))

		;send services/routing ping message
		(call 'sys_mail :ping)

		;purge stale nodes
		(call 'sys_pii :time :nil '((:rsp local_now)))
		(fn-bind 'sys/statics/statics :r0)
		(call 'hmap :each '((:r0 statics_sys_mail_node_map) ($ purge_callback) :rsp))

		;purge stale messages and parcels
		(fn-bind 'sys/statics/statics :r0)
		(call 'purge_mail '((& :r0 statics_sys_mail_offchip_list) (:rsp local_now)))
		(fn-bind 'sys/statics/statics :r0)
		(call 'purge_mail '((& :r0 statics_sys_mail_parcel_list) (:rsp local_now)))

		;next ping period
		(vp-cpy-cr (- ping_period 500000) :r4)
	(loop-end)

	(vp-free local_size)
	(vp-ret)

(vp-label 'purge_callback)
	;inputs
	;:r0 = predicate data (ptr)
	;:r1 = element iterator (pptr)
	;:r2 = bucket list pointer (ptr)

	(def-struct local 0
		(ptr bucket)
		(pptr iter))

	(vp-def (data iter bucket key tuple kid1 kid2 did1 did2))

	(vp-alloc local_size)
	(entry 'hmap :each_callback `(,data ,iter ,bucket))
	(assign `(,iter ,bucket) '((:rsp local_iter) (:rsp local_bucket)))

	(assign `((,iter 0) (,iter ,+ptr_size)) `(,key ,tuple))
	(load-node-id key str_data kid1 kid2)
	(load-node-id data (+ local_node_id node_id_node1) did1 did2)
	(vp-sub-rr did1 kid1)
	(vp-sub-rr did2 kid2)
	(vp-or-rr kid2 kid1)
	(switch)
	(breakif (list kid1 '= 0))
	(assign `((,tuple array_begin) (,data local_now)) `(,tuple ,kid1))
	(assign `((,tuple ,+ptr_size)) `(,kid2))
	(vp-sub-rr kid2 kid1)
	(breakif (list kid1 '< (* ping_period 2)))
	(default)
		(call 'obj :deref `((,tuple 0)))
		(call 'list :erase2 '((:rsp local_bucket) (:rsp local_iter)))
	(endif)

	(vp-free local_size)
	(vp-ret)

(vp-label 'purge_mail)
	;inputs
	;:r0 = mail list (ptr)
	;:r1 = now (ulong)

	(def-struct local 0
		(ptr next)
		(ulong now))

	(vp-def (time now node next))

	(vp-alloc local_size)
	(entry `(,next ,now))

	(assign `(,now) '((:rsp local_now)))
	(loop-list-forward next 0 node next)
		(assign `((,node msg_timestamp)) `(,time))
		(vp-sub-rr now time)
		(continueif `(,time >= ,(* ping_period -2)))
		(vp-cpy-rr node :r0)
		(ln-remove-node node :r1)
		(assign `(,next) '((:rsp local_next)))
		(call 'sys_mail :free '(:r0))
		(assign '((:rsp local_next) (:rsp local_now)) `(,next ,now))
	(loop-end)

	(vp-free local_size)
	(vp-ret)

(def-func-end)
