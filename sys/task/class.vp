(include "lib/asm/func.inc")
(include "././kernel/class.inc")
(include "././str/class.inc")
(include "class/list/class.inc")
(include "class/str/class.inc")
(include "././statics/class.inc")
(include "././load/class.inc")

(def-method 'sys_task :statics_init)
	;info
	;init task statics

	;init timer/task lists
	(fn-bind 'sys/statics/statics :r0)
	(vp-xor-rr :r1 :r1)
	(vp-cpy-ri :r1 :r0 statics_sys_task_then)
	(vp-add-cr statics_sys_task_timer_list :r0)
	(vp-lea-i :r0 (* (+ num_task_lists 1) lh_list_size) :r1)
	(loop-start)
		(lh-init :r0 :r2)
		(vp-add-cr lh_list_size :r0)
	(loop-until '(:r0 = :r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_task :count)
	;inputs
	;:r0 = task count bias (int)
	;outputs
	;:r0 = new task count (int)
	;trashes
	;:r0-:r2

	(entry 'sys_task :count '(:r0))

	(fn-bind 'sys/statics/statics :r1)
	(assign '((:r1 statics_sys_task_task_count)) '(:r2))
	(vp-add-rr :r2 :r0)
	(assign '(:r0) '((:r1 statics_sys_task_task_count)))

	(exit 'sys_task :count '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_task :callback)
	;inputs
	;:r0 = user data address (ptr)
	;:r1 = callback address (ptr)
	;trashes
	;:r0-:r14

	(vp-def (tcb ktcb usr addr msg data)
		'(:r7 :r8 :r9 :r10 :r11 :r12))

	;test if we are the kernel task
	(fn-bind 'sys/statics/statics tcb)
	(assign `((,tcb statics_sys_task_current_tcb) (,tcb statics_sys_task_kernel_tcb)) `(,tcb ,ktcb))
	(vpif (list tcb '= ktcb))
		;yes we can just do local call
		(vp-jmp-r :r1)
	(endif)

	(entry 'sys_task :callback `(,usr ,addr))

	;allocate mail message
	(call 'sys_mail :alloc '(kn_msg_callback_size) `(,msg ,data))

	;fill in destination, reply and function
	(call 'sys_kernel :id :nil '(:r0 :r1))
	(vp-xor-rr :r2 :r2)
	(save-net-id msg msg_dest :r2 :r0 :r1)
	(vp-cpy-cr kn_call_callback :r0)
	(assign `(,usr) `((,data ,kn_msg_key)))
	(assign '(:r0) `((,data ,kn_msg_func)))
	(assign `(,tcb) `((,data ,(+ kn_msg_reply_id net_id_mbox_id))))
	(assign `(,addr) `((,data ,kn_msg_callback_addr)))

	;send mail to kernel then suspend till kernel wakes us
	(call 'sys_mail :send `(,msg))
	(jump 'sys_task :suspend)

(def-func-end)

(def-method 'sys_task :mailbox)
	;outputs
	;:r0-:r2 = current ID (net_id)
	;trashes
	;:r0-:r2

	(fn-bind 'sys/statics/statics :r0)
	(assign `((:r0 ,(+ statics_sys_task_kernel_node_id node_id_node1))
			(:r0 ,(+ statics_sys_task_kernel_node_id node_id_node2))
			(:r0 statics_sys_task_current_tcb))
		'(:r1 :r2 :r0))
	(assign '((:r0 tk_node_mbox_id)) '(:r0))

	(exit 'sys_task :mailbox '(:r0 :r1 :r2))
	(vp-ret)

(def-func-end)

(def-method 'sys_task :restore)
	;trashes
	;:r0-:r14
	;info
	;restore next ready task

	(fn-bind 'sys/statics/statics :r2)
	(assign '((& :r2 statics_sys_task_task_lists)) '(:r1))
	(loop-start)
		(lh-get-head :r1 0 :r0)
		(ln-get-succ :r0 0 :r3)
		(breakif '(:r3 /= 0))
		(vp-add-cr lh_list_size :r1)
	(loop-end)
	(assign '(:r0 (:r0 tk_node_stack)) '((:r2 statics_sys_task_current_tcb) :rsp))

	;pop task state
	(tk-load-state)
	(vp-ret)

(def-func-end)

(def-method 'sys_task :defer)
	;inputs
	;:r0 = task control node to defer to (ptr)
	;trashes
	;none
	;info
	;restore task

	;push task state
	(tk-save-state)

	;save stack pointer
	(fn-bind 'sys/statics/statics :r1)
	(assign '((:r1 statics_sys_task_current_tcb)) '(:r2))
	(vp-cpy-ri :rsp :r2 tk_node_stack)
	(assign '(:r0 (:r0 tk_node_stack)) '((:r1 statics_sys_task_current_tcb) :rsp))

	;pop task state
	(tk-load-state)
	(vp-ret)

(def-func-end)

(def-method 'sys_task :suspend)
	;trashes
	;none
	;info
	;suspend current task, switch to next task

	;push task state
	(tk-save-state)

	;save stack pointer
	(fn-bind 'sys/statics/statics :r0)
	(assign '((:r0 statics_sys_task_current_tcb)) '(:r0))
	(vp-cpy-ri :rsp :r0 tk_node_stack)

	;remove task control block, and flag as suspended
	(vp-cpy-rr :r0 :r2)
	(vp-xor-rr :r1 :r1)
	(ln-remove-node :r2 :r3)
	(ln-set-succ :r0 0 :r1)

	;restore next task
	(jump 'sys_task :restore)

(def-func-end)

(def-method 'sys_task :resume)
	;inputs
	;:r0 = task control node to resume (ptr)
	;outputs
	;:r0 = task control node to resume (ptr)
	;trashes
	;:r1-:r2

	(entry 'sys_task :resume '(:r0))

	;is it in suspended state ?
	(ln-get-succ :r0 0 :r1)
	(vpif '(:r1 = 0))
		;add to task list
		(assign '((:r0 tk_node_priority)) '(:r2))
		(fn-bind 'sys/statics/statics :r1)
		(vp-mul-cr lh_list_size :r2)
		(vp-add-cr statics_sys_task_task_lists :r1)
		(vp-add-rr :r2 :r1)
		(lh-add-at-tail :r1 :r0 :r2)
	(endif)

	(exit 'sys_task :resume '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_task :sleep)
	;inputs
	;:r0 = time delay in usec (ulong)
	;trashes
	;none
	;info
	;0 for yield

	(entry 'sys_task :sleep '(:r0))

	;push task state
	(tk-save-state)

	;save stack pointer
	(fn-bind 'sys/statics/statics :r4)
	(assign '((:r4 statics_sys_task_current_tcb)) '(:r1))
	(vp-cpy-ri :rsp :r1 tk_node_stack)

	;remove task control block
	(vp-cpy-rr :r1 :r2)
	(ln-remove-node :r2 :r3)

	;just yield ?
	(vpif '(:r0 = 0))
		;move task to end of its list
		(lh-add-at-tail :r2 :r1 :r0)
	(else)
		;calculate wake time
		(vp-cpy-rr :r0 :r2)
		(call 'host_os :pii_time :nil '(:r0))
		(vp-add-rr :r2 :r0)
		(assign '(:r0) '((:r1 tk_node_time)))

		;insert into timer list
		(loop-list-forward :r4 statics_sys_task_timer_list :r4 :r2)
			(assign '((:r4 tk_node_time)) '(:r3))
		(loop-until '(:r0 < :r3))
		(ln-add-node-before :r4 :r1 :r0)
	(endif)

	;restore next task
	(jump 'sys_task :restore)

(def-func-end)

(def-method 'sys_task :set_priority)
	;inputs
	;:r0 = priority (uint)
	;trashes
	;:r0-:r4

	(entry 'sys_task :set_priority '(:r0))

	(fn-bind 'sys/statics/statics :r1)
	(assign '((:r1 statics_sys_task_current_tcb)) '(:r2))
	(assign '(:r0) '((:r2 tk_node_priority)))

	;remove task control block
	(vp-cpy-rr :r2 :r3)
	(ln-remove-node :r3 :r4)

	;add to task new list
	(vp-mul-cr lh_list_size :r0)
	(vp-add-cr statics_sys_task_task_lists :r1)
	(vp-add-rr :r0 :r1)
	(lh-add-at-head :r1 :r2 :r3)
	(vp-ret)

(def-func-end)

(def-method 'sys_task :start)
	;inputs
	;:r0 = new task func pointer (ptr)
	;outputs
	;:r0 = new task control block (ptr)
	;:r1 = new task mailbox address (ptr)
	;:r2-:r4 = new task ID (net_id)
	;trashes
	;:r0-:r14

	(def-vars
		(ptr func statics tcb)
		(ulong tcb_size))

	(push-scope)
	(entry 'sys_task :start {func})

	;increment task count
	(call 'sys_task :count '(1))

	;create new task control block and stack
	(call 'sys_mem :alloc {ushort(func - ubyte(func - +byte_size) - +short_size) + tk_node_size} {tcb, tcb_size})
(errorcase
	(call 'sys_mem :fill {tcb, tcb_size, 0}))

	;alloc task mailbox and tls
	(call 'sys_mail :alloc_mbox :nil {tcb->tk_node_mbox_id, tcb->tk_node_mbox_addr})
	(call 'array :create :nil {tcb->tk_node_tls})
	(assign {0} {tcb->tk_node_lisp})

	;init task control block stack, pc and stop address's
	(assign {func, tcb, tcb + tcb_size, 0, num_task_lists - 1} '(:r1 :r4 :r0 :r2 :r3))
	(ln-set-succ :r4 0 :r2)
	(assign '(:r3 :r0) '((:r4 tk_node_priority) (:r4 tk_node_stack_top)))
	(f-bind 'sys_task :stop :r2)
	(vp-stack-init :r0 :r1 :r2)
	(assign '(:r0) {tcb->tk_node_stack})

	;resume new task
	(call 'sys_task :resume {tcb})

	;return tcb and mailbox info
	(assign {@sys/statics/statics} {statics})
	(exit 'sys_task :start
		{tcb, tcb->tk_node_mbox_addr, tcb->tk_node_mbox_id,
		statics->statics_sys_task_kernel_node_id.node_id_node1,
		statics->statics_sys_task_kernel_node_id.node_id_node2})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_task :stop)
	;info
	;stop current task, switch to next task

	(def-vars
		(ptr statics tcb))
(errorcase
	(def-vars
		(pptr stack stack_end)))

	(push-scope)

	;decrement task count
	(call 'sys_task :count '(-1))

	;free task mailbox and tls
	(assign {@sys/statics/statics} {statics})
	(assign {statics->statics_sys_task_current_tcb} {tcb})
	(call 'sys_mail :free_mbox {tcb->tk_node_mbox_id})
	(call 'array :deref {tcb->tk_node_tls})

	;remove task control block
	(vp-def (tcb next_tcb))
	(assign {tcb} (list tcb))
	(ln-remove-node tcb next_tcb)

(errorcase
	;test stack space canary
	(assign {&tcb->tk_node_size} {stack})
	(assign {stack + tk_stack_margin} {stack_end})
	(loop-while {stack /= stack_end})
		(vpif {*stack /= 0})
			(abort "Stack overrun !")
		(endif)
		(assign {stack + +ptr_size} {stack})
	(loop-end))

	;free our task control block
	(call 'sys_mem :free {tcb})
	(jump 'sys_task :restore)

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_task :tcb)
	;outputs
	;:r0 = current task tcb (ptr)
	;trashes
	;:r0

	(fn-bind 'sys/statics/statics :r0)
	(exit 'sys_task :tcb '((:r0 statics_sys_task_current_tcb)))
	(vp-ret)

(def-func-end)

(def-method 'sys_task :timer)
	;outputs
	;:r0 = current time (ulong)
	;trashes
	;:r0-:r14
	;info
	;resume tasks ready to run.
	;mail mailboxes on timouts.

	(call 'host_os :pii_time :nil '(:r6))
	(fn-bind 'sys/statics/statics :r3)
	(loop-list-forward :r3 statics_sys_task_timer_list :r0 :r7)
		(assign '((:r0 tk_node_time)) '(:r1))
		(breakif '(:r1 > :r6))
		;remove from timer list and resume
		(vp-cpy-rr :r0 :r5)
		(vp-xor-rr :r1 :r1)
		(ln-remove-node :r5 :r4)
		(ln-set-succ :r0 0 :r1)
		(call 'sys_task :resume '(:r0))
	(loop-end)
	(fn-bind 'sys/statics/statics :r5)
	(loop-list-forward :r5 statics_sys_mail_timeout_list :r5 :r7)
		(assign '((:r5 msg_frag_data)) '(:r1))
		(assign '((:r1 0)) '(:r1))
		(breakif '(:r1 > :r6))
		;remove from timeout list and post
		(vp-cpy-rr :r5 :r0)
		(ln-remove-node :r5 :r4)
		(call 'sys_mail :send '(:r0))
	(loop-end)

	(exit 'sys_task :timer '(:r6))
	(vp-ret)

(def-func-end)

(def-method 'sys_task :dump)
	;inputs
	;:rsp = task stack pointer (ptr)
	;trashes
	;none

	(vp-def (stack_top sptr node node_offset) '(:r3 :r4))

	(vp-push :r0 :r1 :r2 :r3 :r4)

	(fn-bind 'sys/statics/statics stack_top)
	(assign `((,stack_top statics_sys_task_current_tcb) (& :rsp ,(* +ptr_size 5))) `(,stack_top ,sptr))
	(assign `((,stack_top tk_node_stack_top)) `(,stack_top))
	(loop-while (list sptr '< stack_top))
		(call 'sys_load :find `((,sptr 0)) `(,node ,node_offset))
		(vpif (list node '/= 0))
			(vp-push node_offset)
			(call 'host_os :pii_write_str `(2 (& ,node +fn_header_pathname)))
			(call 'host_os :pii_write_str `(2 " ("))
			(vp-pop node_offset)
			(call 'host_os :pii_write_num `(2 ,node_offset 10))
			(call 'host_os :pii_write_str `(2 ,(cat ")" (ascii-char 10))))
		(endif)
		(vp-add-cr +ptr_size sptr)
	(loop-end)

	(vp-pop :r0 :r1 :r2 :r3 :r4)
	(vp-ret)

(def-func-end)

(def-method 'sys_task :stacks)
	;outputs
	;:r0 = maximum task stack size (uint)
	;trashes
	;:r0-:r8

	(vp-def (max_stack tasks tasks_end node next stack stack_top kernel_tcb statics))

	(vp-xor-rr max_stack max_stack)
	(fn-bind 'sys/statics/statics statics)
	(assign `((,statics statics_sys_task_kernel_tcb)) `(,kernel_tcb))
	(assign `((& ,statics statics_sys_task_timer_list)) `(,tasks))
	(assign `((& ,tasks ,(* (+ num_task_lists 1) lh_list_size))) `(,tasks_end))
	(loop-start)
		(loop-list-forward tasks 0 node next)
			(continueif `(,node = ,kernel_tcb))
			(assign `((,node tk_node_stack)) `(,stack))
		(errorcase
			(assign `((& ,node tk_node_size)) `(,stack))
			(loop-start)
				(vp-cpy-ir stack +ptr_size statics)
				(breakif `(,statics /= 0))
				(vp-add-cr +ptr_size stack)
			(loop-end))
			(assign `((,node tk_node_stack_top)) `(,stack_top))
			(vp-sub-rr stack stack_top)
			(vp-max-rr stack_top max_stack)
		(loop-end)
		(vp-add-cr lh_list_size tasks)
	(loop-until `(,tasks = ,tasks_end))

	(exit 'sys_task :stacks `(,max_stack))
	(vp-ret)

(def-func-end)
