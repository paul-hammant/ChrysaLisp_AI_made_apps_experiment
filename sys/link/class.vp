(include "lib/asm/func.inc")
(include "./class.inc")
(include "././kernel/class.inc")
(include "class/array/class.inc")
(include "class/node/class.inc")
(include "././statics/class.inc")

(def-method 'sys_link :link)
	;started by kernel for each link

	(def-vars
		(struct lk_node lk_node_size)
		(ptr statics params msg data mem)
		(pubyte pdata)
		(long handle)
		(struct node_id node_id_size))

	(push-scope)

	;decrement task count
	;don't count links in load balancing
	(call 'sys_task :count '(-3))

	;init and add link node to link array
	(assign {@sys/statics/statics} {statics})
	(call 'sys_kernel :id :nil {node_id.node_id_node1, node_id.node_id_node2})
	(assign {0 => lk_node.lk_node_task_count => lk_node.lk_node_peer_node_id.node_id_node1}
		{lk_node.lk_node_peer_node_id.node_id_node2})
	(call 'array :push_back {statics->statics_sys_mail_links_array, &lk_node})

	;read params msg from kernel
	(call 'sys_mail :mymail :nil {params, pdata})

	;open shared memory file
	(call 'host_os :pii_open_shared {pdata, lk_shmem_size} {handle})

	;map shared object
	(call 'host_os :pii_mmap {lk_shmem_size, handle, +mmap_shared} {mem})

	;put my towel down if seams available
	(vpifnot {mem->lk_shmem_towel})
		(assign {node_id.node_id_node1} {mem->lk_shmem_towel})
	(endif)

	;start out link and send params
	(call 'sys_mail :alloc {16} {msg, data})
	(call 'sys_task :start (cat {@} (f-path 'sys_link :out)) '(_ _ :r2 :r3 :r4))
	(assign {msg, data, &lk_node, mem} '(:r0 :r1 :r5 :r6))
	(save-net-id :r0 msg_dest)
	(assign '(:r5 :r6) '((:r1 0) (:r1 +ptr_size)))
	(call 'sys_mail :send '(:r0))

	;start in link and send params
	(call 'sys_mail :alloc {16} {msg, data})
	(call 'sys_task :start (cat {@} (f-path 'sys_link :in)) '(_ _ :r2 :r3 :r4))
	(assign {msg, data, &lk_node, mem} '(:r0 :r1 :r5 :r6))
	(save-net-id :r0 msg_dest)
	(assign '(:r5 :r6) '((:r1 0) (:r1 +ptr_size)))
	(call 'sys_mail :send '(:r0))

	;wait till link dies or told to quit...
	(loop-start)
		(call 'sys_task :sleep '(1000000))
		;exit if signaled by kernel...
	(loop-end)

	;unmap object
	(call 'host_os :pii_munmap {mem, lk_shmem_size, +mmap_shared})

	;close it
	(call 'host_os :pii_close_shared {pdata, handle})

	;free params msg
	(call 'sys_mail :free {params})

	;restore task count
	(call 'sys_task :count '(3))
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_link :out)

	(def-vars
		(ptr statics lk_node msg data tx tx_msg key)
		(struct node_id node_id_size))

	(push-scope)

	(assign {@sys/statics/statics} {statics})
	(call 'node :create '(0 +node_id_size) {key})

	;read params msg
	(call 'sys_mail :mymail :nil {msg, data})
	(assign {ptr(data + 0)} {lk_node})
	(assign {ptr(data + +ptr_size)} {tx})
	(call 'sys_mail :free {msg})

	;switch to link priority and sleep to
	;let other links join us at this priority
	(call 'sys_task :set_priority '(1))
	(call 'sys_task :sleep '(500000))

	;assign tx channel
	(call 'sys_kernel :id :nil {node_id.node_id_node1, node_id.node_id_node2})
	(vpif {tx->lk_shmem_towel = node_id.node_id_node1})
		(assign {tx + lk_shmem_chan_1} {tx})
	(else)
		(assign {tx + lk_shmem_chan_2} {tx})
	(endif)
	(assign {&tx->lk_chan_msg0} {tx_msg})

	;write messages through the shared buffer
	(loop-start)
		;do we have a free out slot
		(loop-while {tx_msg->lk_buf_status = lk_chan_status_ready} 'sleep)
			;write my task count and cpu id
			(assign {node_id.node_id_node1, node_id.node_id_node2, statics->statics_sys_task_task_count}
				{tx_msg->lk_buf_peer_node_id.node_id_node1, tx_msg->lk_buf_peer_node_id.node_id_node2, tx_msg->lk_buf_task_count})

			;see if any mail for this link
			(call 'sys_mail :ready
				{lk_node->lk_node_peer_node_id.node_id_node1,
				lk_node->lk_node_peer_node_id.node_id_node2,
				key} {msg})
			(vpif {msg})
				;copy message data
				(assign {msg->msg_frag_length} {tx_msg->lk_buf_frag_length})
				(assign {msg->msg_frag_offset} {tx_msg->lk_buf_frag_offset})
				(assign {msg->msg_total_length} {tx_msg->lk_buf_total_length})
				(assign {msg->msg_dest.net_id_mbox_id} {tx_msg->lk_buf_dest.net_id_mbox_id})
				(assign {msg->msg_dest.net_id_node_id.node_id_node1} {tx_msg->lk_buf_dest.net_id_node_id.node_id_node1})
				(assign {msg->msg_dest.net_id_node_id.node_id_node2} {tx_msg->lk_buf_dest.net_id_node_id.node_id_node2})
				(assign {msg->msg_src.net_id_mbox_id} {tx_msg->lk_buf_src.net_id_mbox_id})
				(assign {msg->msg_src.net_id_node_id.node_id_node1} {tx_msg->lk_buf_src.net_id_node_id.node_id_node1})
				(assign {msg->msg_src.net_id_node_id.node_id_node2} {tx_msg->lk_buf_src.net_id_node_id.node_id_node2})
				(call 'sys_mem :copy {msg->msg_frag_data, &tx_msg->lk_buf_data, (msg->msg_frag_length + +long_size - 1) & -+long_size})

				;busy status
				(vp-sync)
				(assign {lk_chan_status_busy} {tx_msg->lk_buf_status})

				;free message
				(call 'sys_mail :free {msg})

				;move on to next msg chan
				(assign {&tx_msg->lk_buf_size} {tx_msg})
				(vpif {tx_msg = &tx->lk_chan_size})
					(assign {&tx->lk_chan_msg0} {tx_msg})
				(endif)
			(else)
				;just a ping
				(assign {0} {tx_msg->lk_buf_frag_length})
				(assign {0xffffffff} {tx_msg->lk_buf_total_length})

				;busy status
				(vp-sync)
				(assign {lk_chan_status_busy} {tx_msg->lk_buf_status})

				;move on to next msg chan
				(assign {&tx_msg->lk_buf_size} {tx_msg})
				(vpif {tx_msg = &tx->lk_chan_size})
					(assign {&tx->lk_chan_msg0} {tx_msg})
				(endif)
				(break 'sleep)
			(endif)

			;let other links run
			(call 'sys_task :sleep '(0))
		(loop-end)

		;small sleep if nothing to do
		(call 'sys_task :sleep '(1000))

		;exit if signaled by kernel...
	(loop-end)

	(call 'node :destroy {key})

	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_link :in)

	(def-vars
		(ptr lk_node msg data rx rx_msg)
		(struct node_id node_id_size))

	(push-scope)

	;read params msg
	(call 'sys_mail :mymail :nil {msg, data})
	(assign {ptr(data + 0)} {lk_node})
	(assign {ptr(data + +ptr_size)} {rx})
	(call 'sys_mail :free {msg})

	;switch to link priority and sleep to
	;let other links join us at this priority
	(call 'sys_task :set_priority '(1))
	(call 'sys_task :sleep '(1000000))

	;assign rx channel
	(call 'sys_kernel :id :nil {node_id.node_id_node1, node_id.node_id_node2})
	(vpif {rx->lk_shmem_towel = node_id.node_id_node1})
		(assign {rx + lk_shmem_chan_2} {rx})
	(else)
		(assign {rx + lk_shmem_chan_1} {rx})
	(endif)
	(assign {&rx->lk_chan_msg0} {rx_msg})

	;read messages from the shared buffer
	(loop-start)
		;check for received message
		(loop-while {rx_msg->lk_buf_status = lk_chan_status_busy})
			;read neighbor task count and peer id
			(assign {rx_msg->lk_buf_peer_node_id.node_id_node1, rx_msg->lk_buf_peer_node_id.node_id_node2, rx_msg->lk_buf_task_count}
				{lk_node->lk_node_peer_node_id.node_id_node1, lk_node->lk_node_peer_node_id.node_id_node2, lk_node->lk_node_task_count})

			;is this just a ping ?
			(vpif {rx_msg->lk_buf_total_length /= 0xffffffff})
				;is this msg part of a parcel for this node
				(vpif {rx_msg->lk_buf_total_length
					&& rx_msg->lk_buf_dest.net_id_node_id.node_id_node1 = node_id.node_id_node1
					&& rx_msg->lk_buf_dest.net_id_node_id.node_id_node2 = node_id.node_id_node2})
					;copy direct from link buffer to parcel !
					(call 'sys_mail :in {rx_msg})
				(else)
					;allocate msg, copy over data
					(call 'sys_mail :alloc {rx_msg->lk_buf_frag_length} {msg, data})
					(assign {rx_msg->lk_buf_frag_length} {msg->msg_frag_length})
					(assign {rx_msg->lk_buf_frag_offset} {msg->msg_frag_offset})
					(assign {rx_msg->lk_buf_total_length} {msg->msg_total_length})
					(assign {rx_msg->lk_buf_dest.net_id_mbox_id} {msg->msg_dest.net_id_mbox_id})
					(assign {rx_msg->lk_buf_dest.net_id_node_id.node_id_node1} {msg->msg_dest.net_id_node_id.node_id_node1})
					(assign {rx_msg->lk_buf_dest.net_id_node_id.node_id_node2} {msg->msg_dest.net_id_node_id.node_id_node2})
					(assign {rx_msg->lk_buf_src.net_id_mbox_id} {msg->msg_src.net_id_mbox_id})
					(assign {rx_msg->lk_buf_src.net_id_node_id.node_id_node1} {msg->msg_src.net_id_node_id.node_id_node1})
					(assign {rx_msg->lk_buf_src.net_id_node_id.node_id_node2} {msg->msg_src.net_id_node_id.node_id_node2})
					(call 'sys_mem :copy {&rx_msg->lk_buf_data, data, rx_msg->lk_buf_frag_length + +long_size - 1) & -+long_size})
					;clear status
					(assign {lk_chan_status_ready} {rx_msg->lk_buf_status})

					;send onwards
					(call 'sys_mail :send {msg})
				(endif)
			(else)
				;clear status
				(assign {lk_chan_status_ready} {rx_msg->lk_buf_status})
			(endif)

			;move on to next msg chan
			(assign {&rx_msg->lk_buf_size} {rx_msg})
			(vpif {rx_msg = &rx->lk_chan_size})
				(assign {&rx->lk_chan_msg0} {rx_msg})
			(endif)

			;let other links run
			(call 'sys_task :sleep '(0))
		(loop-end)

		;small sleep as nothing to do
		(call 'sys_task :sleep '(1000))

		;exit if signaled by kernel...
	(loop-end)

	(pop-scope)
	(return)

(def-func-end)
