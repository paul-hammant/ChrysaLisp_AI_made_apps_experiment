(include "lib/asm/func.inc")
(include "./class.inc")

(def-method 'sys_str :compare)
	;inputs
	;:r0 = c string1 (pubyte)
	;:r1 = c string2 (pubyte)
	;outputs
	;:r0 = 0 if same, else -, +
	;trashes
	;:r0-:r3

	(entry 'sys_str :compare '(:r0 :r1))
	(loop-start)
		(vp-simd vp-cpy-ir-ub '(:r0 :r1) '(0) '(:r2 :r3))
		(vp-sub-rr :r3 :r2)
		(breakif '(:r2 /= 0) '(:r3 = 0))
		(vp-simd vp-add-cr '(+byte_size) '(:r0 :r1))
	(loop-end)
	(exit 'sys_str :compare '(:r2))
	(vp-ret)

(def-func-end)

(def-method 'sys_str :copy)
	;inputs
	;:r0 = c string (pubyte)
	;:r1 = c string copy (pubyte)
	;outputs
	;:r0 = c string end (pubyte)
	;:r1 = c string copy end (pubyte)
	;trashes
	;:r2

	(entry 'sys_str :copy '(:r0 :r1))
	(loop-start)
		(vp-cpy-ir-ub :r0 0 :r2)
		(vp-simd vp-add-cr '(+byte_size) '(:r1 :r0))
		(vp-cpy-ri-b :r2 :r1 (neg +byte_size))
	(loop-until '(:r2 = 0))
	(exit 'sys_str :copy '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_str :from_long)
	;inputs
	;:r0 = number (ulong)
	;:r1 = c string buffer (pubyte)
	;:r2 = base (ulong)
	;outputs
	;:r0 = c string buffer end (pubyte)
	;trashes
	;:r0-:r4

	(entry 'sys_str :from_long '(:r0 :r1 :r2))

	(vp-cpy-rr :r2 :r3) ;base
	(vp-cpy-rr :r1 :r4) ;buffer start
	(loop-start)
		(vp-xor-rr :r2 :r2)
		(vp-div-rrr-u :r3 :r2 :r0)
		(vp-add-cr (ascii-code "0") :r2)
		(vpif '(:r2 > (ascii-code "9")))
			(vp-add-cr (- (ascii-code "A") (ascii-code ":")) :r2)
		(endif)
		(vp-cpy-ri-b :r2 :r4 0)
		(vp-add-cr +byte_size :r4)
	(loop-until '(:r0 = 0))
	(vp-cpy-ri-b :r0 :r4 0)
	(vp-cpy-rr :r4 :r0)
	(loop-start)
		(vp-sub-cr +byte_size :r4)
		(breakif '(:r4 = :r1))
		(vp-simd vp-cpy-ir-ub '(:r1 :r4) '(0) '(:r2 :r3))
		(vp-simd vp-cpy-ri-b '(:r3 :r2) '(:r1 :r4) '(0))
		(vp-add-cr +byte_size :r1)
	(loop-until '(:r1 = :r4))

	(exit 'sys_str :from_long '(:r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_str :length)
	;inputs
	;:r0 = c string (pubyte)
	;outputs
	;:r0 = c string (pubyte)
	;:r1 = c string len (bytes)
	;trashes
	;:r1-:r2

	(entry 'sys_str :length '(:r0))
	(vp-cpy-rr :r0 :r1)
	(loop-start)
		(vp-cpy-ir-ub :r1 0 :r2)
		(breakif '(:r2 = 0))
		(vp-add-cr +byte_size :r1)
	(loop-end)
	(vp-sub-rr :r0 :r1)
	(exit 'sys_str :length '(:r0 :r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_str :to_long)
	;inputs
	;:r0 = c string (pubyte)
	;:r1 = base (ulong)
	;outputs
	;:r3 = num | fixed (ulong)
	;:r4 = fixed point position (uint)
	;trashes
	;:r0-:r4

	(vp-def (bufp base c num dot))

	(entry 'sys_str :to_long `(,bufp ,base))

	(vp-simd vp-xor-rr `(,num ,dot) `(,num ,dot))
	(loop-start)
		(vp-cpy-ir-ub bufp 0 c)
		(breakif (list c '= 0))
		(vpif (list c '= (ascii-code ".")))
			(vp-cpy-cr 1 dot)
		(else)
			(vp-or-cr (- (ascii-code "a") (ascii-code "A")) c)
			(vpif (list c '>= (ascii-code "a")))
				(vp-sub-cr (- (ascii-code "a") (ascii-code "9") 1) c)
			(endif)
			(vp-sub-cr (ascii-code "0") c)
			(vp-simd vp-mul-rr `(,base) `(,num ,dot))
			(vp-add-rr c num)
		(endif)
		(vp-add-cr +byte_size bufp)
	(loop-until `(,dot >= 10000000))
	(vpif (list dot '/= 0))
		(vp-shl-cr 16 num)
		(vp-ext-rr num c)
		(vp-div-rrr-u dot c num)
	(endif)

	(exit 'sys_str :to_long `(,num ,dot))
	(vp-ret)

(def-func-end)

(def-method 'sys_str :to_num)
	;inputs
	;:r0 = c string (pubyte)
	;outputs
	;:r3 = num | fixed (ulong)
	;:r4 = fixed point position (uint)
	;trashes
	;:r0-:r5

	(vp-def (minus bufp base c num dot) '(:r5))

	(entry 'sys_str :to_num `(,bufp))

	;skip whitespace
	(assign `((,bufp 0 ub)) `(,c))
	(loop-while `(,c <= (ascii-code " ")) `(,c /= 0))
		(vp-add-cr +byte_size bufp)
		(assign `((,bufp 0 ub)) `(,c))
	(loop-end)

	;negative/positive
	(assign `(1) `(,minus))
	(vpif (list c '= (ascii-code "-")))
		(vp-add-cr +byte_size bufp)
		(vp-cpy-cr -1 minus)
	(endif)

	;base
	(assign `((,bufp 1 ub)) `(,base))
	(vp-add-cr 2 bufp)
	(vp-or-cr (- (ascii-code "a") (ascii-code "A")) base)
	(vpif `(,base = (ascii-code "x")))
		(vp-cpy-cr 16 base)
	(elseif `(,base = (ascii-code "o")))
		(vp-cpy-cr 8 base)
	(elseif `(,base = (ascii-code "b")))
		(vp-cpy-cr 2 base)
	(else)
		(vp-sub-cr 2 bufp)
		(vp-cpy-cr 10 base)
	(endif)

	;number
	(call 'sys_str :to_long `(,bufp ,base) `(,num ,dot))
	(vp-mul-rr minus num)

	(exit 'sys_str :to_num `(,num ,dot))
	(vp-ret)

(def-func-end)

(def-method 'sys_str :read_utf8)
	;inputs
	;:r0 = utf8 data pointer (pubyte)
	;outputs
	;:r0 = utf8 data pointer (pubyte)
	;:r1 = utf8 char (uint)
	;trashes
	;:r0-:r2

	(vp-def (utf8 c m))

	(defun next-utf8 (cnt)
		(vp-and-cr (>> 0b00111111 cnt) c)
		(defq i -1)
		(while (/= (setq i (inc i)) cnt)
			(vp-cpy-ir-ub utf8 i m)
			(vp-shl-cr 6 c)
			(vp-and-cr 0b00111111 m)
			(vp-add-rr m c))
		(vp-add-cr (* cnt +byte_size) utf8))

	(entry 'sys_str :read_utf8 `(,utf8))

	(vp-cpy-ir-ub utf8 0 c)
	(vp-add-cr +byte_size utf8)
	(vp-cpy-rr c m)
	(vp-and-cr 0b10000000 m)
	(vpif (list m '/= 0))
		;not 1 byte
		(vp-cpy-rr c m)
		(vp-and-cr 0b11100000 m)
		(vpif (list m '/= 0b11000000))
			;not 2 byte
			(vp-cpy-rr c m)
			(vp-and-cr 0b11110000 m)
			(vpif (list m '/= 0b11100000))
				;not 3 byte
				(vp-cpy-rr c m)
				(vp-and-cr 0b11111000 m)
				(vpif (list m '/= 0b11110000))
					;not 4 byte
					(vp-xor-rr c c)

					(exit 'sys_str :read_utf8 `(,utf8 ,c))
					(vp-ret)
				(endif)
				;4 byte
				(next-utf8 3)

				(exit 'sys_str :read_utf8 `(,utf8 ,c))
				(vp-ret)
			(endif)
			;3 byte
			(next-utf8 2)

			(exit 'sys_str :read_utf8 `(,utf8 ,c))
			(vp-ret)
		(endif)
		;2 byte
		(next-utf8 1)
	(endif)

	(exit 'sys_str :read_utf8 `(,utf8 ,c))
	(vp-ret)

(def-func-end)
