(include "lib/asm/func.inc")
(include "class/lisp/class.inc")
(include "class/num/class.inc")
(include "class/fixeds/class.inc")

(def-func 'apps/pcb/hit_line)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this buckets func line hit record rec_id num_id args)
		(pptr record_iter record_iter_end)
		(pptr buckets_iter buckets_iter_end)
		(int minx miny maxx maxy width))

	(push-scope)
	(entry '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 9)

	(list-bind-args :r1 '(:r1 :r2 :r3 :r4 :r5 :r6 :r7 :r8 :r9)
		'(:list :num :num :num :num :num :obj :list :obj))
	(assign '(:r0 :r1 :r2 :r3 :r4 :r5 :r6 :r7 :r8 :r9)
		{this, buckets, minx, miny, maxx, maxy, width, num_id, func, line})

	(call 'list :create :nil {args})
	(call 'obj :ref {line})
	(call 'obj :ref {line})
	(call 'list :push_back2 {args, line, line})

	(assign {miny * width, maxy * width} {miny, maxy})
	(loop-start)
		(call 'list :get_iters {buckets, minx + miny, maxx + miny} {_, buckets_iter, buckets_iter_end})
		(loop-start)
			(call 'list :get_both {*buckets_iter} {_, record_iter, record_iter_end})
			(loop-while {record_iter /= record_iter_end})
				(assign {*record_iter} {record})
				(call 'list :get_elem {record, 0} {_, rec_id})
				(vpif {rec_id /= num_id})
					(call 'num :ref {num_id})
					(call 'obj :ref {record})
					(call 'list :set_elem {record, num_id, 0})
					(call 'list :set_elem {args, record, 0})
					(call 'lisp :repl_apply {this, args, func} {_, hit})
					(gotoif {hit /= this->lisp_sym_nil} 'hit)
					(call 'obj :deref {hit})
				(endif)
				(assign {record_iter + +ptr_size} {record_iter})
			(loop-end)
		(loop-until {(buckets_iter + +ptr_size => buckets_iter) > buckets_iter_end})
	(loop-until {(miny + width => miny) > maxy})
	(call 'obj :ref {this->lisp_sym_nil} {hit})

(vp-label 'hit)
	(call 'list :deref {args})
	(exit {this, hit})
	(return)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(hit-line buckets minx miny maxx maxy width id func line)" +error_msg_wrong_types :r1))
	(signature '(list num num num num num num list obj)))

	(pop-scope-syms)

(def-func-end)

(def-func 'apps/pcb/add_line)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 7)

	(vp-def (bucket record this buckets minx miny maxx maxy width buckets_iter buckets_iter_end)
		(cat (method-input 'list :push_back) '(:r6 :r7 :r8 :r9 :r10 :r11 :r12 :r13 :r14)))

	(list-bind-args :r1 `(,buckets ,minx ,miny ,maxx ,maxy ,width ,record)
		'(:list :num :num :num :num :num :list))

	;bump record ref count for pushes and return
	(vp-simd vp-cpy-rr `(,maxx ,maxy) '(:r13 :r14))
	(vp-simd vp-sub-rr `(,minx ,miny) '(:r13 :r14))
	(vp-simd vp-add-cr '(1 1) '(:r13 :r14))
	(vp-mul-rr :r13 :r14)
	(vp-add-cr 1 :r14)
	(class/obj/ref record :r13 :r14)

	(vp-simd vp-mul-rr `(,width ,width) `(,miny ,maxy))
	(loop-start)
		(vp-simd vp-cpy-rr `(,minx ,maxx) `(,buckets_iter ,buckets_iter_end))
		(vp-simd vp-add-rr `(,miny ,miny) `(,buckets_iter ,buckets_iter_end))
		(class/array/get_iters buckets buckets_iter buckets_iter_end :r0)
		(loop-start)
			(call 'list :push_back `((,buckets_iter 0) ,record) `(_ ,record _ _))
			(vp-add-cr +ptr_size buckets_iter)
		(loop-until `(,buckets_iter > ,buckets_iter_end))
		(vp-add-rr width miny)
	(loop-until `(,miny > ,maxy))

	(exit `(,this ,record))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(add-line buckets minx miny maxx maxy width record)" +error_msg_wrong_types :r1))
	(signature '(list num num num num num list)))

(def-func-end)

(def-func 'apps/pcb/sub_line)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this buckets line records rec_line)
		(pptr record_iter record_iter_end)
		(pptr buckets_iter buckets_iter_end)
		(int minx miny maxx maxy width))

	(push-scope)
	(entry '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 7)

	(list-bind-args :r1 '(:r1 :r2 :r3 :r4 :r5 :r6 :r7)
		'(:list :num :num :num :num :num :fixeds))
	(assign '(:r0 :r1 :r2 :r3 :r4 :r5 :r6 :r7)
		{this, buckets, minx, miny, maxx, maxy, width, line})

	(assign {miny * width, maxy * width} {miny, maxy})
	(loop-start)
		(call 'list :get_iters {buckets, minx + miny, maxx + miny} {_, buckets_iter, buckets_iter_end})
		(loop-start)
			(assign {*buckets_iter} {records})
			(call 'list :get_both {records} {_, record_iter, record_iter_end})
			(loop-while {record_iter /= record_iter_end} 'found_line)
				(call 'list :get_elem {*record_iter, 1} {_, rec_line})
				(call 'nums :eql {line, rec_line} '(_ tmp))
				(vpif `(,tmp = 0))
					(call 'list :erase {records, record_iter})
					(break 'found_line)
				(endif)
				(assign {record_iter + +ptr_size} {record_iter})
			(loop-end)
		(loop-until {(buckets_iter + +ptr_size => buckets_iter) > buckets_iter_end})
	(loop-until {(miny + width => miny) > maxy})

	(call 'obj :ref {buckets})
	(exit {this, buckets})
	(return)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(sub-line buckets minx miny maxx maxy width line)" +error_msg_wrong_types :r1))
	(signature '(list num num num num num fixeds)))

	(pop-scope-syms)

(def-func-end)
