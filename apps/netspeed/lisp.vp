(include "lib/asm/func.inc")
(include "class/num/class.inc")
(include "class/lisp/class.inc")
(include "sys/pii/class.inc")
(include "sys/task/class.inc")
(include "sys/math/class.inc")

(def-func 'apps/netspeed/vops)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(defmacro test-block (n &rest _)
		(while (< (length _) n) (setq _ (cat _ _)))
		`(progn ~(copy (slice _ 0 n))))

	(defmacro test-block-s (n &rest _)
		(while (< (length _) n) (setq _ (cat _ _)))
		`(progn ~(shuffle (copy (slice _ 0 n)))))

	(def-vars
		(ptr this args mem1 mem2)
		(ulong regs_vops memory_vops reals_vops start end cnt))

	(push-scope)
	(entry {this, args})

	(errorif-lisp-args-sig 'error :r1 0)

	;reg ops test
	(call 'sys_pii :time :nil {start})
	(assign {0} {cnt})
	(loop-start)

		;this mix allows up to oct issue opertunities !
		;we shuffle the mix to give some spice to life.
		(vp-def (loop r1 r2 r3 r4 r5 r6 r7 r8 r9))
		(vp-cpy-cr 0 loop)
		(loop-start)
			(vp-simd vp-cpy-cr '(1 2 3 4 5 6 7 8 9) `(,r1 ,r2 ,r3 ,r4 ,r5 ,r6 ,r7 ,r8 ,r9))
			(test-block-s 990
				(vp-add-cr 3 r2) (vp-add-cr 3 r3) (vp-add-cr 3 r4) (vp-add-cr 3 r5)
				(vp-add-cr 3 r6) (vp-add-cr 3 r7) (vp-add-cr 3 r8) (vp-add-cr 3 r9)
				(vp-sub-cr 4 r2) (vp-sub-cr 4 r3) (vp-sub-cr 4 r4) (vp-sub-cr 4 r5)
				(vp-sub-cr 4 r6) (vp-sub-cr 4 r7) (vp-sub-cr 4 r8) (vp-sub-cr 4 r9)
				(vp-and-cr 5 r2) (vp-and-cr 5 r3) (vp-and-cr 5 r4) (vp-and-cr 5 r5)
				(vp-and-cr 5 r6) (vp-and-cr 5 r7) (vp-and-cr 5 r8) (vp-and-cr 5 r9)
				(vp-or-cr 6 r2) (vp-or-cr 6 r3) (vp-or-cr 6 r4) (vp-or-cr 6 r5)
				(vp-or-cr 6 r6) (vp-or-cr 6 r7) (vp-or-cr 6 r8) (vp-or-cr 6 r9)
				(vp-xor-cr 7 r2) (vp-xor-cr 7 r3) (vp-xor-cr 7 r4) (vp-xor-cr 7 r5)
				(vp-xor-cr 7 r6) (vp-xor-cr 7 r7) (vp-xor-cr 7 r8) (vp-xor-cr 7 r9)
				(vp-add-rr r1 r2) (vp-add-rr r1 r3) (vp-add-rr r1 r4) (vp-add-rr r1 r5)
				(vp-add-rr r1 r6) (vp-add-rr r1 r7) (vp-add-rr r1 r8) (vp-add-rr r1 r9)
				(vp-sub-rr r1 r2) (vp-sub-rr r1 r3) (vp-sub-rr r1 r4) (vp-sub-rr r1 r5)
				(vp-sub-rr r1 r6) (vp-sub-rr r1 r7) (vp-sub-rr r1 r8) (vp-sub-rr r1 r9)
				(vp-and-rr r1 r2) (vp-and-rr r1 r3) (vp-and-rr r1 r4) (vp-and-rr r1 r5)
				(vp-and-rr r1 r6) (vp-and-rr r1 r7) (vp-and-rr r1 r8) (vp-and-rr r1 r9)
				(vp-or-rr r1 r2) (vp-or-rr r1 r3) (vp-or-rr r1 r4) (vp-or-rr r1 r5)
				(vp-or-rr r1 r6) (vp-or-rr r1 r7) (vp-or-rr r1 r8) (vp-or-rr r1 r9)
				(vp-xor-rr r1 r2) (vp-xor-rr r1 r3) (vp-xor-rr r1 r4) (vp-xor-rr r1 r5)
				(vp-xor-rr r1 r6) (vp-xor-rr r1 r7) (vp-xor-rr r1 r8) (vp-xor-rr r1 r9)
				(vp-shl-cr 3 r2) (vp-shl-cr 3 r3) (vp-shl-cr 3 r4) (vp-shl-cr 3 r5)
				(vp-shl-cr 3 r6) (vp-shl-cr 3 r7) (vp-shl-cr 3 r8) (vp-shl-cr 3 r9)
				(vp-shr-cr 2 r2) (vp-shr-cr 2 r3) (vp-shr-cr 2 r4) (vp-shr-cr 2 r5)
				(vp-shr-cr 2 r6) (vp-shr-cr 2 r7) (vp-shr-cr 2 r8) (vp-shr-cr 2 r9)
				(vp-asr-cr 1 r2) (vp-asr-cr 1 r3) (vp-asr-cr 1 r4) (vp-asr-cr 1 r5)
				(vp-asr-cr 1 r6) (vp-asr-cr 1 r7) (vp-asr-cr 1 r8) (vp-asr-cr 1 r9)
				(vp-shl-rr r1 r2) (vp-shl-rr r1 r3) (vp-shl-rr r1 r4) (vp-shl-rr r1 r5)
				(vp-shl-rr r1 r6) (vp-shl-rr r1 r7) (vp-shl-rr r1 r8) (vp-shl-rr r1 r9)
				(vp-shr-rr r1 r2) (vp-shr-rr r1 r3) (vp-shr-rr r1 r4) (vp-shr-rr r1 r5)
				(vp-shr-rr r1 r6) (vp-shr-rr r1 r7) (vp-shr-rr r1 r8) (vp-shr-rr r1 r9)
				(vp-asr-rr r1 r2) (vp-asr-rr r1 r3) (vp-asr-rr r1 r4) (vp-asr-rr r1 r5)
				(vp-asr-rr r1 r6) (vp-asr-rr r1 r7) (vp-asr-rr r1 r8) (vp-asr-rr r1 r9))
			(vp-add-cr 1 loop)
		(loop-until `(,loop = 1000))
		(call 'sys_task :sleep '(0))

		(call 'sys_pii :time :nil {end})
		(assign {end - start, 1000 * 1000 + cnt} {end, cnt})
	(loop-until {end >= 100000})
	(call 'num :create {1000000 * cnt / end} {regs_vops})

	;memory ops test
	(call 'sys_pii :time :nil {start})
	(assign {0} {cnt})
	(loop-start)

		(vp-def (loop r1 r2 r3 r4))
		(assign {&mem1, &mem2} `(,r1 ,r2))
		(vp-cpy-cr 0 loop)
		(loop-start)
			(test-block 1000
				(vp-cpy-ir r1 0 r3)
				(vp-cpy-ir r2 0 r4)
				(vp-cpy-ri r3 r2 0)
				(vp-cpy-ri r4 r1 0)
				(vp-cpy-ir-i r1 0 r3)
				(vp-cpy-ir-i r2 0 r4)
				(vp-cpy-ri-i r3 r2 0)
				(vp-cpy-ri-i r4 r1 0)
				(vp-cpy-ir-s r1 0 r3)
				(vp-cpy-ir-s r2 0 r4)
				(vp-cpy-ri-s r3 r2 0)
				(vp-cpy-ri-s r4 r1 0)
				(vp-cpy-ir-b r1 0 r3)
				(vp-cpy-ir-b r2 0 r4)
				(vp-cpy-ri-b r3 r2 0)
				(vp-cpy-ri-b r4 r1 0))
			(vp-add-cr 1 loop)
		(loop-until `(,loop = 1000))
		(call 'sys_task :sleep '(0))

		(call 'sys_pii :time :nil {end})
		(assign {end - start, 1000 * 1000 + cnt} {end, cnt})
	(loop-until {end >= 100000})
	(call 'num :create {1000000 * cnt / end} {memory_vops})

	;reals ops test
	(call 'sys_pii :time :nil {start})
	(assign {0} {cnt})
	(loop-start)

		(vp-def (loop r1 r2))
		(vp-cpy-cr 0 loop)
		(loop-start)
			(test-block 6
				(call 'sys_math :r_i2r '(1000) `(,r1))
				(call 'sys_math :r_add `(,r1 ,r1) `(,r2))
				(call 'sys_math :r_sub `(,r2 ,r1) `(,r1))
				(call 'sys_math :r_mul `(,r2 ,r1) `(,r2))
				(call 'sys_math :r_div `(,r1 ,r1) `(,r2))
				(call 'sys_math :r_r2i `(,r2) `(,r1)))
			(vp-add-cr 1 loop)
		(loop-until `(,loop = 100))
		(call 'sys_task :sleep '(0))

		(call 'sys_pii :time :nil {end})
		(assign {end - start, 6 * 100 + cnt} {end, cnt})
	(loop-until {end >= 100000})
	(call 'num :create {1000000 * cnt / end} {reals_vops})

	(call 'list :create :nil {args})
	(call 'list :push_back2 {args, regs_vops, memory_vops})
	(call 'list :push_back {args, reals_vops})

	(exit {this, args})
	(return)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error {this, "(vops)", +error_msg_wrong_types, args})
	(signature '()))

	(pop-scope-syms)

(def-func-end)
